#!/usr/bin/env perl
use strict;
use warnings;
my $VERSION = '0.1.0';

# __MOBUNDLE_INCLUSION__
BEGIN {
   my %file_for = (
# __MOBUNDLE_FILES__


# __MOBUNDLE_FILE__

      'App/OnePif.pm' => <<'END_OF_FILE',
 package App::OnePif;
 use strict;
 use warnings;
 { our $VERSION = '0.001'; }
 use English qw( -no_match_vars );
 use Carp;
 use 5.010;
 
 use Mo qw< is default >;
 use Path::Tiny;
 use YAML::Tiny;
 
 {
    no warnings 'redefine';
    my @booleans = (
       'JSON::PP::Boolean',
       'JSON::XS::Boolean',
       'Types::Serialiser::Boolean',  # should not be needed
       'Mojo::JSON::_Bool',           # only up to Mojolicious 6.21
       # Dancer, Dancer2 use JSON
    );
    sub YAML::Tiny::dumper_for_unknown {
       my ($self, $element, $line, $indent, $seen) = @_;
       my $type = ref $element;
 
       for my $boolean (@booleans) {
          next unless $element->isa($boolean);
          $line .= $element ? ' true' : ' false';
          return $line;
       }
 
       # no known boolean... complain!
       die \"YAML::Tiny does not support $type references";
    }
 }
 
 has file => (
    is      => 'rw',
    lazy    => 1,
    default => sub { 'data.1pif' },
 );
 
 has attachments_dir => (
    is => 'rw',
    lazy => 1,
    default => sub {
       my $self = shift;
       path($self->file())->sibling('attachments')
    },
 );
 
 has records_byid => (
    is => 'rw',
    lazy => 1,
    default => sub {
       my $self = shift;
       my $bt = $self->records_bytype;
       my %retval;
       for my $list (values %$bt) {
          $retval{$_->{_id}} = $_ for @$list;
       }
       return \%retval;
    },
 );
 
 has records_bytype => (
    is => 'rw',
    lazy => 1,
    default => \&DEFAULT_records,
 );
 
 has JSON_decoder => (
    is      => 'rw',
    lazy    => 1,
    default => sub {
       for my $module (qw< JSON JSON::PP >) {
          (my $filename = "$module.pm") =~ s{::}{/}gmxs;
          my $retval = eval {
             require $filename;
             $module->can('decode_json');
          } or next;
          return $retval;
       } ## end for my $module (qw< JSON JSON::PP >)
       return;
    },
 );
 
 has YAML_dumper => (
    is      => 'rw',
    lazy    => 1,
    default => sub {
       for my $module (qw< YAML YAML::Tiny >) {
          (my $filename = "$module.pm") =~ s{::}{/}gmxs;
          my $retval = eval {
             require $filename;
             $module->can('Dump');
          } or next;
          return $retval;
       } ## end for my $module (qw< YAML YAML::Tiny >)
       return;
    },
 );
 
 has term => (
    is      => 'rw',
    lazy    => 1,
    default => sub {
       return Term::ReadLine->new('1password');
    },
 );
 
 has out => (
    is      => 'rw',
    lazy    => 1,
    default => sub {
       my ($self) = @_;
       my $term = $self->term();
       my $out = eval { $term->out() } || \*STDOUT;
       binmode $out, ':encoding(utf8)';
       return $out;
    },
 );
 
 has type => (
    is      => 'rw',
    lazy    => 1,
    default => sub { '*' },
 );
 
 has types => (
    is => 'rw',
    lazy => 1,
    default => \&DEFAULT_types,
 );
 
 sub run {
    my ($package, @ARGV) = @_;
    $package->new(args => \@ARGV)->run_interactive();
 }
 
 sub run_interactive {
    my ($self) = @_;
    my %main_for = (
       '.q' => 'quit',
       e => 'exit',
       f => 'file',
       h => 'help',
       l => 'list',
       p => 'print',
       q => 'quit',
       s => 'search',
       t => 'type',
       ts => 'types',
       u => 'type',
       use => 'type',
    );
    require Term::ReadLine;
    my $term = $self->term();
    my $out  = $self->out();
    $self->records_bytype; # just load...
    while (defined(my $line = $term->readline('1password> '))) {
       my ($command, $rest) = $line =~ m{\A \s* (\S+) \s* (.*?) \s*\z}mxs;
       next unless defined($command) && length($command);
       $command = $main_for{$command} if exists $main_for{$command};
       if (my $cb = $self->can("do_$command")) {
          $self->$cb($rest);
       }
       else {
          print {$out} "ERROR: unknown command [$command]\n",;
       }
    } ## end while (defined(my $line =...
 } ## end sub run_interactive
 
 sub attachments_for {
    my ($self, $uuid) = @_;
    my $target = $self->attachments_dir()->child($uuid);
    return unless $target->exists;
    return [ map { $_->stringify } $target->children ];
 }
 
 sub clear_records {
    my ($self) = @_;
    delete $self->{records_bytype};
    delete $self->{records_byid};
    delete $self->{types};
    $self->{type} = '*';
    return $self;
 }
 
 sub do_help {
    my ($self) = @_;
    $self->print(<<'END_OF_HELP');
 Available commands:
 * quit (also: q, .q)
    exit the program immediately, exit code is 0
 * exit [code] (also: e)
    exit the program immediately, can accept optional exit code
 * file [filename] (also: f)
    set the filename to use for taking data (default: 'data1.pif')
 * types (also: ts)
    show available types and possible aliases
 * type [wanted] (also: t, use, u)
    get current default type or set it to wanted. It is possible to
    reset the default type by setting type "*" (no quotes)
 * list [type] (also: l)
    get a list for the current set type. By default no type is set
    and the list includes all elements, otherwise it is filtered
    by the wanted type.
    If type parameter is provided, work on specified type instead
    of default one.
 * print [ <id> ] (also: p)
    show record by provided id (look for ids with the list command).
    It is also possible to specify the type, in which case the id
    is interpreted in the context of the specific type.
 * search <query-string> (also: s)
    search for the query-string, literally. Looks for a substring in
    the YAML rendition of each record that is equal to the query-string,
    case-insensitively. If a type is set, the search is restricted to
    that type.
 END_OF_HELP
 }
 
 sub do_quit {
    exit 0;
 }
 
 sub do_exit {
    my ($self, $code) = @_;
    exit($code || 0);
 }
 
 sub do_file {
    my ($self, $filename) = @_;
    if (defined $filename && length $filename) {
       if ($filename =~ m{\A(['"])(.*)$1\z}mxs) {
          $filename = $2;
       }
       $self->file($filename);
       $self->clear_records();
    } ## end if (defined $filename ...
    else {
       $self->print($self->file());
    }
    return $self;
 } ## end sub do_file
 
 sub DEFAULT_types {
    my $self = shift;
 
    state $aliases_for = {
       'passwords.Password' => [qw< p password passwords >],
       'securenotes.SecureNote' => [qw< note notes >],
       'wallet.computer.License' => [qw< license licenses >],
       'webforms.WebForm' => [qw< form forms >],
       'wallet.financial.CreditCard' => [qw< card cards >],
    };
 
    my $rbt = $self->records_bytype;
    my %retval = ('*' => ['*', '*']);
    for my $type (keys %$rbt) {
       my @alternatives = ($type, sort {
          (length($a) <=> length($b)) || ($a cmp $b)
       } @{$aliases_for->{$type} // []});
       push @alternatives, $type;
       $retval{$_} = \@alternatives for @alternatives;
    }
 
    # now first item is always the canonical form, second is the shortest
    # alias, then the rest including the canonical form at the end
    return \%retval;
 }
 
 sub do_types {
    my ($self) = @_;
 
    # might cache this somewhere...
    my %shorts;
    my $length = 0;
    for my $list (values %{$self->types}) {
       my ($canon, $shorter, @rest) = @$list;
       $shorts{$shorter} = \@rest;
       $length = length($shorter) if length($shorter) > $length;
    }
    $shorts{'*'} = ' (accept any type)';
 
    my $current = $self->type;
    my $marker = '<*>';
    my $blanks = ' ' x length $marker;
    for my $type (sort(keys %shorts)) {
       my $rest = $shorts{$type};
       $rest = " (also: @$rest)" if ref($rest) && @$rest;
       $rest = '' if ref $rest;
       my $indicator = $type eq $current ? $marker : $blanks;
       $self->print(sprintf "%s %${length}s%s", $indicator, $type, $rest);
    }
 }
 
 sub real_type {
    my ($self, $type) = @_;
    return '*' unless defined $type;
    my $types = $self->types;
    return unless exists $types->{$type};
    return $types->{$type}[0];
 }
 
 sub do_type {
    my ($self, $type) = @_;
    if (defined $type && length $type) {
       if ($self->real_type($type)) {
          $self->type($type);
       }
       else {
          $self->print("unknown type [$type]");
       }
    }
    else {
       $self->print($self->type());
    }
 } ## end sub do_type
 
 sub print {
    my $self = shift;
    print {$self->out()} @_, "\n";
 }
 
 sub DEFAULT_records {
    my ($self) = @_;
    my $file = $self->file();
    open my $fh, '<:raw', $file
       or croak "open('$file'): $OS_ERROR";
    my $decoder = $self->JSON_decoder;
    my %by_type;
    while (<$fh>) {
       my $record = $decoder->($_);
       if (my $attachments = $self->attachments_for($record->{uuid})) {
          $record->{attachments} = $attachments;
       }
       push @{$by_type{$record->{typeName}}}, $record;
       scalar <$fh>;    # drop a line
    }
 
    for my $list (values %by_type) {
       @$list = sort { $a->{title} cmp $b->{title} } @$list;
    }
 
    my $dumper  = $self->YAML_dumper;
    _traverse(\%by_type, undef, sub {
       my ($n, $v) = @_;
       $v->{_id} = $n;
       $v->{_yaml} = $dumper->($v);
    });
 
    return \%by_type;
 }
 
 sub do_list {
    my ($self, $type) = @_;
    $type ||= $self->type();
    $type = $self->real_type($type);
    my $records = $self->clipped_records_bytype($type);
    _traverse($records, sub {
       my ($key) = @_;
       $self->print($key) if $type eq '*';
    }, sub {
       my ($n, $record) = @_;
       $self->print(sprintf('   %3d %s', $record->{_id}, $record->{title}));
    });
 }
 
 sub do_print {
    my ($self, $id) = @_;
    my $by_id = $self->records_byid;
    if ($id && exists($by_id->{$id})) {
       $self->print($by_id->{$id}{_yaml});
    }
    else {
       $self->print('invalid id');
    }
 }
 
 sub do_search {
    my ($self, $query) = @_;
    $query = '' unless defined $query;
    $query =~ s{\A\s+|\s+\z}{}gmxs;
    return $self->do_list unless length $query;
 
    $query = quotemeta $query; # ready for a regex now
    my $type = $self->real_type($self->type);
    my $records = $self->clipped_records_bytype($type);
    my $last_printed_type = $type;
    _traverse($records, undef, sub {
          my ($n, $record) = @_;
          if ($record->{_yaml} =~ m{$query}i) {
             my $rt = $self->real_type($record->{typeName});
             if ($last_printed_type ne $rt) {
                $self->print($record->{typeName});
                $last_printed_type = $rt;
             }
             $self->print(sprintf('   %3d %s', $record->{_id},
                   $record->{title}));
          }
       });
 }
 
 sub clipped_records_bytype {
    my ($self, $type) = @_;
    $type = $self->real_type($type);
    my $records = $self->records_bytype();
    $records = { $type => $records->{$type} }
       unless $type eq '*';
    return $records;
 }
 
 sub _traverse {
    my ($hash, $key_callback, $values_callback) = @_;
    my $n = 0;
    for my $key (sort keys %$hash) {
       $key_callback->($key) if $key_callback;
       next unless $values_callback;
       $values_callback->(++$n, $_) for @{$hash->{$key}};
    }
 }
 
 1;

END_OF_FILE


# __MOBUNDLE_FILE__

      'JSON/PP.pm' => <<'END_OF_FILE',
 package JSON::PP;
 
 # JSON-2.0
 
 use 5.005;
 use strict;
 use base qw(Exporter);
 use overload ();
 
 use Carp ();
 use B ();
 #use Devel::Peek;
 
 $JSON::PP::VERSION = '2.27400';
 
 @JSON::PP::EXPORT = qw(encode_json decode_json from_json to_json);
 
 # instead of hash-access, i tried index-access for speed.
 # but this method is not faster than what i expected. so it will be changed.
 
 use constant P_ASCII                => 0;
 use constant P_LATIN1               => 1;
 use constant P_UTF8                 => 2;
 use constant P_INDENT               => 3;
 use constant P_CANONICAL            => 4;
 use constant P_SPACE_BEFORE         => 5;
 use constant P_SPACE_AFTER          => 6;
 use constant P_ALLOW_NONREF         => 7;
 use constant P_SHRINK               => 8;
 use constant P_ALLOW_BLESSED        => 9;
 use constant P_CONVERT_BLESSED      => 10;
 use constant P_RELAXED              => 11;
 
 use constant P_LOOSE                => 12;
 use constant P_ALLOW_BIGNUM         => 13;
 use constant P_ALLOW_BAREKEY        => 14;
 use constant P_ALLOW_SINGLEQUOTE    => 15;
 use constant P_ESCAPE_SLASH         => 16;
 use constant P_AS_NONBLESSED        => 17;
 
 use constant P_ALLOW_UNKNOWN        => 18;
 
 use constant OLD_PERL => $] < 5.008 ? 1 : 0;
 
 BEGIN {
     my @xs_compati_bit_properties = qw(
             latin1 ascii utf8 indent canonical space_before space_after allow_nonref shrink
             allow_blessed convert_blessed relaxed allow_unknown
     );
     my @pp_bit_properties = qw(
             allow_singlequote allow_bignum loose
             allow_barekey escape_slash as_nonblessed
     );
 
     # Perl version check, Unicode handling is enabled?
     # Helper module sets @JSON::PP::_properties.
     if ($] < 5.008 ) {
         my $helper = $] >= 5.006 ? 'JSON::PP::Compat5006' : 'JSON::PP::Compat5005';
         eval qq| require $helper |;
         if ($@) { Carp::croak $@; }
     }
 
     for my $name (@xs_compati_bit_properties, @pp_bit_properties) {
         my $flag_name = 'P_' . uc($name);
 
         eval qq/
             sub $name {
                 my \$enable = defined \$_[1] ? \$_[1] : 1;
 
                 if (\$enable) {
                     \$_[0]->{PROPS}->[$flag_name] = 1;
                 }
                 else {
                     \$_[0]->{PROPS}->[$flag_name] = 0;
                 }
 
                 \$_[0];
             }
 
             sub get_$name {
                 \$_[0]->{PROPS}->[$flag_name] ? 1 : '';
             }
         /;
     }
 
 }
 
 
 
 # Functions
 
 my %encode_allow_method
      = map {($_ => 1)} qw/utf8 pretty allow_nonref latin1 self_encode escape_slash
                           allow_blessed convert_blessed indent indent_length allow_bignum
                           as_nonblessed
                         /;
 my %decode_allow_method
      = map {($_ => 1)} qw/utf8 allow_nonref loose allow_singlequote allow_bignum
                           allow_barekey max_size relaxed/;
 
 
 my $JSON; # cache
 
 sub encode_json ($) { # encode
     ($JSON ||= __PACKAGE__->new->utf8)->encode(@_);
 }
 
 
 sub decode_json { # decode
     ($JSON ||= __PACKAGE__->new->utf8)->decode(@_);
 }
 
 # Obsoleted
 
 sub to_json($) {
    Carp::croak ("JSON::PP::to_json has been renamed to encode_json.");
 }
 
 
 sub from_json($) {
    Carp::croak ("JSON::PP::from_json has been renamed to decode_json.");
 }
 
 
 # Methods
 
 sub new {
     my $class = shift;
     my $self  = {
         max_depth   => 512,
         max_size    => 0,
         indent      => 0,
         FLAGS       => 0,
         fallback      => sub { encode_error('Invalid value. JSON can only reference.') },
         indent_length => 3,
     };
 
     bless $self, $class;
 }
 
 
 sub encode {
     return $_[0]->PP_encode_json($_[1]);
 }
 
 
 sub decode {
     return $_[0]->PP_decode_json($_[1], 0x00000000);
 }
 
 
 sub decode_prefix {
     return $_[0]->PP_decode_json($_[1], 0x00000001);
 }
 
 
 # accessor
 
 
 # pretty printing
 
 sub pretty {
     my ($self, $v) = @_;
     my $enable = defined $v ? $v : 1;
 
     if ($enable) { # indent_length(3) for JSON::XS compatibility
         $self->indent(1)->indent_length(3)->space_before(1)->space_after(1);
     }
     else {
         $self->indent(0)->space_before(0)->space_after(0);
     }
 
     $self;
 }
 
 # etc
 
 sub max_depth {
     my $max  = defined $_[1] ? $_[1] : 0x80000000;
     $_[0]->{max_depth} = $max;
     $_[0];
 }
 
 
 sub get_max_depth { $_[0]->{max_depth}; }
 
 
 sub max_size {
     my $max  = defined $_[1] ? $_[1] : 0;
     $_[0]->{max_size} = $max;
     $_[0];
 }
 
 
 sub get_max_size { $_[0]->{max_size}; }
 
 
 sub filter_json_object {
     $_[0]->{cb_object} = defined $_[1] ? $_[1] : 0;
     $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
     $_[0];
 }
 
 sub filter_json_single_key_object {
     if (@_ > 1) {
         $_[0]->{cb_sk_object}->{$_[1]} = $_[2];
     }
     $_[0]->{F_HOOK} = ($_[0]->{cb_object} or $_[0]->{cb_sk_object}) ? 1 : 0;
     $_[0];
 }
 
 sub indent_length {
     if (!defined $_[1] or $_[1] > 15 or $_[1] < 0) {
         Carp::carp "The acceptable range of indent_length() is 0 to 15.";
     }
     else {
         $_[0]->{indent_length} = $_[1];
     }
     $_[0];
 }
 
 sub get_indent_length {
     $_[0]->{indent_length};
 }
 
 sub sort_by {
     $_[0]->{sort_by} = defined $_[1] ? $_[1] : 1;
     $_[0];
 }
 
 sub allow_bigint {
     Carp::carp("allow_bigint() is obsoleted. use allow_bignum() insted.");
 }
 
 ###############################
 
 ###
 ### Perl => JSON
 ###
 
 
 { # Convert
 
     my $max_depth;
     my $indent;
     my $ascii;
     my $latin1;
     my $utf8;
     my $space_before;
     my $space_after;
     my $canonical;
     my $allow_blessed;
     my $convert_blessed;
 
     my $indent_length;
     my $escape_slash;
     my $bignum;
     my $as_nonblessed;
 
     my $depth;
     my $indent_count;
     my $keysort;
 
 
     sub PP_encode_json {
         my $self = shift;
         my $obj  = shift;
 
         $indent_count = 0;
         $depth        = 0;
 
         my $idx = $self->{PROPS};
 
         ($ascii, $latin1, $utf8, $indent, $canonical, $space_before, $space_after, $allow_blessed,
             $convert_blessed, $escape_slash, $bignum, $as_nonblessed)
          = @{$idx}[P_ASCII .. P_SPACE_AFTER, P_ALLOW_BLESSED, P_CONVERT_BLESSED,
                     P_ESCAPE_SLASH, P_ALLOW_BIGNUM, P_AS_NONBLESSED];
 
         ($max_depth, $indent_length) = @{$self}{qw/max_depth indent_length/};
 
         $keysort = $canonical ? sub { $a cmp $b } : undef;
 
         if ($self->{sort_by}) {
             $keysort = ref($self->{sort_by}) eq 'CODE' ? $self->{sort_by}
                      : $self->{sort_by} =~ /\D+/       ? $self->{sort_by}
                      : sub { $a cmp $b };
         }
 
         encode_error("hash- or arrayref expected (not a simple scalar, use allow_nonref to allow this)")
              if(!ref $obj and !$idx->[ P_ALLOW_NONREF ]);
 
         my $str  = $self->object_to_json($obj);
 
         $str .= "\n" if ( $indent ); # JSON::XS 2.26 compatible
 
         unless ($ascii or $latin1 or $utf8) {
             utf8::upgrade($str);
         }
 
         if ($idx->[ P_SHRINK ]) {
             utf8::downgrade($str, 1);
         }
 
         return $str;
     }
 
 
     sub object_to_json {
         my ($self, $obj) = @_;
         my $type = ref($obj);
 
         if($type eq 'HASH'){
             return $self->hash_to_json($obj);
         }
         elsif($type eq 'ARRAY'){
             return $self->array_to_json($obj);
         }
         elsif ($type) { # blessed object?
             if (blessed($obj)) {
 
                 return $self->value_to_json($obj) if ( $obj->isa('JSON::PP::Boolean') );
 
                 if ( $convert_blessed and $obj->can('TO_JSON') ) {
                     my $result = $obj->TO_JSON();
                     if ( defined $result and ref( $result ) ) {
                         if ( refaddr( $obj ) eq refaddr( $result ) ) {
                             encode_error( sprintf(
                                 "%s::TO_JSON method returned same object as was passed instead of a new one",
                                 ref $obj
                             ) );
                         }
                     }
 
                     return $self->object_to_json( $result );
                 }
 
                 return "$obj" if ( $bignum and _is_bignum($obj) );
                 return $self->blessed_to_json($obj) if ($allow_blessed and $as_nonblessed); # will be removed.
 
                 encode_error( sprintf("encountered object '%s', but neither allow_blessed "
                     . "nor convert_blessed settings are enabled", $obj)
                 ) unless ($allow_blessed);
 
                 return 'null';
             }
             else {
                 return $self->value_to_json($obj);
             }
         }
         else{
             return $self->value_to_json($obj);
         }
     }
 
 
     sub hash_to_json {
         my ($self, $obj) = @_;
         my @res;
 
         encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                          if (++$depth > $max_depth);
 
         my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
         my $del = ($space_before ? ' ' : '') . ':' . ($space_after ? ' ' : '');
 
         for my $k ( _sort( $obj ) ) {
             if ( OLD_PERL ) { utf8::decode($k) } # key for Perl 5.6 / be optimized
             push @res, string_to_json( $self, $k )
                           .  $del
                           . ( $self->object_to_json( $obj->{$k} ) || $self->value_to_json( $obj->{$k} ) );
         }
 
         --$depth;
         $self->_down_indent() if ($indent);
 
         return   '{' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' )  . '}';
     }
 
 
     sub array_to_json {
         my ($self, $obj) = @_;
         my @res;
 
         encode_error("json text or perl structure exceeds maximum nesting level (max_depth set too low?)")
                                          if (++$depth > $max_depth);
 
         my ($pre, $post) = $indent ? $self->_up_indent() : ('', '');
 
         for my $v (@$obj){
             push @res, $self->object_to_json($v) || $self->value_to_json($v);
         }
 
         --$depth;
         $self->_down_indent() if ($indent);
 
         return '[' . ( @res ? $pre : '' ) . ( @res ? join( ",$pre", @res ) . $post : '' ) . ']';
     }
 
 
     sub value_to_json {
         my ($self, $value) = @_;
 
         return 'null' if(!defined $value);
 
         my $b_obj = B::svref_2object(\$value);  # for round trip problem
         my $flags = $b_obj->FLAGS;
 
         return $value # as is 
             if $flags & ( B::SVp_IOK | B::SVp_NOK ) and !( $flags & B::SVp_POK ); # SvTYPE is IV or NV?
 
         my $type = ref($value);
 
         if(!$type){
             return string_to_json($self, $value);
         }
         elsif( blessed($value) and  $value->isa('JSON::PP::Boolean') ){
             return $$value == 1 ? 'true' : 'false';
         }
         elsif ($type) {
             if ((overload::StrVal($value) =~ /=(\w+)/)[0]) {
                 return $self->value_to_json("$value");
             }
 
             if ($type eq 'SCALAR' and defined $$value) {
                 return   $$value eq '1' ? 'true'
                        : $$value eq '0' ? 'false'
                        : $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ? 'null'
                        : encode_error("cannot encode reference to scalar");
             }
 
              if ( $self->{PROPS}->[ P_ALLOW_UNKNOWN ] ) {
                  return 'null';
              }
              else {
                  if ( $type eq 'SCALAR' or $type eq 'REF' ) {
                     encode_error("cannot encode reference to scalar");
                  }
                  else {
                     encode_error("encountered $value, but JSON can only represent references to arrays or hashes");
                  }
              }
 
         }
         else {
             return $self->{fallback}->($value)
                  if ($self->{fallback} and ref($self->{fallback}) eq 'CODE');
             return 'null';
         }
 
     }
 
 
     my %esc = (
         "\n" => '\n',
         "\r" => '\r',
         "\t" => '\t',
         "\f" => '\f',
         "\b" => '\b',
         "\"" => '\"',
         "\\" => '\\\\',
         "\'" => '\\\'',
     );
 
 
     sub string_to_json {
         my ($self, $arg) = @_;
 
         $arg =~ s/([\x22\x5c\n\r\t\f\b])/$esc{$1}/g;
         $arg =~ s/\//\\\//g if ($escape_slash);
         $arg =~ s/([\x00-\x08\x0b\x0e-\x1f])/'\\u00' . unpack('H2', $1)/eg;
 
         if ($ascii) {
             $arg = JSON_PP_encode_ascii($arg);
         }
 
         if ($latin1) {
             $arg = JSON_PP_encode_latin1($arg);
         }
 
         if ($utf8) {
             utf8::encode($arg);
         }
 
         return '"' . $arg . '"';
     }
 
 
     sub blessed_to_json {
         my $reftype = reftype($_[1]) || '';
         if ($reftype eq 'HASH') {
             return $_[0]->hash_to_json($_[1]);
         }
         elsif ($reftype eq 'ARRAY') {
             return $_[0]->array_to_json($_[1]);
         }
         else {
             return 'null';
         }
     }
 
 
     sub encode_error {
         my $error  = shift;
         Carp::croak "$error";
     }
 
 
     sub _sort {
         defined $keysort ? (sort $keysort (keys %{$_[0]})) : keys %{$_[0]};
     }
 
 
     sub _up_indent {
         my $self  = shift;
         my $space = ' ' x $indent_length;
 
         my ($pre,$post) = ('','');
 
         $post = "\n" . $space x $indent_count;
 
         $indent_count++;
 
         $pre = "\n" . $space x $indent_count;
 
         return ($pre,$post);
     }
 
 
     sub _down_indent { $indent_count--; }
 
 
     sub PP_encode_box {
         {
             depth        => $depth,
             indent_count => $indent_count,
         };
     }
 
 } # Convert
 
 
 sub _encode_ascii {
     join('',
         map {
             $_ <= 127 ?
                 chr($_) :
             $_ <= 65535 ?
                 sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
         } unpack('U*', $_[0])
     );
 }
 
 
 sub _encode_latin1 {
     join('',
         map {
             $_ <= 255 ?
                 chr($_) :
             $_ <= 65535 ?
                 sprintf('\u%04x', $_) : sprintf('\u%x\u%x', _encode_surrogates($_));
         } unpack('U*', $_[0])
     );
 }
 
 
 sub _encode_surrogates { # from perlunicode
     my $uni = $_[0] - 0x10000;
     return ($uni / 0x400 + 0xD800, $uni % 0x400 + 0xDC00);
 }
 
 
 sub _is_bignum {
     $_[0]->isa('Math::BigInt') or $_[0]->isa('Math::BigFloat');
 }
 
 
 
 #
 # JSON => Perl
 #
 
 my $max_intsize;
 
 BEGIN {
     my $checkint = 1111;
     for my $d (5..64) {
         $checkint .= 1;
         my $int   = eval qq| $checkint |;
         if ($int =~ /[eE]/) {
             $max_intsize = $d - 1;
             last;
         }
     }
 }
 
 { # PARSE 
 
     my %escapes = ( #  by Jeremy Muhlich <jmuhlich [at] bitflood.org>
         b    => "\x8",
         t    => "\x9",
         n    => "\xA",
         f    => "\xC",
         r    => "\xD",
         '\\' => '\\',
         '"'  => '"',
         '/'  => '/',
     );
 
     my $text; # json data
     my $at;   # offset
     my $ch;   # first character
     my $len;  # text length (changed according to UTF8 or NON UTF8)
     # INTERNAL
     my $depth;          # nest counter
     my $encoding;       # json text encoding
     my $is_valid_utf8;  # temp variable
     my $utf8_len;       # utf8 byte length
     # FLAGS
     my $utf8;           # must be utf8
     my $max_depth;      # max nest number of objects and arrays
     my $max_size;
     my $relaxed;
     my $cb_object;
     my $cb_sk_object;
 
     my $F_HOOK;
 
     my $allow_bigint;   # using Math::BigInt
     my $singlequote;    # loosely quoting
     my $loose;          # 
     my $allow_barekey;  # bareKey
 
     # $opt flag
     # 0x00000001 .... decode_prefix
     # 0x10000000 .... incr_parse
 
     sub PP_decode_json {
         my ($self, $opt); # $opt is an effective flag during this decode_json.
 
         ($self, $text, $opt) = @_;
 
         ($at, $ch, $depth) = (0, '', 0);
 
         if ( !defined $text or ref $text ) {
             decode_error("malformed JSON string, neither array, object, number, string or atom");
         }
 
         my $idx = $self->{PROPS};
 
         ($utf8, $relaxed, $loose, $allow_bigint, $allow_barekey, $singlequote)
             = @{$idx}[P_UTF8, P_RELAXED, P_LOOSE .. P_ALLOW_SINGLEQUOTE];
 
         if ( $utf8 ) {
             utf8::downgrade( $text, 1 ) or Carp::croak("Wide character in subroutine entry");
         }
         else {
             utf8::upgrade( $text );
             utf8::encode( $text );
         }
 
         $len = length $text;
 
         ($max_depth, $max_size, $cb_object, $cb_sk_object, $F_HOOK)
              = @{$self}{qw/max_depth  max_size cb_object cb_sk_object F_HOOK/};
 
         if ($max_size > 1) {
             use bytes;
             my $bytes = length $text;
             decode_error(
                 sprintf("attempted decode of JSON text of %s bytes size, but max_size is set to %s"
                     , $bytes, $max_size), 1
             ) if ($bytes > $max_size);
         }
 
         # Currently no effect
         # should use regexp
         my @octets = unpack('C4', $text);
         $encoding =   ( $octets[0] and  $octets[1]) ? 'UTF-8'
                     : (!$octets[0] and  $octets[1]) ? 'UTF-16BE'
                     : (!$octets[0] and !$octets[1]) ? 'UTF-32BE'
                     : ( $octets[2]                ) ? 'UTF-16LE'
                     : (!$octets[2]                ) ? 'UTF-32LE'
                     : 'unknown';
 
         white(); # remove head white space
 
         my $valid_start = defined $ch; # Is there a first character for JSON structure?
 
         my $result = value();
 
         return undef if ( !$result && ( $opt & 0x10000000 ) ); # for incr_parse
 
         decode_error("malformed JSON string, neither array, object, number, string or atom") unless $valid_start;
 
         if ( !$idx->[ P_ALLOW_NONREF ] and !ref $result ) {
                 decode_error(
                 'JSON text must be an object or array (but found number, string, true, false or null,'
                        . ' use allow_nonref to allow this)', 1);
         }
 
         Carp::croak('something wrong.') if $len < $at; # we won't arrive here.
 
         my $consumed = defined $ch ? $at - 1 : $at; # consumed JSON text length
 
         white(); # remove tail white space
 
         if ( $ch ) {
             return ( $result, $consumed ) if ($opt & 0x00000001); # all right if decode_prefix
             decode_error("garbage after JSON object");
         }
 
         ( $opt & 0x00000001 ) ? ( $result, $consumed ) : $result;
     }
 
 
     sub next_chr {
         return $ch = undef if($at >= $len);
         $ch = substr($text, $at++, 1);
     }
 
 
     sub value {
         white();
         return          if(!defined $ch);
         return object() if($ch eq '{');
         return array()  if($ch eq '[');
         return string() if($ch eq '"' or ($singlequote and $ch eq "'"));
         return number() if($ch =~ /[0-9]/ or $ch eq '-');
         return word();
     }
 
     sub string {
         my ($i, $s, $t, $u);
         my $utf16;
         my $is_utf8;
 
         ($is_valid_utf8, $utf8_len) = ('', 0);
 
         $s = ''; # basically UTF8 flag on
 
         if($ch eq '"' or ($singlequote and $ch eq "'")){
             my $boundChar = $ch;
 
             OUTER: while( defined(next_chr()) ){
 
                 if($ch eq $boundChar){
                     next_chr();
 
                     if ($utf16) {
                         decode_error("missing low surrogate character in surrogate pair");
                     }
 
                     utf8::decode($s) if($is_utf8);
 
                     return $s;
                 }
                 elsif($ch eq '\\'){
                     next_chr();
                     if(exists $escapes{$ch}){
                         $s .= $escapes{$ch};
                     }
                     elsif($ch eq 'u'){ # UNICODE handling
                         my $u = '';
 
                         for(1..4){
                             $ch = next_chr();
                             last OUTER if($ch !~ /[0-9a-fA-F]/);
                             $u .= $ch;
                         }
 
                         # U+D800 - U+DBFF
                         if ($u =~ /^[dD][89abAB][0-9a-fA-F]{2}/) { # UTF-16 high surrogate?
                             $utf16 = $u;
                         }
                         # U+DC00 - U+DFFF
                         elsif ($u =~ /^[dD][c-fC-F][0-9a-fA-F]{2}/) { # UTF-16 low surrogate?
                             unless (defined $utf16) {
                                 decode_error("missing high surrogate character in surrogate pair");
                             }
                             $is_utf8 = 1;
                             $s .= JSON_PP_decode_surrogates($utf16, $u) || next;
                             $utf16 = undef;
                         }
                         else {
                             if (defined $utf16) {
                                 decode_error("surrogate pair expected");
                             }
 
                             if ( ( my $hex = hex( $u ) ) > 127 ) {
                                 $is_utf8 = 1;
                                 $s .= JSON_PP_decode_unicode($u) || next;
                             }
                             else {
                                 $s .= chr $hex;
                             }
                         }
 
                     }
                     else{
                         unless ($loose) {
                             $at -= 2;
                             decode_error('illegal backslash escape sequence in string');
                         }
                         $s .= $ch;
                     }
                 }
                 else{
 
                     if ( ord $ch  > 127 ) {
                         unless( $ch = is_valid_utf8($ch) ) {
                             $at -= 1;
                             decode_error("malformed UTF-8 character in JSON string");
                         }
                         else {
                             $at += $utf8_len - 1;
                         }
 
                         $is_utf8 = 1;
                     }
 
                     if (!$loose) {
                         if ($ch =~ /[\x00-\x1f\x22\x5c]/)  { # '/' ok
                             $at--;
                             decode_error('invalid character encountered while parsing JSON string');
                         }
                     }
 
                     $s .= $ch;
                 }
             }
         }
 
         decode_error("unexpected end of string while parsing JSON string");
     }
 
 
     sub white {
         while( defined $ch  ){
             if($ch le ' '){
                 next_chr();
             }
             elsif($ch eq '/'){
                 next_chr();
                 if(defined $ch and $ch eq '/'){
                     1 while(defined(next_chr()) and $ch ne "\n" and $ch ne "\r");
                 }
                 elsif(defined $ch and $ch eq '*'){
                     next_chr();
                     while(1){
                         if(defined $ch){
                             if($ch eq '*'){
                                 if(defined(next_chr()) and $ch eq '/'){
                                     next_chr();
                                     last;
                                 }
                             }
                             else{
                                 next_chr();
                             }
                         }
                         else{
                             decode_error("Unterminated comment");
                         }
                     }
                     next;
                 }
                 else{
                     $at--;
                     decode_error("malformed JSON string, neither array, object, number, string or atom");
                 }
             }
             else{
                 if ($relaxed and $ch eq '#') { # correctly?
                     pos($text) = $at;
                     $text =~ /\G([^\n]*(?:\r\n|\r|\n|$))/g;
                     $at = pos($text);
                     next_chr;
                     next;
                 }
 
                 last;
             }
         }
     }
 
 
     sub array {
         my $a  = $_[0] || []; # you can use this code to use another array ref object.
 
         decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                     if (++$depth > $max_depth);
 
         next_chr();
         white();
 
         if(defined $ch and $ch eq ']'){
             --$depth;
             next_chr();
             return $a;
         }
         else {
             while(defined($ch)){
                 push @$a, value();
 
                 white();
 
                 if (!defined $ch) {
                     last;
                 }
 
                 if($ch eq ']'){
                     --$depth;
                     next_chr();
                     return $a;
                 }
 
                 if($ch ne ','){
                     last;
                 }
 
                 next_chr();
                 white();
 
                 if ($relaxed and $ch eq ']') {
                     --$depth;
                     next_chr();
                     return $a;
                 }
 
             }
         }
 
         decode_error(", or ] expected while parsing array");
     }
 
 
     sub object {
         my $o = $_[0] || {}; # you can use this code to use another hash ref object.
         my $k;
 
         decode_error('json text or perl structure exceeds maximum nesting level (max_depth set too low?)')
                                                 if (++$depth > $max_depth);
         next_chr();
         white();
 
         if(defined $ch and $ch eq '}'){
             --$depth;
             next_chr();
             if ($F_HOOK) {
                 return _json_object_hook($o);
             }
             return $o;
         }
         else {
             while (defined $ch) {
                 $k = ($allow_barekey and $ch ne '"' and $ch ne "'") ? bareKey() : string();
                 white();
 
                 if(!defined $ch or $ch ne ':'){
                     $at--;
                     decode_error("':' expected");
                 }
 
                 next_chr();
                 $o->{$k} = value();
                 white();
 
                 last if (!defined $ch);
 
                 if($ch eq '}'){
                     --$depth;
                     next_chr();
                     if ($F_HOOK) {
                         return _json_object_hook($o);
                     }
                     return $o;
                 }
 
                 if($ch ne ','){
                     last;
                 }
 
                 next_chr();
                 white();
 
                 if ($relaxed and $ch eq '}') {
                     --$depth;
                     next_chr();
                     if ($F_HOOK) {
                         return _json_object_hook($o);
                     }
                     return $o;
                 }
 
             }
 
         }
 
         $at--;
         decode_error(", or } expected while parsing object/hash");
     }
 
 
     sub bareKey { # doesn't strictly follow Standard ECMA-262 3rd Edition
         my $key;
         while($ch =~ /[^\x00-\x23\x25-\x2F\x3A-\x40\x5B-\x5E\x60\x7B-\x7F]/){
             $key .= $ch;
             next_chr();
         }
         return $key;
     }
 
 
     sub word {
         my $word =  substr($text,$at-1,4);
 
         if($word eq 'true'){
             $at += 3;
             next_chr;
             return $JSON::PP::true;
         }
         elsif($word eq 'null'){
             $at += 3;
             next_chr;
             return undef;
         }
         elsif($word eq 'fals'){
             $at += 3;
             if(substr($text,$at,1) eq 'e'){
                 $at++;
                 next_chr;
                 return $JSON::PP::false;
             }
         }
 
         $at--; # for decode_error report
 
         decode_error("'null' expected")  if ($word =~ /^n/);
         decode_error("'true' expected")  if ($word =~ /^t/);
         decode_error("'false' expected") if ($word =~ /^f/);
         decode_error("malformed JSON string, neither array, object, number, string or atom");
     }
 
 
     sub number {
         my $n    = '';
         my $v;
         my $is_dec;
 
         # According to RFC4627, hex or oct digits are invalid.
         if($ch eq '0'){
             my $peek = substr($text,$at,1);
             my $hex  = $peek =~ /[xX]/; # 0 or 1
 
             if($hex){
                 decode_error("malformed number (leading zero must not be followed by another digit)");
                 ($n) = ( substr($text, $at+1) =~ /^([0-9a-fA-F]+)/);
             }
             else{ # oct
                 ($n) = ( substr($text, $at) =~ /^([0-7]+)/);
                 if (defined $n and length $n > 1) {
                     decode_error("malformed number (leading zero must not be followed by another digit)");
                 }
             }
 
             if(defined $n and length($n)){
                 if (!$hex and length($n) == 1) {
                    decode_error("malformed number (leading zero must not be followed by another digit)");
                 }
                 $at += length($n) + $hex;
                 next_chr;
                 return $hex ? hex($n) : oct($n);
             }
         }
 
         if($ch eq '-'){
             $n = '-';
             next_chr;
             if (!defined $ch or $ch !~ /\d/) {
                 decode_error("malformed number (no digits after initial minus)");
             }
         }
 
         while(defined $ch and $ch =~ /\d/){
             $n .= $ch;
             next_chr;
         }
 
         if(defined $ch and $ch eq '.'){
             $n .= '.';
             $is_dec = 1;
 
             next_chr;
             if (!defined $ch or $ch !~ /\d/) {
                 decode_error("malformed number (no digits after decimal point)");
             }
             else {
                 $n .= $ch;
             }
 
             while(defined(next_chr) and $ch =~ /\d/){
                 $n .= $ch;
             }
         }
 
         if(defined $ch and ($ch eq 'e' or $ch eq 'E')){
             $n .= $ch;
             next_chr;
 
             if(defined($ch) and ($ch eq '+' or $ch eq '-')){
                 $n .= $ch;
                 next_chr;
                 if (!defined $ch or $ch =~ /\D/) {
                     decode_error("malformed number (no digits after exp sign)");
                 }
                 $n .= $ch;
             }
             elsif(defined($ch) and $ch =~ /\d/){
                 $n .= $ch;
             }
             else {
                 decode_error("malformed number (no digits after exp sign)");
             }
 
             while(defined(next_chr) and $ch =~ /\d/){
                 $n .= $ch;
             }
 
         }
 
         $v .= $n;
 
         if ($v !~ /[.eE]/ and length $v > $max_intsize) {
             if ($allow_bigint) { # from Adam Sussman
                 require Math::BigInt;
                 return Math::BigInt->new($v);
             }
             else {
                 return "$v";
             }
         }
         elsif ($allow_bigint) {
             require Math::BigFloat;
             return Math::BigFloat->new($v);
         }
 
         return $is_dec ? $v/1.0 : 0+$v;
     }
 
 
     sub is_valid_utf8 {
 
         $utf8_len = $_[0] =~ /[\x00-\x7F]/  ? 1
                   : $_[0] =~ /[\xC2-\xDF]/  ? 2
                   : $_[0] =~ /[\xE0-\xEF]/  ? 3
                   : $_[0] =~ /[\xF0-\xF4]/  ? 4
                   : 0
                   ;
 
         return unless $utf8_len;
 
         my $is_valid_utf8 = substr($text, $at - 1, $utf8_len);
 
         return ( $is_valid_utf8 =~ /^(?:
              [\x00-\x7F]
             |[\xC2-\xDF][\x80-\xBF]
             |[\xE0][\xA0-\xBF][\x80-\xBF]
             |[\xE1-\xEC][\x80-\xBF][\x80-\xBF]
             |[\xED][\x80-\x9F][\x80-\xBF]
             |[\xEE-\xEF][\x80-\xBF][\x80-\xBF]
             |[\xF0][\x90-\xBF][\x80-\xBF][\x80-\xBF]
             |[\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF]
             |[\xF4][\x80-\x8F][\x80-\xBF][\x80-\xBF]
         )$/x )  ? $is_valid_utf8 : '';
     }
 
 
     sub decode_error {
         my $error  = shift;
         my $no_rep = shift;
         my $str    = defined $text ? substr($text, $at) : '';
         my $mess   = '';
         my $type   = $] >= 5.008           ? 'U*'
                    : $] <  5.006           ? 'C*'
                    : utf8::is_utf8( $str ) ? 'U*' # 5.6
                    : 'C*'
                    ;
 
         for my $c ( unpack( $type, $str ) ) { # emulate pv_uni_display() ?
             $mess .=  $c == 0x07 ? '\a'
                     : $c == 0x09 ? '\t'
                     : $c == 0x0a ? '\n'
                     : $c == 0x0d ? '\r'
                     : $c == 0x0c ? '\f'
                     : $c <  0x20 ? sprintf('\x{%x}', $c)
                     : $c == 0x5c ? '\\\\'
                     : $c <  0x80 ? chr($c)
                     : sprintf('\x{%x}', $c)
                     ;
             if ( length $mess >= 20 ) {
                 $mess .= '...';
                 last;
             }
         }
 
         unless ( length $mess ) {
             $mess = '(end of string)';
         }
 
         Carp::croak (
             $no_rep ? "$error" : "$error, at character offset $at (before \"$mess\")"
         );
 
     }
 
 
     sub _json_object_hook {
         my $o    = $_[0];
         my @ks = keys %{$o};
 
         if ( $cb_sk_object and @ks == 1 and exists $cb_sk_object->{ $ks[0] } and ref $cb_sk_object->{ $ks[0] } ) {
             my @val = $cb_sk_object->{ $ks[0] }->( $o->{$ks[0]} );
             if (@val == 1) {
                 return $val[0];
             }
         }
 
         my @val = $cb_object->($o) if ($cb_object);
         if (@val == 0 or @val > 1) {
             return $o;
         }
         else {
             return $val[0];
         }
     }
 
 
     sub PP_decode_box {
         {
             text    => $text,
             at      => $at,
             ch      => $ch,
             len     => $len,
             depth   => $depth,
             encoding      => $encoding,
             is_valid_utf8 => $is_valid_utf8,
         };
     }
 
 } # PARSE
 
 
 sub _decode_surrogates { # from perlunicode
     my $uni = 0x10000 + (hex($_[0]) - 0xD800) * 0x400 + (hex($_[1]) - 0xDC00);
     my $un  = pack('U*', $uni);
     utf8::encode( $un );
     return $un;
 }
 
 
 sub _decode_unicode {
     my $un = pack('U', hex shift);
     utf8::encode( $un );
     return $un;
 }
 
 #
 # Setup for various Perl versions (the code from JSON::PP58)
 #
 
 BEGIN {
 
     unless ( defined &utf8::is_utf8 ) {
        require Encode;
        *utf8::is_utf8 = *Encode::is_utf8;
     }
 
     if ( $] >= 5.008 ) {
         *JSON::PP::JSON_PP_encode_ascii      = \&_encode_ascii;
         *JSON::PP::JSON_PP_encode_latin1     = \&_encode_latin1;
         *JSON::PP::JSON_PP_decode_surrogates = \&_decode_surrogates;
         *JSON::PP::JSON_PP_decode_unicode    = \&_decode_unicode;
     }
 
     if ($] >= 5.008 and $] < 5.008003) { # join() in 5.8.0 - 5.8.2 is broken.
         package JSON::PP;
         require subs;
         subs->import('join');
         eval q|
             sub join {
                 return '' if (@_ < 2);
                 my $j   = shift;
                 my $str = shift;
                 for (@_) { $str .= $j . $_; }
                 return $str;
             }
         |;
     }
 
 
     sub JSON::PP::incr_parse {
         local $Carp::CarpLevel = 1;
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_parse( @_ );
     }
 
 
     sub JSON::PP::incr_skip {
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_skip;
     }
 
 
     sub JSON::PP::incr_reset {
         ( $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new )->incr_reset;
     }
 
     eval q{
         sub JSON::PP::incr_text : lvalue {
             $_[0]->{_incr_parser} ||= JSON::PP::IncrParser->new;
 
             if ( $_[0]->{_incr_parser}->{incr_parsing} ) {
                 Carp::croak("incr_text cannot be called when the incremental parser already started parsing");
             }
             $_[0]->{_incr_parser}->{incr_text};
         }
     } if ( $] >= 5.006 );
 
 } # Setup for various Perl versions (the code from JSON::PP58)
 
 
 ###############################
 # Utilities
 #
 
 BEGIN {
     eval 'require Scalar::Util';
     unless($@){
         *JSON::PP::blessed = \&Scalar::Util::blessed;
         *JSON::PP::reftype = \&Scalar::Util::reftype;
         *JSON::PP::refaddr = \&Scalar::Util::refaddr;
     }
     else{ # This code is from Sclar::Util.
         # warn $@;
         eval 'sub UNIVERSAL::a_sub_not_likely_to_be_here { ref($_[0]) }';
         *JSON::PP::blessed = sub {
             local($@, $SIG{__DIE__}, $SIG{__WARN__});
             ref($_[0]) ? eval { $_[0]->a_sub_not_likely_to_be_here } : undef;
         };
         my %tmap = qw(
             B::NULL   SCALAR
             B::HV     HASH
             B::AV     ARRAY
             B::CV     CODE
             B::IO     IO
             B::GV     GLOB
             B::REGEXP REGEXP
         );
         *JSON::PP::reftype = sub {
             my $r = shift;
 
             return undef unless length(ref($r));
 
             my $t = ref(B::svref_2object($r));
 
             return
                 exists $tmap{$t} ? $tmap{$t}
               : length(ref($$r)) ? 'REF'
               :                    'SCALAR';
         };
         *JSON::PP::refaddr = sub {
           return undef unless length(ref($_[0]));
 
           my $addr;
           if(defined(my $pkg = blessed($_[0]))) {
             $addr .= bless $_[0], 'Scalar::Util::Fake';
             bless $_[0], $pkg;
           }
           else {
             $addr .= $_[0]
           }
 
           $addr =~ /0x(\w+)/;
           local $^W;
           #no warnings 'portable';
           hex($1);
         }
     }
 }
 
 
 # shamelessly copied and modified from JSON::XS code.
 
 $JSON::PP::true  = do { bless \(my $dummy = 1), "JSON::PP::Boolean" };
 $JSON::PP::false = do { bless \(my $dummy = 0), "JSON::PP::Boolean" };
 
 sub is_bool { defined $_[0] and UNIVERSAL::isa($_[0], "JSON::PP::Boolean"); }
 
 sub true  { $JSON::PP::true  }
 sub false { $JSON::PP::false }
 sub null  { undef; }
 
 ###############################
 
 package JSON::PP::Boolean;
 
 use overload (
    "0+"     => sub { ${$_[0]} },
    "++"     => sub { $_[0] = ${$_[0]} + 1 },
    "--"     => sub { $_[0] = ${$_[0]} - 1 },
    fallback => 1,
 );
 
 
 ###############################
 
 package JSON::PP::IncrParser;
 
 use strict;
 
 use constant INCR_M_WS   => 0; # initial whitespace skipping
 use constant INCR_M_STR  => 1; # inside string
 use constant INCR_M_BS   => 2; # inside backslash
 use constant INCR_M_JSON => 3; # outside anything, count nesting
 use constant INCR_M_C0   => 4;
 use constant INCR_M_C1   => 5;
 
 $JSON::PP::IncrParser::VERSION = '1.01';
 
 my $unpack_format = $] < 5.006 ? 'C*' : 'U*';
 
 sub new {
     my ( $class ) = @_;
 
     bless {
         incr_nest    => 0,
         incr_text    => undef,
         incr_parsing => 0,
         incr_p       => 0,
     }, $class;
 }
 
 
 sub incr_parse {
     my ( $self, $coder, $text ) = @_;
 
     $self->{incr_text} = '' unless ( defined $self->{incr_text} );
 
     if ( defined $text ) {
         if ( utf8::is_utf8( $text ) and !utf8::is_utf8( $self->{incr_text} ) ) {
             utf8::upgrade( $self->{incr_text} ) ;
             utf8::decode( $self->{incr_text} ) ;
         }
         $self->{incr_text} .= $text;
     }
 
 
     my $max_size = $coder->get_max_size;
 
     if ( defined wantarray ) {
 
         $self->{incr_mode} = INCR_M_WS unless defined $self->{incr_mode};
 
         if ( wantarray ) {
             my @ret;
 
             $self->{incr_parsing} = 1;
 
             do {
                 push @ret, $self->_incr_parse( $coder, $self->{incr_text} );
 
                 unless ( !$self->{incr_nest} and $self->{incr_mode} == INCR_M_JSON ) {
                     $self->{incr_mode} = INCR_M_WS if $self->{incr_mode} != INCR_M_STR;
                 }
 
             } until ( length $self->{incr_text} >= $self->{incr_p} );
 
             $self->{incr_parsing} = 0;
 
             return @ret;
         }
         else { # in scalar context
             $self->{incr_parsing} = 1;
             my $obj = $self->_incr_parse( $coder, $self->{incr_text} );
             $self->{incr_parsing} = 0 if defined $obj; # pointed by Martin J. Evans
             return $obj ? $obj : undef; # $obj is an empty string, parsing was completed.
         }
 
     }
 
 }
 
 
 sub _incr_parse {
     my ( $self, $coder, $text, $skip ) = @_;
     my $p = $self->{incr_p};
     my $restore = $p;
 
     my @obj;
     my $len = length $text;
 
     if ( $self->{incr_mode} == INCR_M_WS ) {
         while ( $len > $p ) {
             my $s = substr( $text, $p, 1 );
             $p++ and next if ( 0x20 >= unpack($unpack_format, $s) );
             $self->{incr_mode} = INCR_M_JSON;
             last;
        }
     }
 
     while ( $len > $p ) {
         my $s = substr( $text, $p++, 1 );
 
         if ( $s eq '"' ) {
             if (substr( $text, $p - 2, 1 ) eq '\\' ) {
                 next;
             }
 
             if ( $self->{incr_mode} != INCR_M_STR  ) {
                 $self->{incr_mode} = INCR_M_STR;
             }
             else {
                 $self->{incr_mode} = INCR_M_JSON;
                 unless ( $self->{incr_nest} ) {
                     last;
                 }
             }
         }
 
         if ( $self->{incr_mode} == INCR_M_JSON ) {
 
             if ( $s eq '[' or $s eq '{' ) {
                 if ( ++$self->{incr_nest} > $coder->get_max_depth ) {
                     Carp::croak('json text or perl structure exceeds maximum nesting level (max_depth set too low?)');
                 }
             }
             elsif ( $s eq ']' or $s eq '}' ) {
                 last if ( --$self->{incr_nest} <= 0 );
             }
             elsif ( $s eq '#' ) {
                 while ( $len > $p ) {
                     last if substr( $text, $p++, 1 ) eq "\n";
                 }
             }
 
         }
 
     }
 
     $self->{incr_p} = $p;
 
     return if ( $self->{incr_mode} == INCR_M_STR and not $self->{incr_nest} );
     return if ( $self->{incr_mode} == INCR_M_JSON and $self->{incr_nest} > 0 );
 
     return '' unless ( length substr( $self->{incr_text}, 0, $p ) );
 
     local $Carp::CarpLevel = 2;
 
     $self->{incr_p} = $restore;
     $self->{incr_c} = $p;
 
     my ( $obj, $tail ) = $coder->PP_decode_json( substr( $self->{incr_text}, 0, $p ), 0x10000001 );
 
     $self->{incr_text} = substr( $self->{incr_text}, $p );
     $self->{incr_p} = 0;
 
     return $obj || '';
 }
 
 
 sub incr_text {
     if ( $_[0]->{incr_parsing} ) {
         Carp::croak("incr_text cannot be called when the incremental parser already started parsing");
     }
     $_[0]->{incr_text};
 }
 
 
 sub incr_skip {
     my $self  = shift;
     $self->{incr_text} = substr( $self->{incr_text}, $self->{incr_c} );
     $self->{incr_p} = 0;
 }
 
 
 sub incr_reset {
     my $self = shift;
     $self->{incr_text}    = undef;
     $self->{incr_p}       = 0;
     $self->{incr_mode}    = 0;
     $self->{incr_nest}    = 0;
     $self->{incr_parsing} = 0;
 }
 
 ###############################
 
 
 1;
 __END__
 =pod
 
 =head1 NAME
 
 JSON::PP - JSON::XS compatible pure-Perl module.
 
 =head1 SYNOPSIS
 
  use JSON::PP;
 
  # exported functions, they croak on error
  # and expect/generate UTF-8
 
  $utf8_encoded_json_text = encode_json $perl_hash_or_arrayref;
  $perl_hash_or_arrayref  = decode_json $utf8_encoded_json_text;
 
  # OO-interface
 
  $coder = JSON::PP->new->ascii->pretty->allow_nonref;
  
  $json_text   = $json->encode( $perl_scalar );
  $perl_scalar = $json->decode( $json_text );
  
  $pretty_printed = $json->pretty->encode( $perl_scalar ); # pretty-printing
  
  # Note that JSON version 2.0 and above will automatically use
  # JSON::XS or JSON::PP, so you should be able to just:
  
  use JSON;
 
 
 =head1 VERSION
 
     2.27400
 
 L<JSON::XS> 2.27 (~2.30) compatible.
 
 =head1 NOTE
 
 JSON::PP had been included in JSON distribution (CPAN module).
 It was a perl core module in Perl 5.14.
 
 =head1 DESCRIPTION
 
 This module is L<JSON::XS> compatible pure Perl module.
 (Perl 5.8 or later is recommended)
 
 JSON::XS is the fastest and most proper JSON module on CPAN.
 It is written by Marc Lehmann in C, so must be compiled and
 installed in the used environment.
 
 JSON::PP is a pure-Perl module and has compatibility to JSON::XS.
 
 
 =head2 FEATURES
 
 =over
 
 =item * correct unicode handling
 
 This module knows how to handle Unicode (depending on Perl version).
 
 See to L<JSON::XS/A FEW NOTES ON UNICODE AND PERL> and L<UNICODE HANDLING ON PERLS>.
 
 
 =item * round-trip integrity
 
 When you serialise a perl data structure using only data types supported
 by JSON and Perl, the deserialised data structure is identical on the Perl
 level. (e.g. the string "2.0" doesn't suddenly become "2" just because
 it looks like a number). There I<are> minor exceptions to this, read the
 MAPPING section below to learn about those.
 
 
 =item * strict checking of JSON correctness
 
 There is no guessing, no generating of illegal JSON texts by default,
 and only JSON is accepted as input by default (the latter is a security feature).
 But when some options are set, loose checking features are available.
 
 =back
 
 =head1 FUNCTIONAL INTERFACE
 
 Some documents are copied and modified from L<JSON::XS/FUNCTIONAL INTERFACE>.
 
 =head2 encode_json
 
     $json_text = encode_json $perl_scalar
 
 Converts the given Perl data structure to a UTF-8 encoded, binary string.
 
 This function call is functionally identical to:
 
     $json_text = JSON::PP->new->utf8->encode($perl_scalar)
 
 =head2 decode_json
 
     $perl_scalar = decode_json $json_text
 
 The opposite of C<encode_json>: expects an UTF-8 (binary) string and tries
 to parse that as an UTF-8 encoded JSON text, returning the resulting
 reference.
 
 This function call is functionally identical to:
 
     $perl_scalar = JSON::PP->new->utf8->decode($json_text)
 
 =head2 JSON::PP::is_bool
 
     $is_boolean = JSON::PP::is_bool($scalar)
 
 Returns true if the passed scalar represents either JSON::PP::true or
 JSON::PP::false, two constants that act like C<1> and C<0> respectively
 and are also used to represent JSON C<true> and C<false> in Perl strings.
 
 =head2 JSON::PP::true
 
 Returns JSON true value which is blessed object.
 It C<isa> JSON::PP::Boolean object.
 
 =head2 JSON::PP::false
 
 Returns JSON false value which is blessed object.
 It C<isa> JSON::PP::Boolean object.
 
 =head2 JSON::PP::null
 
 Returns C<undef>.
 
 See L<MAPPING>, below, for more information on how JSON values are mapped to
 Perl.
 
 
 =head1 HOW DO I DECODE A DATA FROM OUTER AND ENCODE TO OUTER
 
 This section supposes that your perl version is 5.8 or later.
 
 If you know a JSON text from an outer world - a network, a file content, and so on,
 is encoded in UTF-8, you should use C<decode_json> or C<JSON> module object
 with C<utf8> enabled. And the decoded result will contain UNICODE characters.
 
   # from network
   my $json        = JSON::PP->new->utf8;
   my $json_text   = CGI->new->param( 'json_data' );
   my $perl_scalar = $json->decode( $json_text );
   
   # from file content
   local $/;
   open( my $fh, '<', 'json.data' );
   $json_text   = <$fh>;
   $perl_scalar = decode_json( $json_text );
 
 If an outer data is not encoded in UTF-8, firstly you should C<decode> it.
 
   use Encode;
   local $/;
   open( my $fh, '<', 'json.data' );
   my $encoding = 'cp932';
   my $unicode_json_text = decode( $encoding, <$fh> ); # UNICODE
   
   # or you can write the below code.
   #
   # open( my $fh, "<:encoding($encoding)", 'json.data' );
   # $unicode_json_text = <$fh>;
 
 In this case, C<$unicode_json_text> is of course UNICODE string.
 So you B<cannot> use C<decode_json> nor C<JSON> module object with C<utf8> enabled.
 Instead of them, you use C<JSON> module object with C<utf8> disable.
 
   $perl_scalar = $json->utf8(0)->decode( $unicode_json_text );
 
 Or C<encode 'utf8'> and C<decode_json>:
 
   $perl_scalar = decode_json( encode( 'utf8', $unicode_json_text ) );
   # this way is not efficient.
 
 And now, you want to convert your C<$perl_scalar> into JSON data and
 send it to an outer world - a network or a file content, and so on.
 
 Your data usually contains UNICODE strings and you want the converted data to be encoded
 in UTF-8, you should use C<encode_json> or C<JSON> module object with C<utf8> enabled.
 
   print encode_json( $perl_scalar ); # to a network? file? or display?
   # or
   print $json->utf8->encode( $perl_scalar );
 
 If C<$perl_scalar> does not contain UNICODE but C<$encoding>-encoded strings
 for some reason, then its characters are regarded as B<latin1> for perl
 (because it does not concern with your $encoding).
 You B<cannot> use C<encode_json> nor C<JSON> module object with C<utf8> enabled.
 Instead of them, you use C<JSON> module object with C<utf8> disable.
 Note that the resulted text is a UNICODE string but no problem to print it.
 
   # $perl_scalar contains $encoding encoded string values
   $unicode_json_text = $json->utf8(0)->encode( $perl_scalar );
   # $unicode_json_text consists of characters less than 0x100
   print $unicode_json_text;
 
 Or C<decode $encoding> all string values and C<encode_json>:
 
   $perl_scalar->{ foo } = decode( $encoding, $perl_scalar->{ foo } );
   # ... do it to each string values, then encode_json
   $json_text = encode_json( $perl_scalar );
 
 This method is a proper way but probably not efficient.
 
 See to L<Encode>, L<perluniintro>.
 
 
 =head1 METHODS
 
 Basically, check to L<JSON> or L<JSON::XS>.
 
 =head2 new
 
     $json = JSON::PP->new
 
 Returns a new JSON::PP object that can be used to de/encode JSON
 strings.
 
 All boolean flags described below are by default I<disabled>.
 
 The mutators for flags all return the JSON object again and thus calls can
 be chained:
 
    my $json = JSON::PP->new->utf8->space_after->encode({a => [1,2]})
    => {"a": [1, 2]}
 
 =head2 ascii
 
     $json = $json->ascii([$enable])
     
     $enabled = $json->get_ascii
 
 If $enable is true (or missing), then the encode method will not generate characters outside
 the code range 0..127. Any Unicode characters outside that range will be escaped using either
 a single \uXXXX or a double \uHHHH\uLLLLL escape sequence, as per RFC4627.
 (See to L<JSON::XS/OBJECT-ORIENTED INTERFACE>).
 
 In Perl 5.005, there is no character having high value (more than 255).
 See to L<UNICODE HANDLING ON PERLS>.
 
 If $enable is false, then the encode method will not escape Unicode characters unless
 required by the JSON syntax or other flags. This results in a faster and more compact format.
 
   JSON::PP->new->ascii(1)->encode([chr 0x10401])
   => ["\ud801\udc01"]
 
 =head2 latin1
 
     $json = $json->latin1([$enable])
     
     $enabled = $json->get_latin1
 
 If $enable is true (or missing), then the encode method will encode the resulting JSON
 text as latin1 (or iso-8859-1), escaping any characters outside the code range 0..255.
 
 If $enable is false, then the encode method will not escape Unicode characters
 unless required by the JSON syntax or other flags.
 
   JSON::XS->new->latin1->encode (["\x{89}\x{abc}"]
   => ["\x{89}\\u0abc"]    # (perl syntax, U+abc escaped, U+89 not)
 
 See to L<UNICODE HANDLING ON PERLS>.
 
 =head2 utf8
 
     $json = $json->utf8([$enable])
     
     $enabled = $json->get_utf8
 
 If $enable is true (or missing), then the encode method will encode the JSON result
 into UTF-8, as required by many protocols, while the decode method expects to be handled
 an UTF-8-encoded string. Please note that UTF-8-encoded strings do not contain any
 characters outside the range 0..255, they are thus useful for bytewise/binary I/O.
 
 (In Perl 5.005, any character outside the range 0..255 does not exist.
 See to L<UNICODE HANDLING ON PERLS>.)
 
 In future versions, enabling this option might enable autodetection of the UTF-16 and UTF-32
 encoding families, as described in RFC4627.
 
 If $enable is false, then the encode method will return the JSON string as a (non-encoded)
 Unicode string, while decode expects thus a Unicode string. Any decoding or encoding
 (e.g. to UTF-8 or UTF-16) needs to be done yourself, e.g. using the Encode module.
 
 Example, output UTF-16BE-encoded JSON:
 
   use Encode;
   $jsontext = encode "UTF-16BE", JSON::PP->new->encode ($object);
 
 Example, decode UTF-32LE-encoded JSON:
 
   use Encode;
   $object = JSON::PP->new->decode (decode "UTF-32LE", $jsontext);
 
 
 =head2 pretty
 
     $json = $json->pretty([$enable])
 
 This enables (or disables) all of the C<indent>, C<space_before> and
 C<space_after> flags in one call to generate the most readable
 (or most compact) form possible.
 
 Equivalent to:
 
    $json->indent->space_before->space_after
 
 =head2 indent
 
     $json = $json->indent([$enable])
     
     $enabled = $json->get_indent
 
 The default indent space length is three.
 You can use C<indent_length> to change the length.
 
 =head2 space_before
 
     $json = $json->space_before([$enable])
     
     $enabled = $json->get_space_before
 
 If C<$enable> is true (or missing), then the C<encode> method will add an extra
 optional space before the C<:> separating keys from values in JSON objects.
 
 If C<$enable> is false, then the C<encode> method will not add any extra
 space at those places.
 
 This setting has no effect when decoding JSON texts.
 
 Example, space_before enabled, space_after and indent disabled:
 
    {"key" :"value"}
 
 =head2 space_after
 
     $json = $json->space_after([$enable])
     
     $enabled = $json->get_space_after
 
 If C<$enable> is true (or missing), then the C<encode> method will add an extra
 optional space after the C<:> separating keys from values in JSON objects
 and extra whitespace after the C<,> separating key-value pairs and array
 members.
 
 If C<$enable> is false, then the C<encode> method will not add any extra
 space at those places.
 
 This setting has no effect when decoding JSON texts.
 
 Example, space_before and indent disabled, space_after enabled:
 
    {"key": "value"}
 
 =head2 relaxed
 
     $json = $json->relaxed([$enable])
     
     $enabled = $json->get_relaxed
 
 If C<$enable> is true (or missing), then C<decode> will accept some
 extensions to normal JSON syntax (see below). C<encode> will not be
 affected in anyway. I<Be aware that this option makes you accept invalid
 JSON texts as if they were valid!>. I suggest only to use this option to
 parse application-specific files written by humans (configuration files,
 resource files etc.)
 
 If C<$enable> is false (the default), then C<decode> will only accept
 valid JSON texts.
 
 Currently accepted extensions are:
 
 =over 4
 
 =item * list items can have an end-comma
 
 JSON I<separates> array elements and key-value pairs with commas. This
 can be annoying if you write JSON texts manually and want to be able to
 quickly append elements, so this extension accepts comma at the end of
 such items not just between them:
 
    [
       1,
       2, <- this comma not normally allowed
    ]
    {
       "k1": "v1",
       "k2": "v2", <- this comma not normally allowed
    }
 
 =item * shell-style '#'-comments
 
 Whenever JSON allows whitespace, shell-style comments are additionally
 allowed. They are terminated by the first carriage-return or line-feed
 character, after which more white-space and comments are allowed.
 
   [
      1, # this comment not allowed in JSON
         # neither this one...
   ]
 
 =back
 
 =head2 canonical
 
     $json = $json->canonical([$enable])
     
     $enabled = $json->get_canonical
 
 If C<$enable> is true (or missing), then the C<encode> method will output JSON objects
 by sorting their keys. This is adding a comparatively high overhead.
 
 If C<$enable> is false, then the C<encode> method will output key-value
 pairs in the order Perl stores them (which will likely change between runs
 of the same script).
 
 This option is useful if you want the same data structure to be encoded as
 the same JSON text (given the same overall settings). If it is disabled,
 the same hash might be encoded differently even if contains the same data,
 as key-value pairs have no inherent ordering in Perl.
 
 This setting has no effect when decoding JSON texts.
 
 If you want your own sorting routine, you can give a code reference
 or a subroutine name to C<sort_by>. See to C<JSON::PP OWN METHODS>.
 
 =head2 allow_nonref
 
     $json = $json->allow_nonref([$enable])
     
     $enabled = $json->get_allow_nonref
 
 If C<$enable> is true (or missing), then the C<encode> method can convert a
 non-reference into its corresponding string, number or null JSON value,
 which is an extension to RFC4627. Likewise, C<decode> will accept those JSON
 values instead of croaking.
 
 If C<$enable> is false, then the C<encode> method will croak if it isn't
 passed an arrayref or hashref, as JSON texts must either be an object
 or array. Likewise, C<decode> will croak if given something that is not a
 JSON object or array.
 
    JSON::PP->new->allow_nonref->encode ("Hello, World!")
    => "Hello, World!"
 
 =head2 allow_unknown
 
     $json = $json->allow_unknown ([$enable])
     
     $enabled = $json->get_allow_unknown
 
 If $enable is true (or missing), then "encode" will *not* throw an
 exception when it encounters values it cannot represent in JSON (for
 example, filehandles) but instead will encode a JSON "null" value.
 Note that blessed objects are not included here and are handled
 separately by c<allow_nonref>.
 
 If $enable is false (the default), then "encode" will throw an
 exception when it encounters anything it cannot encode as JSON.
 
 This option does not affect "decode" in any way, and it is
 recommended to leave it off unless you know your communications
 partner.
 
 =head2 allow_blessed
 
     $json = $json->allow_blessed([$enable])
     
     $enabled = $json->get_allow_blessed
 
 If C<$enable> is true (or missing), then the C<encode> method will not
 barf when it encounters a blessed reference. Instead, the value of the
 B<convert_blessed> option will decide whether C<null> (C<convert_blessed>
 disabled or no C<TO_JSON> method found) or a representation of the
 object (C<convert_blessed> enabled and C<TO_JSON> method found) is being
 encoded. Has no effect on C<decode>.
 
 If C<$enable> is false (the default), then C<encode> will throw an
 exception when it encounters a blessed object.
 
 =head2 convert_blessed
 
     $json = $json->convert_blessed([$enable])
     
     $enabled = $json->get_convert_blessed
 
 If C<$enable> is true (or missing), then C<encode>, upon encountering a
 blessed object, will check for the availability of the C<TO_JSON> method
 on the object's class. If found, it will be called in scalar context
 and the resulting scalar will be encoded instead of the object. If no
 C<TO_JSON> method is found, the value of C<allow_blessed> will decide what
 to do.
 
 The C<TO_JSON> method may safely call die if it wants. If C<TO_JSON>
 returns other blessed objects, those will be handled in the same
 way. C<TO_JSON> must take care of not causing an endless recursion cycle
 (== crash) in this case. The name of C<TO_JSON> was chosen because other
 methods called by the Perl core (== not by the user of the object) are
 usually in upper case letters and to avoid collisions with the C<to_json>
 function or method.
 
 This setting does not yet influence C<decode> in any way.
 
 If C<$enable> is false, then the C<allow_blessed> setting will decide what
 to do when a blessed object is found.
 
 =head2 filter_json_object
 
     $json = $json->filter_json_object([$coderef])
 
 When C<$coderef> is specified, it will be called from C<decode> each
 time it decodes a JSON object. The only argument passed to the coderef
 is a reference to the newly-created hash. If the code references returns
 a single scalar (which need not be a reference), this value
 (i.e. a copy of that scalar to avoid aliasing) is inserted into the
 deserialised data structure. If it returns an empty list
 (NOTE: I<not> C<undef>, which is a valid scalar), the original deserialised
 hash will be inserted. This setting can slow down decoding considerably.
 
 When C<$coderef> is omitted or undefined, any existing callback will
 be removed and C<decode> will not change the deserialised hash in any
 way.
 
 Example, convert all JSON objects into the integer 5:
 
    my $js = JSON::PP->new->filter_json_object (sub { 5 });
    # returns [5]
    $js->decode ('[{}]'); # the given subroutine takes a hash reference.
    # throw an exception because allow_nonref is not enabled
    # so a lone 5 is not allowed.
    $js->decode ('{"a":1, "b":2}');
 
 =head2 filter_json_single_key_object
 
     $json = $json->filter_json_single_key_object($key [=> $coderef])
 
 Works remotely similar to C<filter_json_object>, but is only called for
 JSON objects having a single key named C<$key>.
 
 This C<$coderef> is called before the one specified via
 C<filter_json_object>, if any. It gets passed the single value in the JSON
 object. If it returns a single value, it will be inserted into the data
 structure. If it returns nothing (not even C<undef> but the empty list),
 the callback from C<filter_json_object> will be called next, as if no
 single-key callback were specified.
 
 If C<$coderef> is omitted or undefined, the corresponding callback will be
 disabled. There can only ever be one callback for a given key.
 
 As this callback gets called less often then the C<filter_json_object>
 one, decoding speed will not usually suffer as much. Therefore, single-key
 objects make excellent targets to serialise Perl objects into, especially
 as single-key JSON objects are as close to the type-tagged value concept
 as JSON gets (it's basically an ID/VALUE tuple). Of course, JSON does not
 support this in any way, so you need to make sure your data never looks
 like a serialised Perl hash.
 
 Typical names for the single object key are C<__class_whatever__>, or
 C<$__dollars_are_rarely_used__$> or C<}ugly_brace_placement>, or even
 things like C<__class_md5sum(classname)__>, to reduce the risk of clashing
 with real hashes.
 
 Example, decode JSON objects of the form C<< { "__widget__" => <id> } >>
 into the corresponding C<< $WIDGET{<id>} >> object:
 
    # return whatever is in $WIDGET{5}:
    JSON::PP
       ->new
       ->filter_json_single_key_object (__widget__ => sub {
             $WIDGET{ $_[0] }
          })
       ->decode ('{"__widget__": 5')
 
    # this can be used with a TO_JSON method in some "widget" class
    # for serialisation to json:
    sub WidgetBase::TO_JSON {
       my ($self) = @_;
 
       unless ($self->{id}) {
          $self->{id} = ..get..some..id..;
          $WIDGET{$self->{id}} = $self;
       }
 
       { __widget__ => $self->{id} }
    }
 
 =head2 shrink
 
     $json = $json->shrink([$enable])
     
     $enabled = $json->get_shrink
 
 In JSON::XS, this flag resizes strings generated by either
 C<encode> or C<decode> to their minimum size possible.
 It will also try to downgrade any strings to octet-form if possible.
 
 In JSON::PP, it is noop about resizing strings but tries
 C<utf8::downgrade> to the returned string by C<encode>.
 See to L<utf8>.
 
 See to L<JSON::XS/OBJECT-ORIENTED INTERFACE>
 
 =head2 max_depth
 
     $json = $json->max_depth([$maximum_nesting_depth])
     
     $max_depth = $json->get_max_depth
 
 Sets the maximum nesting level (default C<512>) accepted while encoding
 or decoding. If a higher nesting level is detected in JSON text or a Perl
 data structure, then the encoder and decoder will stop and croak at that
 point.
 
 Nesting level is defined by number of hash- or arrayrefs that the encoder
 needs to traverse to reach a given point or the number of C<{> or C<[>
 characters without their matching closing parenthesis crossed to reach a
 given character in a string.
 
 If no argument is given, the highest possible setting will be used, which
 is rarely useful.
 
 See L<JSON::XS/SECURITY CONSIDERATIONS> for more info on why this is useful.
 
 When a large value (100 or more) was set and it de/encodes a deep nested object/text,
 it may raise a warning 'Deep recursion on subroutine' at the perl runtime phase.
 
 =head2 max_size
 
     $json = $json->max_size([$maximum_string_size])
     
     $max_size = $json->get_max_size
 
 Set the maximum length a JSON text may have (in bytes) where decoding is
 being attempted. The default is C<0>, meaning no limit. When C<decode>
 is called on a string that is longer then this many bytes, it will not
 attempt to decode the string but throw an exception. This setting has no
 effect on C<encode> (yet).
 
 If no argument is given, the limit check will be deactivated (same as when
 C<0> is specified).
 
 See L<JSON::XS/SECURITY CONSIDERATIONS> for more info on why this is useful.
 
 =head2 encode
 
     $json_text = $json->encode($perl_scalar)
 
 Converts the given Perl data structure (a simple scalar or a reference
 to a hash or array) to its JSON representation. Simple scalars will be
 converted into JSON string or number sequences, while references to arrays
 become JSON arrays and references to hashes become JSON objects. Undefined
 Perl values (e.g. C<undef>) become JSON C<null> values.
 References to the integers C<0> and C<1> are converted into C<true> and C<false>.
 
 =head2 decode
 
     $perl_scalar = $json->decode($json_text)
 
 The opposite of C<encode>: expects a JSON text and tries to parse it,
 returning the resulting simple scalar or reference. Croaks on error.
 
 JSON numbers and strings become simple Perl scalars. JSON arrays become
 Perl arrayrefs and JSON objects become Perl hashrefs. C<true> becomes
 C<1> (C<JSON::true>), C<false> becomes C<0> (C<JSON::false>) and
 C<null> becomes C<undef>.
 
 =head2 decode_prefix
 
     ($perl_scalar, $characters) = $json->decode_prefix($json_text)
 
 This works like the C<decode> method, but instead of raising an exception
 when there is trailing garbage after the first JSON object, it will
 silently stop parsing there and return the number of characters consumed
 so far.
 
    JSON->new->decode_prefix ("[1] the tail")
    => ([], 3)
 
 =head1 INCREMENTAL PARSING
 
 Most of this section are copied and modified from L<JSON::XS/INCREMENTAL PARSING>.
 
 In some cases, there is the need for incremental parsing of JSON texts.
 This module does allow you to parse a JSON stream incrementally.
 It does so by accumulating text until it has a full JSON object, which
 it then can decode. This process is similar to using C<decode_prefix>
 to see if a full JSON object is available, but is much more efficient
 (and can be implemented with a minimum of method calls).
 
 This module will only attempt to parse the JSON text once it is sure it
 has enough text to get a decisive result, using a very simple but
 truly incremental parser. This means that it sometimes won't stop as
 early as the full parser, for example, it doesn't detect parentheses
 mismatches. The only thing it guarantees is that it starts decoding as
 soon as a syntactically valid JSON text has been seen. This means you need
 to set resource limits (e.g. C<max_size>) to ensure the parser will stop
 parsing in the presence if syntax errors.
 
 The following methods implement this incremental parser.
 
 =head2 incr_parse
 
     $json->incr_parse( [$string] ) # void context
     
     $obj_or_undef = $json->incr_parse( [$string] ) # scalar context
     
     @obj_or_empty = $json->incr_parse( [$string] ) # list context
 
 This is the central parsing function. It can both append new text and
 extract objects from the stream accumulated so far (both of these
 functions are optional).
 
 If C<$string> is given, then this string is appended to the already
 existing JSON fragment stored in the C<$json> object.
 
 After that, if the function is called in void context, it will simply
 return without doing anything further. This can be used to add more text
 in as many chunks as you want.
 
 If the method is called in scalar context, then it will try to extract
 exactly I<one> JSON object. If that is successful, it will return this
 object, otherwise it will return C<undef>. If there is a parse error,
 this method will croak just as C<decode> would do (one can then use
 C<incr_skip> to skip the erroneous part). This is the most common way of
 using the method.
 
 And finally, in list context, it will try to extract as many objects
 from the stream as it can find and return them, or the empty list
 otherwise. For this to work, there must be no separators between the JSON
 objects or arrays, instead they must be concatenated back-to-back. If
 an error occurs, an exception will be raised as in the scalar context
 case. Note that in this case, any previously-parsed JSON texts will be
 lost.
 
 Example: Parse some JSON arrays/objects in a given string and return them.
 
     my @objs = JSON->new->incr_parse ("[5][7][1,2]");
 
 =head2 incr_text
 
     $lvalue_string = $json->incr_text
 
 This method returns the currently stored JSON fragment as an lvalue, that
 is, you can manipulate it. This I<only> works when a preceding call to
 C<incr_parse> in I<scalar context> successfully returned an object. Under
 all other circumstances you must not call this function (I mean it.
 although in simple tests it might actually work, it I<will> fail under
 real world conditions). As a special exception, you can also call this
 method before having parsed anything.
 
 This function is useful in two cases: a) finding the trailing text after a
 JSON object or b) parsing multiple JSON objects separated by non-JSON text
 (such as commas).
 
     $json->incr_text =~ s/\s*,\s*//;
 
 In Perl 5.005, C<lvalue> attribute is not available.
 You must write codes like the below:
 
     $string = $json->incr_text;
     $string =~ s/\s*,\s*//;
     $json->incr_text( $string );
 
 =head2 incr_skip
 
     $json->incr_skip
 
 This will reset the state of the incremental parser and will remove the
 parsed text from the input buffer. This is useful after C<incr_parse>
 died, in which case the input buffer and incremental parser state is left
 unchanged, to skip the text parsed so far and to reset the parse state.
 
 =head2 incr_reset
 
     $json->incr_reset
 
 This completely resets the incremental parser, that is, after this call,
 it will be as if the parser had never parsed anything.
 
 This is useful if you want to repeatedly parse JSON objects and want to
 ignore any trailing data, which means you have to reset the parser after
 each successful decode.
 
 See to L<JSON::XS/INCREMENTAL PARSING> for examples.
 
 
 =head1 JSON::PP OWN METHODS
 
 =head2 allow_singlequote
 
     $json = $json->allow_singlequote([$enable])
 
 If C<$enable> is true (or missing), then C<decode> will accept
 JSON strings quoted by single quotations that are invalid JSON
 format.
 
     $json->allow_singlequote->decode({"foo":'bar'});
     $json->allow_singlequote->decode({'foo':"bar"});
     $json->allow_singlequote->decode({'foo':'bar'});
 
 As same as the C<relaxed> option, this option may be used to parse
 application-specific files written by humans.
 
 
 =head2 allow_barekey
 
     $json = $json->allow_barekey([$enable])
 
 If C<$enable> is true (or missing), then C<decode> will accept
 bare keys of JSON object that are invalid JSON format.
 
 As same as the C<relaxed> option, this option may be used to parse
 application-specific files written by humans.
 
     $json->allow_barekey->decode('{foo:"bar"}');
 
 =head2 allow_bignum
 
     $json = $json->allow_bignum([$enable])
 
 If C<$enable> is true (or missing), then C<decode> will convert
 the big integer Perl cannot handle as integer into a L<Math::BigInt>
 object and convert a floating number (any) into a L<Math::BigFloat>.
 
 On the contrary, C<encode> converts C<Math::BigInt> objects and C<Math::BigFloat>
 objects into JSON numbers with C<allow_blessed> enabled.
 
    $json->allow_nonref->allow_blessed->allow_bignum;
    $bigfloat = $json->decode('2.000000000000000000000000001');
    print $json->encode($bigfloat);
    # => 2.000000000000000000000000001
 
 See to L<JSON::XS/MAPPING> about the normal conversion of JSON number.
 
 =head2 loose
 
     $json = $json->loose([$enable])
 
 The unescaped [\x00-\x1f\x22\x2f\x5c] strings are invalid in JSON strings
 and the module doesn't allow you to C<decode> to these (except for \x2f).
 If C<$enable> is true (or missing), then C<decode>  will accept these
 unescaped strings.
 
     $json->loose->decode(qq|["abc
                                    def"]|);
 
 See L<JSON::XS/SECURITY CONSIDERATIONS>.
 
 =head2 escape_slash
 
     $json = $json->escape_slash([$enable])
 
 According to JSON Grammar, I<slash> (U+002F) is escaped. But default
 JSON::PP (as same as JSON::XS) encodes strings without escaping slash.
 
 If C<$enable> is true (or missing), then C<encode> will escape slashes.
 
 =head2 indent_length
 
     $json = $json->indent_length($length)
 
 JSON::XS indent space length is 3 and cannot be changed.
 JSON::PP set the indent space length with the given $length.
 The default is 3. The acceptable range is 0 to 15.
 
 =head2 sort_by
 
     $json = $json->sort_by($function_name)
     $json = $json->sort_by($subroutine_ref)
 
 If $function_name or $subroutine_ref are set, its sort routine are used
 in encoding JSON objects.
 
    $js = $pc->sort_by(sub { $JSON::PP::a cmp $JSON::PP::b })->encode($obj);
    # is($js, q|{"a":1,"b":2,"c":3,"d":4,"e":5,"f":6,"g":7,"h":8,"i":9}|);
 
    $js = $pc->sort_by('own_sort')->encode($obj);
    # is($js, q|{"a":1,"b":2,"c":3,"d":4,"e":5,"f":6,"g":7,"h":8,"i":9}|);
 
    sub JSON::PP::own_sort { $JSON::PP::a cmp $JSON::PP::b }
 
 As the sorting routine runs in the JSON::PP scope, the given
 subroutine name and the special variables C<$a>, C<$b> will begin
 'JSON::PP::'.
 
 If $integer is set, then the effect is same as C<canonical> on.
 
 =head1 INTERNAL
 
 For developers.
 
 =over
 
 =item PP_encode_box
 
 Returns
 
         {
             depth        => $depth,
             indent_count => $indent_count,
         }
 
 
 =item PP_decode_box
 
 Returns
 
         {
             text    => $text,
             at      => $at,
             ch      => $ch,
             len     => $len,
             depth   => $depth,
             encoding      => $encoding,
             is_valid_utf8 => $is_valid_utf8,
         };
 
 =back
 
 =head1 MAPPING
 
 This section is copied from JSON::XS and modified to C<JSON::PP>.
 JSON::XS and JSON::PP mapping mechanisms are almost equivalent.
 
 See to L<JSON::XS/MAPPING>.
 
 =head2 JSON -> PERL
 
 =over 4
 
 =item object
 
 A JSON object becomes a reference to a hash in Perl. No ordering of object
 keys is preserved (JSON does not preserver object key ordering itself).
 
 =item array
 
 A JSON array becomes a reference to an array in Perl.
 
 =item string
 
 A JSON string becomes a string scalar in Perl - Unicode codepoints in JSON
 are represented by the same codepoints in the Perl string, so no manual
 decoding is necessary.
 
 =item number
 
 A JSON number becomes either an integer, numeric (floating point) or
 string scalar in perl, depending on its range and any fractional parts. On
 the Perl level, there is no difference between those as Perl handles all
 the conversion details, but an integer may take slightly less memory and
 might represent more values exactly than floating point numbers.
 
 If the number consists of digits only, C<JSON> will try to represent
 it as an integer value. If that fails, it will try to represent it as
 a numeric (floating point) value if that is possible without loss of
 precision. Otherwise it will preserve the number as a string value (in
 which case you lose roundtripping ability, as the JSON number will be
 re-encoded to a JSON string).
 
 Numbers containing a fractional or exponential part will always be
 represented as numeric (floating point) values, possibly at a loss of
 precision (in which case you might lose perfect roundtripping ability, but
 the JSON number will still be re-encoded as a JSON number).
 
 Note that precision is not accuracy - binary floating point values cannot
 represent most decimal fractions exactly, and when converting from and to
 floating point, C<JSON> only guarantees precision up to but not including
 the least significant bit.
 
 When C<allow_bignum> is enabled, the big integers 
 and the numeric can be optionally converted into L<Math::BigInt> and
 L<Math::BigFloat> objects.
 
 =item true, false
 
 These JSON atoms become C<JSON::PP::true> and C<JSON::PP::false>,
 respectively. They are overloaded to act almost exactly like the numbers
 C<1> and C<0>. You can check whether a scalar is a JSON boolean by using
 the C<JSON::is_bool> function.
 
    print JSON::PP::true . "\n";
     => true
    print JSON::PP::true + 1;
     => 1
 
    ok(JSON::true eq  '1');
    ok(JSON::true == 1);
 
 C<JSON> will install these missing overloading features to the backend modules.
 
 
 =item null
 
 A JSON null atom becomes C<undef> in Perl.
 
 C<JSON::PP::null> returns C<undef>.
 
 =back
 
 
 =head2 PERL -> JSON
 
 The mapping from Perl to JSON is slightly more difficult, as Perl is a
 truly typeless language, so we can only guess which JSON type is meant by
 a Perl value.
 
 =over 4
 
 =item hash references
 
 Perl hash references become JSON objects. As there is no inherent ordering
 in hash keys (or JSON objects), they will usually be encoded in a
 pseudo-random order that can change between runs of the same program but
 stays generally the same within a single run of a program. C<JSON>
 optionally sort the hash keys (determined by the I<canonical> flag), so
 the same datastructure will serialise to the same JSON text (given same
 settings and version of JSON::XS), but this incurs a runtime overhead
 and is only rarely useful, e.g. when you want to compare some JSON text
 against another for equality.
 
 
 =item array references
 
 Perl array references become JSON arrays.
 
 =item other references
 
 Other unblessed references are generally not allowed and will cause an
 exception to be thrown, except for references to the integers C<0> and
 C<1>, which get turned into C<false> and C<true> atoms in JSON. You can
 also use C<JSON::false> and C<JSON::true> to improve readability.
 
    to_json [\0,JSON::PP::true]      # yields [false,true]
 
 =item JSON::PP::true, JSON::PP::false, JSON::PP::null
 
 These special values become JSON true and JSON false values,
 respectively. You can also use C<\1> and C<\0> directly if you want.
 
 JSON::PP::null returns C<undef>.
 
 =item blessed objects
 
 Blessed objects are not directly representable in JSON. See the
 C<allow_blessed> and C<convert_blessed> methods on various options on
 how to deal with this: basically, you can choose between throwing an
 exception, encoding the reference as if it weren't blessed, or provide
 your own serialiser method.
 
 See to L<convert_blessed>.
 
 =item simple scalars
 
 Simple Perl scalars (any scalar that is not a reference) are the most
 difficult objects to encode: JSON::XS and JSON::PP will encode undefined scalars as
 JSON C<null> values, scalars that have last been used in a string context
 before encoding as JSON strings, and anything else as number value:
 
    # dump as number
    encode_json [2]                      # yields [2]
    encode_json [-3.0e17]                # yields [-3e+17]
    my $value = 5; encode_json [$value]  # yields [5]
 
    # used as string, so dump as string
    print $value;
    encode_json [$value]                 # yields ["5"]
 
    # undef becomes null
    encode_json [undef]                  # yields [null]
 
 You can force the type to be a string by stringifying it:
 
    my $x = 3.1; # some variable containing a number
    "$x";        # stringified
    $x .= "";    # another, more awkward way to stringify
    print $x;    # perl does it for you, too, quite often
 
 You can force the type to be a number by numifying it:
 
    my $x = "3"; # some variable containing a string
    $x += 0;     # numify it, ensuring it will be dumped as a number
    $x *= 1;     # same thing, the choice is yours.
 
 You cannot currently force the type in other, less obscure, ways.
 
 Note that numerical precision has the same meaning as under Perl (so
 binary to decimal conversion follows the same rules as in Perl, which
 can differ to other languages). Also, your perl interpreter might expose
 extensions to the floating point numbers of your platform, such as
 infinities or NaN's - these cannot be represented in JSON, and it is an
 error to pass those in.
 
 =item Big Number
 
 When C<allow_bignum> is enabled, 
 C<encode> converts C<Math::BigInt> objects and C<Math::BigFloat>
 objects into JSON numbers.
 
 
 =back
 
 =head1 UNICODE HANDLING ON PERLS
 
 If you do not know about Unicode on Perl well,
 please check L<JSON::XS/A FEW NOTES ON UNICODE AND PERL>.
 
 =head2 Perl 5.8 and later
 
 Perl can handle Unicode and the JSON::PP de/encode methods also work properly.
 
     $json->allow_nonref->encode(chr hex 3042);
     $json->allow_nonref->encode(chr hex 12345);
 
 Returns C<"\u3042"> and C<"\ud808\udf45"> respectively.
 
     $json->allow_nonref->decode('"\u3042"');
     $json->allow_nonref->decode('"\ud808\udf45"');
 
 Returns UTF-8 encoded strings with UTF8 flag, regarded as C<U+3042> and C<U+12345>.
 
 Note that the versions from Perl 5.8.0 to 5.8.2, Perl built-in C<join> was broken,
 so JSON::PP wraps the C<join> with a subroutine. Thus JSON::PP works slow in the versions.
 
 
 =head2 Perl 5.6
 
 Perl can handle Unicode and the JSON::PP de/encode methods also work.
 
 =head2 Perl 5.005
 
 Perl 5.005 is a byte semantics world -- all strings are sequences of bytes.
 That means the unicode handling is not available.
 
 In encoding,
 
     $json->allow_nonref->encode(chr hex 3042);  # hex 3042 is 12354.
     $json->allow_nonref->encode(chr hex 12345); # hex 12345 is 74565.
 
 Returns C<B> and C<E>, as C<chr> takes a value more than 255, it treats
 as C<$value % 256>, so the above codes are equivalent to :
 
     $json->allow_nonref->encode(chr 66);
     $json->allow_nonref->encode(chr 69);
 
 In decoding,
 
     $json->decode('"\u00e3\u0081\u0082"');
 
 The returned is a byte sequence C<0xE3 0x81 0x82> for UTF-8 encoded
 Japanese character (C<HIRAGANA LETTER A>).
 And if it is represented in Unicode code point, C<U+3042>.
 
 Next, 
 
     $json->decode('"\u3042"');
 
 We ordinary expect the returned value is a Unicode character C<U+3042>.
 But here is 5.005 world. This is C<0xE3 0x81 0x82>.
 
     $json->decode('"\ud808\udf45"');
 
 This is not a character C<U+12345> but bytes - C<0xf0 0x92 0x8d 0x85>.
 
 
 =head1 TODO
 
 =over
 
 =item speed
 
 =item memory saving
 
 =back
 
 
 =head1 SEE ALSO
 
 Most of the document are copied and modified from JSON::XS doc.
 
 L<JSON::XS>
 
 RFC4627 (L<http://www.ietf.org/rfc/rfc4627.txt>)
 
 =head1 AUTHOR
 
 Makamaka Hannyaharamitu, E<lt>makamaka[at]cpan.orgE<gt>
 
 
 =head1 COPYRIGHT AND LICENSE
 
 Copyright 2007-2016 by Makamaka Hannyaharamitu
 
 This library is free software; you can redistribute it and/or modify
 it under the same terms as Perl itself. 
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo.pm' => <<'END_OF_FILE',
 package Mo;
 $Mo::VERSION = '0.40';
 $VERSION='0.40';
 no warnings;my$M=__PACKAGE__.'::';*{$M.Object::new}=sub{my$c=shift;my$s=bless{@_},$c;my%n=%{$c.'::'.':E'};map{$s->{$_}=$n{$_}->()if!exists$s->{$_}}keys%n;$s};*{$M.import}=sub{import warnings;$^H|=1538;my($P,%e,%o)=caller.'::';shift;eval"no Mo::$_",&{$M.$_.::e}($P,\%e,\%o,\@_)for@_;return if$e{M};%e=(extends,sub{eval"no $_[0]()";@{$P.ISA}=$_[0]},has,sub{my$n=shift;my$m=sub{$#_?$_[0]{$n}=$_[1]:$_[0]{$n}};@_=(default,@_)if!($#_%2);$m=$o{$_}->($m,$n,@_)for sort keys%o;*{$P.$n}=$m},%e,);*{$P.$_}=$e{$_}for keys%e;@{$P.ISA}=$M.Object};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo/default.pm' => <<'END_OF_FILE',
 package Mo::default;
 $Mo::default::VERSION = '0.40';my$M="Mo::";
 $VERSION='0.40';
 *{$M.'default::e'}=sub{my($P,$e,$o)=@_;$o->{default}=sub{my($m,$n,%a)=@_;exists$a{default}or return$m;my($d,$r)=$a{default};my$g='HASH'eq($r=ref$d)?sub{+{%$d}}:'ARRAY'eq$r?sub{[@$d]}:'CODE'eq$r?$d:sub{$d};my$i=exists$a{lazy}?$a{lazy}:!${$P.':N'};$i or ${$P.':E'}{$n}=$g and return$m;sub{$#_?$m->(@_):!exists$_[0]{$n}?$_[0]{$n}=$g->(@_):$m->(@_)}}};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Mo/is.pm' => <<'END_OF_FILE',
 package Mo::is;
 $Mo::is::VERSION = '0.40';$M="Mo::";
 $VERSION='0.40';
 *{$M.'is::e'}=sub{my($P,$e,$o)=@_;$o->{is}=sub{my($m,$n,%a)=@_;$a{is}or return$m;sub{$#_&&$a{is}eq'ro'&&caller ne'Mo::coerce'?die$n.' is ro':$m->(@_)}}};

END_OF_FILE


# __MOBUNDLE_FILE__

      'Path/Tiny.pm' => <<'END_OF_FILE',
 use 5.008001;
 use strict;
 use warnings;
 
 package Path::Tiny;
 # ABSTRACT: File path utility
 
 our $VERSION = '0.098';
 
 # Dependencies
 use Config;
 use Exporter 5.57   (qw/import/);
 use File::Spec 0.86 ();          # shipped with 5.8.1
 use Carp ();
 
 our @EXPORT    = qw/path/;
 our @EXPORT_OK = qw/cwd rootdir tempfile tempdir/;
 
 use constant {
     PATH     => 0,
     CANON    => 1,
     VOL      => 2,
     DIR      => 3,
     FILE     => 4,
     TEMP     => 5,
     IS_BSD   => ( scalar $^O =~ /bsd$/ ),
     IS_WIN32 => ( $^O eq 'MSWin32' ),
 };
 
 use overload (
     q{""}    => sub    { $_[0]->[PATH] },
     bool     => sub () { 1 },
     fallback => 1,
 );
 
 # FREEZE/THAW per Sereal/CBOR/Types::Serialiser protocol
 sub FREEZE { return $_[0]->[PATH] }
 sub THAW   { return path( $_[2] ) }
 { no warnings 'once'; *TO_JSON = *FREEZE };
 
 my $HAS_UU; # has Unicode::UTF8; lazily populated
 
 sub _check_UU {
     !!eval { require Unicode::UTF8; Unicode::UTF8->VERSION(0.58); 1 };
 }
 
 my $HAS_PU; # has PerlIO::utf8_strict; lazily populated
 
 sub _check_PU {
     !!eval { require PerlIO::utf8_strict; PerlIO::utf8_strict->VERSION(0.003); 1 };
 }
 
 my $HAS_FLOCK = $Config{d_flock} || $Config{d_fcntl_can_lock} || $Config{d_lockf};
 
 # notions of "root" directories differ on Win32: \\server\dir\ or C:\ or \
 my $SLASH      = qr{[\\/]};
 my $NOTSLASH   = qr{[^\\/]};
 my $DRV_VOL    = qr{[a-z]:}i;
 my $UNC_VOL    = qr{$SLASH $SLASH $NOTSLASH+ $SLASH $NOTSLASH+}x;
 my $WIN32_ROOT = qr{(?: $UNC_VOL $SLASH | $DRV_VOL $SLASH | $SLASH )}x;
 
 sub _win32_vol {
     my ( $path, $drv ) = @_;
     require Cwd;
     my $dcwd = eval { Cwd::getdcwd($drv) }; # C: -> C:\some\cwd
     # getdcwd on non-existent drive returns empty string
     # so just use the original drive Z: -> Z:
     $dcwd = "$drv" unless defined $dcwd && length $dcwd;
     # normalize dwcd to end with a slash: might be C:\some\cwd or D:\ or Z:
     $dcwd =~ s{$SLASH?$}{/};
     # make the path absolute with dcwd
     $path =~ s{^$DRV_VOL}{$dcwd};
     return $path;
 }
 
 # This is a string test for before we have the object; see is_rootdir for well-formed
 # object test
 sub _is_root {
     return IS_WIN32() ? ( $_[0] =~ /^$WIN32_ROOT$/ ) : ( $_[0] eq '/' );
 }
 
 BEGIN {
     *_same = IS_WIN32() ? sub { lc( $_[0] ) eq lc( $_[1] ) } : sub { $_[0] eq $_[1] };
 }
 
 # mode bits encoded for chmod in symbolic mode
 my %MODEBITS = ( om => 0007, gm => 0070, um => 0700 ); ## no critic
 { my $m = 0; $MODEBITS{$_} = ( 1 << $m++ ) for qw/ox ow or gx gw gr ux uw ur/ };
 
 sub _symbolic_chmod {
     my ( $mode, $symbolic ) = @_;
     for my $clause ( split /,\s*/, $symbolic ) {
         if ( $clause =~ m{\A([augo]+)([=+-])([rwx]+)\z} ) {
             my ( $who, $action, $perms ) = ( $1, $2, $3 );
             $who =~ s/a/ugo/g;
             for my $w ( split //, $who ) {
                 my $p = 0;
                 $p |= $MODEBITS{"$w$_"} for split //, $perms;
                 if ( $action eq '=' ) {
                     $mode = ( $mode & ~$MODEBITS{"${w}m"} ) | $p;
                 }
                 else {
                     $mode = $action eq "+" ? ( $mode | $p ) : ( $mode & ~$p );
                 }
             }
         }
         else {
             Carp::croak("Invalid mode clause '$clause' for chmod()");
         }
     }
     return $mode;
 }
 
 # flock doesn't work on NFS on BSD.  Since program authors often can't control
 # or detect that, we warn once instead of being fatal if we can detect it and
 # people who need it strict can fatalize the 'flock' category
 
 #<<< No perltidy
 { package flock; use if Path::Tiny::IS_BSD(), 'warnings::register' }
 #>>>
 
 my $WARNED_BSD_NFS = 0;
 
 sub _throw {
     my ( $self, $function, $file, $msg ) = @_;
     if (   IS_BSD()
         && $function =~ /^flock/
         && $! =~ /operation not supported/i
         && !warnings::fatal_enabled('flock') )
     {
         if ( !$WARNED_BSD_NFS ) {
             warnings::warn( flock => "No flock for NFS on BSD: continuing in unsafe mode" );
             $WARNED_BSD_NFS++;
         }
     }
     else {
         $msg = $! unless defined $msg;
         Path::Tiny::Error->throw( $function, ( defined $file ? $file : $self->[PATH] ),
             $msg );
     }
     return;
 }
 
 # cheapo option validation
 sub _get_args {
     my ( $raw, @valid ) = @_;
     if ( defined($raw) && ref($raw) ne 'HASH' ) {
         my ( undef, undef, undef, $called_as ) = caller(1);
         $called_as =~ s{^.*::}{};
         Carp::croak("Options for $called_as must be a hash reference");
     }
     my $cooked = {};
     for my $k (@valid) {
         $cooked->{$k} = delete $raw->{$k} if exists $raw->{$k};
     }
     if ( keys %$raw ) {
         my ( undef, undef, undef, $called_as ) = caller(1);
         $called_as =~ s{^.*::}{};
         Carp::croak( "Invalid option(s) for $called_as: " . join( ", ", keys %$raw ) );
     }
     return $cooked;
 }
 
 #--------------------------------------------------------------------------#
 # Constructors
 #--------------------------------------------------------------------------#
 
 #pod =construct path
 #pod
 #pod     $path = path("foo/bar");
 #pod     $path = path("/tmp", "file.txt"); # list
 #pod     $path = path(".");                # cwd
 #pod     $path = path("~user/file.txt");   # tilde processing
 #pod
 #pod Constructs a C<Path::Tiny> object.  It doesn't matter if you give a file or
 #pod directory path.  It's still up to you to call directory-like methods only on
 #pod directories and file-like methods only on files.  This function is exported
 #pod automatically by default.
 #pod
 #pod The first argument must be defined and have non-zero length or an exception
 #pod will be thrown.  This prevents subtle, dangerous errors with code like
 #pod C<< path( maybe_undef() )->remove_tree >>.
 #pod
 #pod If the first component of the path is a tilde ('~') then the component will be
 #pod replaced with the output of C<glob('~')>.  If the first component of the path
 #pod is a tilde followed by a user name then the component will be replaced with
 #pod output of C<glob('~username')>.  Behaviour for non-existent users depends on
 #pod the output of C<glob> on the system.
 #pod
 #pod On Windows, if the path consists of a drive identifier without a path component
 #pod (C<C:> or C<D:>), it will be expanded to the absolute path of the current
 #pod directory on that volume using C<Cwd::getdcwd()>.
 #pod
 #pod If called with a single C<Path::Tiny> argument, the original is returned unless
 #pod the original is holding a temporary file or directory reference in which case a
 #pod stringified copy is made.
 #pod
 #pod     $path = path("foo/bar");
 #pod     $temp = Path::Tiny->tempfile;
 #pod
 #pod     $p2 = path($path); # like $p2 = $path
 #pod     $t2 = path($temp); # like $t2 = path( "$temp" )
 #pod
 #pod This optimizes copies without proliferating references unexpectedly if a copy is
 #pod made by code outside your control.
 #pod
 #pod Current API available since 0.017.
 #pod
 #pod =cut
 
 sub path {
     my $path = shift;
     Carp::croak("Path::Tiny paths require defined, positive-length parts")
       unless 1 + @_ == grep { defined && length } $path, @_;
 
     # non-temp Path::Tiny objects are effectively immutable and can be reused
     if ( !@_ && ref($path) eq __PACKAGE__ && !$path->[TEMP] ) {
         return $path;
     }
 
     # stringify objects
     $path = "$path";
 
     # expand relative volume paths on windows; put trailing slash on UNC root
     if ( IS_WIN32() ) {
         $path = _win32_vol( $path, $1 ) if $path =~ m{^($DRV_VOL)(?:$NOTSLASH|$)};
         $path .= "/" if $path =~ m{^$UNC_VOL$};
     }
 
     # concatenations stringifies objects, too
     if (@_) {
         $path .= ( _is_root($path) ? "" : "/" ) . join( "/", @_ );
     }
 
     # canonicalize, but with unix slashes and put back trailing volume slash
     my $cpath = $path = File::Spec->canonpath($path);
     $path =~ tr[\\][/] if IS_WIN32();
     $path = "/" if $path eq '/..'; # for old File::Spec
     $path .= "/" if IS_WIN32() && $path =~ m{^$UNC_VOL$};
 
     # root paths must always have a trailing slash, but other paths must not
     if ( _is_root($path) ) {
         $path =~ s{/?$}{/};
     }
     else {
         $path =~ s{/$}{};
     }
 
     # do any tilde expansions
     if ( $path =~ m{^(~[^/]*).*} ) {
         require File::Glob;
         my ($homedir) = File::Glob::bsd_glob($1);
         $homedir =~ tr[\\][/] if IS_WIN32();
         $path =~ s{^(~[^/]*)}{$homedir};
     }
 
     bless [ $path, $cpath ], __PACKAGE__;
 }
 
 #pod =construct new
 #pod
 #pod     $path = Path::Tiny->new("foo/bar");
 #pod
 #pod This is just like C<path>, but with method call overhead.  (Why would you
 #pod do that?)
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub new { shift; path(@_) }
 
 #pod =construct cwd
 #pod
 #pod     $path = Path::Tiny->cwd; # path( Cwd::getcwd )
 #pod     $path = cwd; # optional export
 #pod
 #pod Gives you the absolute path to the current directory as a C<Path::Tiny> object.
 #pod This is slightly faster than C<< path(".")->absolute >>.
 #pod
 #pod C<cwd> may be exported on request and used as a function instead of as a
 #pod method.
 #pod
 #pod Current API available since 0.018.
 #pod
 #pod =cut
 
 sub cwd {
     require Cwd;
     return path( Cwd::getcwd() );
 }
 
 #pod =construct rootdir
 #pod
 #pod     $path = Path::Tiny->rootdir; # /
 #pod     $path = rootdir;             # optional export 
 #pod
 #pod Gives you C<< File::Spec->rootdir >> as a C<Path::Tiny> object if you're too
 #pod picky for C<path("/")>.
 #pod
 #pod C<rootdir> may be exported on request and used as a function instead of as a
 #pod method.
 #pod
 #pod Current API available since 0.018.
 #pod
 #pod =cut
 
 sub rootdir { path( File::Spec->rootdir ) }
 
 #pod =construct tempfile, tempdir
 #pod
 #pod     $temp = Path::Tiny->tempfile( @options );
 #pod     $temp = Path::Tiny->tempdir( @options );
 #pod     $temp = tempfile( @options ); # optional export
 #pod     $temp = tempdir( @options );  # optional export
 #pod
 #pod C<tempfile> passes the options to C<< File::Temp->new >> and returns a C<Path::Tiny>
 #pod object with the file name.  The C<TMPDIR> option is enabled by default.
 #pod
 #pod The resulting C<File::Temp> object is cached. When the C<Path::Tiny> object is
 #pod destroyed, the C<File::Temp> object will be as well.
 #pod
 #pod C<File::Temp> annoyingly requires you to specify a custom template in slightly
 #pod different ways depending on which function or method you call, but
 #pod C<Path::Tiny> lets you ignore that and can take either a leading template or a
 #pod C<TEMPLATE> option and does the right thing.
 #pod
 #pod     $temp = Path::Tiny->tempfile( "customXXXXXXXX" );             # ok
 #pod     $temp = Path::Tiny->tempfile( TEMPLATE => "customXXXXXXXX" ); # ok
 #pod
 #pod The tempfile path object will be normalized to have an absolute path, even if
 #pod created in a relative directory using C<DIR>.  If you want it to have
 #pod the C<realpath> instead, pass a leading options hash like this:
 #pod
 #pod     $real_temp = tempfile({realpath => 1}, @options);
 #pod
 #pod C<tempdir> is just like C<tempfile>, except it calls
 #pod C<< File::Temp->newdir >> instead.
 #pod
 #pod Both C<tempfile> and C<tempdir> may be exported on request and used as
 #pod functions instead of as methods.
 #pod
 #pod B<Note>: for tempfiles, the filehandles from File::Temp are closed and not
 #pod reused.  This is not as secure as using File::Temp handles directly, but is
 #pod less prone to deadlocks or access problems on some platforms.  Think of what
 #pod C<Path::Tiny> gives you to be just a temporary file B<name> that gets cleaned
 #pod up.
 #pod
 #pod B<Note 2>: if you don't want these cleaned up automatically when the object
 #pod is destroyed, File::Temp requires different options for directories and
 #pod files.  Use C<< CLEANUP => 0 >> for directories and C<< UNLINK => 0 >> for
 #pod files.
 #pod
 #pod B<Note 3>: Don't lose the temporary object by chaining a method call instead
 #pod of storing it:
 #pod
 #pod     my $lost = tempdir()->child("foo"); # tempdir cleaned up right away
 #pod
 #pod Current API available since 0.097.
 #pod
 #pod =cut
 
 sub tempfile {
     shift if @_ && $_[0] eq 'Path::Tiny'; # called as method
     my $opts = ( @_ && ref $_[0] eq 'HASH' ) ? shift @_ : {};
     $opts = _get_args( $opts, qw/realpath/ );
 
     my ( $maybe_template, $args ) = _parse_file_temp_args(@_);
     # File::Temp->new demands TEMPLATE
     $args->{TEMPLATE} = $maybe_template->[0] if @$maybe_template;
 
     require File::Temp;
     my $temp = File::Temp->new( TMPDIR => 1, %$args );
     close $temp;
     my $self = $opts->{realpath} ? path($temp)->realpath : path($temp)->absolute;
     $self->[TEMP] = $temp;                # keep object alive while we are
     return $self;
 }
 
 sub tempdir {
     shift if @_ && $_[0] eq 'Path::Tiny'; # called as method
     my $opts = ( @_ && ref $_[0] eq 'HASH' ) ? shift @_ : {};
     $opts = _get_args( $opts, qw/realpath/ );
 
     my ( $maybe_template, $args ) = _parse_file_temp_args(@_);
 
     # File::Temp->newdir demands leading template
     require File::Temp;
     my $temp = File::Temp->newdir( @$maybe_template, TMPDIR => 1, %$args );
     my $self = $opts->{realpath} ? path($temp)->realpath : path($temp)->absolute;
     $self->[TEMP] = $temp;                # keep object alive while we are
     # Some ActiveState Perls for Windows break Cwd in ways that lead
     # File::Temp to get confused about what path to remove; this
     # monkey-patches the object with our own view of the absolute path
     $temp->{REALNAME} = $self->[CANON] if IS_WIN32;
     return $self;
 }
 
 # normalize the various ways File::Temp does templates
 sub _parse_file_temp_args {
     my $leading_template = ( scalar(@_) % 2 == 1 ? shift(@_) : '' );
     my %args = @_;
     %args = map { uc($_), $args{$_} } keys %args;
     my @template = (
           exists $args{TEMPLATE} ? delete $args{TEMPLATE}
         : $leading_template      ? $leading_template
         :                          ()
     );
     return ( \@template, \%args );
 }
 
 #--------------------------------------------------------------------------#
 # Private methods
 #--------------------------------------------------------------------------#
 
 sub _splitpath {
     my ($self) = @_;
     @{$self}[ VOL, DIR, FILE ] = File::Spec->splitpath( $self->[PATH] );
 }
 
 sub _resolve_symlinks {
     my ($self) = @_;
     my $new = $self;
     my ( $count, %seen ) = 0;
     while ( -l $new->[PATH] ) {
         if ( $seen{ $new->[PATH] }++ ) {
             $self->_throw( 'readlink', $self->[PATH], "symlink loop detected" );
         }
         if ( ++$count > 100 ) {
             $self->_throw( 'readlink', $self->[PATH], "maximum symlink depth exceeded" );
         }
         my $resolved = readlink $new->[PATH] or $new->_throw( 'readlink', $new->[PATH] );
         $resolved = path($resolved);
         $new = $resolved->is_absolute ? $resolved : $new->sibling($resolved);
     }
     return $new;
 }
 
 #--------------------------------------------------------------------------#
 # Public methods
 #--------------------------------------------------------------------------#
 
 #pod =method absolute
 #pod
 #pod     $abs = path("foo/bar")->absolute;
 #pod     $abs = path("foo/bar")->absolute("/tmp");
 #pod
 #pod Returns a new C<Path::Tiny> object with an absolute path (or itself if already
 #pod absolute).  Unless an argument is given, the current directory is used as the
 #pod absolute base path.  The argument must be absolute or you won't get an absolute
 #pod result.
 #pod
 #pod This will not resolve upward directories ("foo/../bar") unless C<canonpath>
 #pod in L<File::Spec> would normally do so on your platform.  If you need them
 #pod resolved, you must call the more expensive C<realpath> method instead.
 #pod
 #pod On Windows, an absolute path without a volume component will have it added
 #pod based on the current drive.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub absolute {
     my ( $self, $base ) = @_;
 
     # absolute paths handled differently by OS
     if (IS_WIN32) {
         return $self if length $self->volume;
         # add missing volume
         if ( $self->is_absolute ) {
             require Cwd;
             # use Win32::GetCwd not Cwd::getdcwd because we're sure
             # to have the former but not necessarily the latter
             my ($drv) = Win32::GetCwd() =~ /^($DRV_VOL | $UNC_VOL)/x;
             return path( $drv . $self->[PATH] );
         }
     }
     else {
         return $self if $self->is_absolute;
     }
 
     # relative path on any OS
     require Cwd;
     return path( ( defined($base) ? $base : Cwd::getcwd() ), $_[0]->[PATH] );
 }
 
 #pod =method append, append_raw, append_utf8
 #pod
 #pod     path("foo.txt")->append(@data);
 #pod     path("foo.txt")->append(\@data);
 #pod     path("foo.txt")->append({binmode => ":raw"}, @data);
 #pod     path("foo.txt")->append_raw(@data);
 #pod     path("foo.txt")->append_utf8(@data);
 #pod
 #pod Appends data to a file.  The file is locked with C<flock> prior to writing.  An
 #pod optional hash reference may be used to pass options.  Valid options are:
 #pod
 #pod =for :list
 #pod * C<binmode>: passed to C<binmode()> on the handle used for writing.
 #pod * C<truncate>: truncates the file after locking and before appending
 #pod
 #pod The C<truncate> option is a way to replace the contents of a file
 #pod B<in place>, unlike L</spew> which writes to a temporary file and then
 #pod replaces the original (if it exists).
 #pod
 #pod C<append_raw> is like C<append> with a C<binmode> of C<:unix> for fast,
 #pod unbuffered, raw write.
 #pod
 #pod C<append_utf8> is like C<append> with a C<binmode> of
 #pod C<:unix:encoding(UTF-8)> (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8>
 #pod 0.58+ is installed, a raw append will be done instead on the data encoded
 #pod with C<Unicode::UTF8>.
 #pod
 #pod Current API available since 0.060.
 #pod
 #pod =cut
 
 sub append {
     my ( $self, @data ) = @_;
     my $args = ( @data && ref $data[0] eq 'HASH' ) ? shift @data : {};
     $args = _get_args( $args, qw/binmode truncate/ );
     my $binmode = $args->{binmode};
     $binmode = ( ( caller(0) )[10] || {} )->{'open>'} unless defined $binmode;
     my $mode = $args->{truncate} ? ">" : ">>";
     my $fh = $self->filehandle( { locked => 1 }, $mode, $binmode );
     print {$fh} map { ref eq 'ARRAY' ? @$_ : $_ } @data;
     close $fh or $self->_throw('close');
 }
 
 sub append_raw {
     my ( $self, @data ) = @_;
     my $args = ( @data && ref $data[0] eq 'HASH' ) ? shift @data : {};
     $args = _get_args( $args, qw/binmode truncate/ );
     $args->{binmode} = ':unix';
     append( $self, $args, @data );
 }
 
 sub append_utf8 {
     my ( $self, @data ) = @_;
     my $args = ( @data && ref $data[0] eq 'HASH' ) ? shift @data : {};
     $args = _get_args( $args, qw/binmode truncate/ );
     if ( defined($HAS_UU) ? $HAS_UU : ( $HAS_UU = _check_UU() ) ) {
         $args->{binmode} = ":unix";
         append( $self, $args, map { Unicode::UTF8::encode_utf8($_) } @data );
     }
     elsif ( defined($HAS_PU) ? $HAS_PU : ( $HAS_PU = _check_PU() ) ) {
         $args->{binmode} = ":unix:utf8_strict";
         append( $self, $args, @data );
     }
     else {
         $args->{binmode} = ":unix:encoding(UTF-8)";
         append( $self, $args, @data );
     }
 }
 
 #pod =method assert
 #pod
 #pod     $path = path("foo.txt")->assert( sub { $_->exists } );
 #pod
 #pod Returns the invocant after asserting that a code reference argument returns
 #pod true.  When the assertion code reference runs, it will have the invocant
 #pod object in the C<$_> variable.  If it returns false, an exception will be
 #pod thrown.  The assertion code reference may also throw its own exception.
 #pod
 #pod If no assertion is provided, the invocant is returned without error.
 #pod
 #pod Current API available since 0.062.
 #pod
 #pod =cut
 
 sub assert {
     my ( $self, $assertion ) = @_;
     return $self unless $assertion;
     if ( ref $assertion eq 'CODE' ) {
         local $_ = $self;
         $assertion->()
           or Path::Tiny::Error->throw( "assert", $self->[PATH], "failed assertion" );
     }
     else {
         Carp::croak("argument to assert must be a code reference argument");
     }
     return $self;
 }
 
 #pod =method basename
 #pod
 #pod     $name = path("foo/bar.txt")->basename;        # bar.txt
 #pod     $name = path("foo.txt")->basename('.txt');    # foo
 #pod     $name = path("foo.txt")->basename(qr/.txt/);  # foo
 #pod     $name = path("foo.txt")->basename(@suffixes);
 #pod
 #pod Returns the file portion or last directory portion of a path.
 #pod
 #pod Given a list of suffixes as strings or regular expressions, any that match at
 #pod the end of the file portion or last directory portion will be removed before
 #pod the result is returned.
 #pod
 #pod Current API available since 0.054.
 #pod
 #pod =cut
 
 sub basename {
     my ( $self, @suffixes ) = @_;
     $self->_splitpath unless defined $self->[FILE];
     my $file = $self->[FILE];
     for my $s (@suffixes) {
         my $re = ref($s) eq 'Regexp' ? qr/$s$/ : qr/\Q$s\E$/;
         last if $file =~ s/$re//;
     }
     return $file;
 }
 
 #pod =method canonpath
 #pod
 #pod     $canonical = path("foo/bar")->canonpath; # foo\bar on Windows
 #pod
 #pod Returns a string with the canonical format of the path name for
 #pod the platform.  In particular, this means directory separators
 #pod will be C<\> on Windows.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub canonpath { $_[0]->[CANON] }
 
 #pod =method child
 #pod
 #pod     $file = path("/tmp")->child("foo.txt"); # "/tmp/foo.txt"
 #pod     $file = path("/tmp")->child(@parts);
 #pod
 #pod Returns a new C<Path::Tiny> object relative to the original.  Works
 #pod like C<catfile> or C<catdir> from File::Spec, but without caring about
 #pod file or directories.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub child {
     my ( $self, @parts ) = @_;
     return path( $self->[PATH], @parts );
 }
 
 #pod =method children
 #pod
 #pod     @paths = path("/tmp")->children;
 #pod     @paths = path("/tmp")->children( qr/\.txt$/ );
 #pod
 #pod Returns a list of C<Path::Tiny> objects for all files and directories
 #pod within a directory.  Excludes "." and ".." automatically.
 #pod
 #pod If an optional C<qr//> argument is provided, it only returns objects for child
 #pod names that match the given regular expression.  Only the base name is used
 #pod for matching:
 #pod
 #pod     @paths = path("/tmp")->children( qr/^foo/ );
 #pod     # matches children like the glob foo*
 #pod
 #pod Current API available since 0.028.
 #pod
 #pod =cut
 
 sub children {
     my ( $self, $filter ) = @_;
     my $dh;
     opendir $dh, $self->[PATH] or $self->_throw('opendir');
     my @children = readdir $dh;
     closedir $dh or $self->_throw('closedir');
 
     if ( not defined $filter ) {
         @children = grep { $_ ne '.' && $_ ne '..' } @children;
     }
     elsif ( $filter && ref($filter) eq 'Regexp' ) {
         @children = grep { $_ ne '.' && $_ ne '..' && $_ =~ $filter } @children;
     }
     else {
         Carp::croak("Invalid argument '$filter' for children()");
     }
 
     return map { path( $self->[PATH], $_ ) } @children;
 }
 
 #pod =method chmod
 #pod
 #pod     path("foo.txt")->chmod(0777);
 #pod     path("foo.txt")->chmod("0755");
 #pod     path("foo.txt")->chmod("go-w");
 #pod     path("foo.txt")->chmod("a=r,u+wx");
 #pod
 #pod Sets file or directory permissions.  The argument can be a numeric mode, a
 #pod octal string beginning with a "0" or a limited subset of the symbolic mode use
 #pod by F</bin/chmod>.
 #pod
 #pod The symbolic mode must be a comma-delimited list of mode clauses.  Clauses must
 #pod match C<< qr/\A([augo]+)([=+-])([rwx]+)\z/ >>, which defines "who", "op" and
 #pod "perms" parameters for each clause.  Unlike F</bin/chmod>, all three parameters
 #pod are required for each clause, multiple ops are not allowed and permissions
 #pod C<stugoX> are not supported.  (See L<File::chmod> for more complex needs.)
 #pod
 #pod Current API available since 0.053.
 #pod
 #pod =cut
 
 sub chmod {
     my ( $self, $new_mode ) = @_;
 
     my $mode;
     if ( $new_mode =~ /\d/ ) {
         $mode = ( $new_mode =~ /^0/ ? oct($new_mode) : $new_mode );
     }
     elsif ( $new_mode =~ /[=+-]/ ) {
         $mode = _symbolic_chmod( $self->stat->mode & 07777, $new_mode ); ## no critic
     }
     else {
         Carp::croak("Invalid mode argument '$new_mode' for chmod()");
     }
 
     CORE::chmod( $mode, $self->[PATH] ) or $self->_throw("chmod");
 
     return 1;
 }
 
 #pod =method copy
 #pod
 #pod     path("/tmp/foo.txt")->copy("/tmp/bar.txt");
 #pod
 #pod Copies the current path to the given destination using L<File::Copy>'s
 #pod C<copy> function. Upon success, returns the C<Path::Tiny> object for the
 #pod newly copied file.
 #pod
 #pod Current API available since 0.070.
 #pod
 #pod =cut
 
 # XXX do recursively for directories?
 sub copy {
     my ( $self, $dest ) = @_;
     require File::Copy;
     File::Copy::copy( $self->[PATH], $dest )
       or Carp::croak("copy failed for $self to $dest: $!");
 
     return -d $dest ? path( $dest, $self->basename ) : path($dest);
 }
 
 #pod =method digest
 #pod
 #pod     $obj = path("/tmp/foo.txt")->digest;        # SHA-256
 #pod     $obj = path("/tmp/foo.txt")->digest("MD5"); # user-selected
 #pod     $obj = path("/tmp/foo.txt")->digest( { chunk_size => 1e6 }, "MD5" );
 #pod
 #pod Returns a hexadecimal digest for a file.  An optional hash reference of options may
 #pod be given.  The only option is C<chunk_size>.  If C<chunk_size> is given, that many
 #pod bytes will be read at a time.  If not provided, the entire file will be slurped
 #pod into memory to compute the digest.
 #pod
 #pod Any subsequent arguments are passed to the constructor for L<Digest> to select
 #pod an algorithm.  If no arguments are given, the default is SHA-256.
 #pod
 #pod Current API available since 0.056.
 #pod
 #pod =cut
 
 sub digest {
     my ( $self, @opts ) = @_;
     my $args = ( @opts && ref $opts[0] eq 'HASH' ) ? shift @opts : {};
     $args = _get_args( $args, qw/chunk_size/ );
     unshift @opts, 'SHA-256' unless @opts;
     require Digest;
     my $digest = Digest->new(@opts);
     if ( $args->{chunk_size} ) {
         my $fh = $self->filehandle( { locked => 1 }, "<", ":unix" );
         my $buf;
         $digest->add($buf) while read $fh, $buf, $args->{chunk_size};
     }
     else {
         $digest->add( $self->slurp_raw );
     }
     return $digest->hexdigest;
 }
 
 #pod =method dirname (deprecated)
 #pod
 #pod     $name = path("/tmp/foo.txt")->dirname; # "/tmp/"
 #pod
 #pod Returns the directory portion you would get from calling
 #pod C<< File::Spec->splitpath( $path->stringify ) >> or C<"."> for a path without a
 #pod parent directory portion.  Because L<File::Spec> is inconsistent, the result
 #pod might or might not have a trailing slash.  Because of this, this method is
 #pod B<deprecated>.
 #pod
 #pod A better, more consistently approach is likely C<< $path->parent->stringify >>,
 #pod which will not have a trailing slash except for a root directory.
 #pod
 #pod Deprecated in 0.056.
 #pod
 #pod =cut
 
 sub dirname {
     my ($self) = @_;
     $self->_splitpath unless defined $self->[DIR];
     return length $self->[DIR] ? $self->[DIR] : ".";
 }
 
 #pod =method edit, edit_raw, edit_utf8
 #pod
 #pod     path("foo.txt")->edit( \&callback, $options );
 #pod     path("foo.txt")->edit_utf8( \&callback );
 #pod     path("foo.txt")->edit_raw( \&callback );
 #pod
 #pod These are convenience methods that allow "editing" a file using a single
 #pod callback argument. They slurp the file using C<slurp>, place the contents
 #pod inside a localized C<$_> variable, call the callback function (without
 #pod arguments), and then write C<$_> (presumably mutated) back to the
 #pod file with C<spew>.
 #pod
 #pod An optional hash reference may be used to pass options.  The only option is
 #pod C<binmode>, which is passed to C<slurp> and C<spew>.
 #pod
 #pod C<edit_utf8> and C<edit_raw> act like their respective C<slurp_*> and
 #pod C<spew_*> methods.
 #pod
 #pod Current API available since 0.077.
 #pod
 #pod =cut
 
 sub edit {
     my $self = shift;
     my $cb   = shift;
     my $args = _get_args( shift, qw/binmode/ );
     Carp::croak("Callback for edit() must be a code reference")
       unless defined($cb) && ref($cb) eq 'CODE';
 
     local $_ =
       $self->slurp( exists( $args->{binmode} ) ? { binmode => $args->{binmode} } : () );
     $cb->();
     $self->spew( $args, $_ );
 
     return;
 }
 
 # this is done long-hand to benefit from slurp_utf8 optimizations
 sub edit_utf8 {
     my ( $self, $cb ) = @_;
     Carp::croak("Callback for edit_utf8() must be a code reference")
       unless defined($cb) && ref($cb) eq 'CODE';
 
     local $_ = $self->slurp_utf8;
     $cb->();
     $self->spew_utf8($_);
 
     return;
 }
 
 sub edit_raw { $_[2] = { binmode => ":unix" }; goto &edit }
 
 #pod =method edit_lines, edit_lines_utf8, edit_lines_raw
 #pod
 #pod     path("foo.txt")->edit_lines( \&callback, $options );
 #pod     path("foo.txt")->edit_lines_utf8( \&callback );
 #pod     path("foo.txt")->edit_lines_raw( \&callback );
 #pod
 #pod These are convenience methods that allow "editing" a file's lines using a
 #pod single callback argument.  They iterate over the file: for each line, the
 #pod line is put into a localized C<$_> variable, the callback function is
 #pod executed (without arguments) and then C<$_> is written to a temporary file.
 #pod When iteration is finished, the temporary file is atomically renamed over
 #pod the original.
 #pod
 #pod An optional hash reference may be used to pass options.  The only option is
 #pod C<binmode>, which is passed to the method that open handles for reading and
 #pod writing.
 #pod
 #pod C<edit_lines_utf8> and C<edit_lines_raw> act like their respective
 #pod C<slurp_*> and C<spew_*> methods.
 #pod
 #pod Current API available since 0.077.
 #pod
 #pod =cut
 
 sub edit_lines {
     my $self = shift;
     my $cb   = shift;
     my $args = _get_args( shift, qw/binmode/ );
     Carp::croak("Callback for edit_lines() must be a code reference")
       unless defined($cb) && ref($cb) eq 'CODE';
 
     my $binmode = $args->{binmode};
     # get default binmode from caller's lexical scope (see "perldoc open")
     $binmode = ( ( caller(0) )[10] || {} )->{'open>'} unless defined $binmode;
 
     # writing need to follow the link and create the tempfile in the same
     # dir for later atomic rename
     my $resolved_path = $self->_resolve_symlinks;
     my $temp          = path( $resolved_path . $$ . int( rand( 2**31 ) ) );
 
     my $temp_fh = $temp->filehandle( { exclusive => 1, locked => 1 }, ">", $binmode );
     my $in_fh = $self->filehandle( { locked => 1 }, '<', $binmode );
 
     local $_;
     while (<$in_fh>) {
         $cb->();
         $temp_fh->print($_);
     }
 
     close $temp_fh or $self->_throw( 'close', $temp );
     close $in_fh or $self->_throw('close');
 
     return $temp->move($resolved_path);
 }
 
 sub edit_lines_raw { $_[2] = { binmode => ":unix" }; goto &edit_lines }
 
 sub edit_lines_utf8 {
     $_[2] = { binmode => ":raw:encoding(UTF-8)" };
     goto &edit_lines;
 }
 
 #pod =method exists, is_file, is_dir
 #pod
 #pod     if ( path("/tmp")->exists ) { ... }     # -e
 #pod     if ( path("/tmp")->is_dir ) { ... }     # -d
 #pod     if ( path("/tmp")->is_file ) { ... }    # -e && ! -d
 #pod
 #pod Implements file test operations, this means the file or directory actually has
 #pod to exist on the filesystem.  Until then, it's just a path.
 #pod
 #pod B<Note>: C<is_file> is not C<-f> because C<-f> is not the opposite of C<-d>.
 #pod C<-f> means "plain file", excluding symlinks, devices, etc. that often can be
 #pod read just like files.
 #pod
 #pod Use C<-f> instead if you really mean to check for a plain file.
 #pod
 #pod Current API available since 0.053.
 #pod
 #pod =cut
 
 sub exists { -e $_[0]->[PATH] }
 
 sub is_file { -e $_[0]->[PATH] && !-d _ }
 
 sub is_dir { -d $_[0]->[PATH] }
 
 #pod =method filehandle
 #pod
 #pod     $fh = path("/tmp/foo.txt")->filehandle($mode, $binmode);
 #pod     $fh = path("/tmp/foo.txt")->filehandle({ locked => 1 }, $mode, $binmode);
 #pod     $fh = path("/tmp/foo.txt")->filehandle({ exclusive => 1  }, $mode, $binmode);
 #pod
 #pod Returns an open file handle.  The C<$mode> argument must be a Perl-style
 #pod read/write mode string ("<" ,">", "<<", etc.).  If a C<$binmode>
 #pod is given, it is set during the C<open> call.
 #pod
 #pod An optional hash reference may be used to pass options.
 #pod
 #pod The C<locked> option governs file locking; if true, handles opened for writing,
 #pod appending or read-write are locked with C<LOCK_EX>; otherwise, they are
 #pod locked with C<LOCK_SH>.  When using C<locked>, ">" or "+>" modes will delay
 #pod truncation until after the lock is acquired.
 #pod
 #pod The C<exclusive> option causes the open() call to fail if the file already
 #pod exists.  This corresponds to the O_EXCL flag to sysopen / open(2).
 #pod C<exclusive> implies C<locked> and will set it for you if you forget it.
 #pod
 #pod See C<openr>, C<openw>, C<openrw>, and C<opena> for sugar.
 #pod
 #pod Current API available since 0.066.
 #pod
 #pod =cut
 
 # Note: must put binmode on open line, not subsequent binmode() call, so things
 # like ":unix" actually stop perlio/crlf from being added
 
 sub filehandle {
     my ( $self, @args ) = @_;
     my $args = ( @args && ref $args[0] eq 'HASH' ) ? shift @args : {};
     $args = _get_args( $args, qw/locked exclusive/ );
     $args->{locked} = 1 if $args->{exclusive};
     my ( $opentype, $binmode ) = @args;
 
     $opentype = "<" unless defined $opentype;
     Carp::croak("Invalid file mode '$opentype'")
       unless grep { $opentype eq $_ } qw/< +< > +> >> +>>/;
 
     $binmode = ( ( caller(0) )[10] || {} )->{ 'open' . substr( $opentype, -1, 1 ) }
       unless defined $binmode;
     $binmode = "" unless defined $binmode;
 
     my ( $fh, $lock, $trunc );
     if ( $HAS_FLOCK && $args->{locked} ) {
         require Fcntl;
         # truncating file modes shouldn't truncate until lock acquired
         if ( grep { $opentype eq $_ } qw( > +> ) ) {
             # sysopen in write mode without truncation
             my $flags = $opentype eq ">" ? Fcntl::O_WRONLY() : Fcntl::O_RDWR();
             $flags |= Fcntl::O_CREAT();
             $flags |= Fcntl::O_EXCL() if $args->{exclusive};
             sysopen( $fh, $self->[PATH], $flags ) or $self->_throw("sysopen");
 
             # fix up the binmode since sysopen() can't specify layers like
             # open() and binmode() can't start with just :unix like open()
             if ( $binmode =~ s/^:unix// ) {
                 # eliminate pseudo-layers
                 binmode( $fh, ":raw" ) or $self->_throw("binmode (:raw)");
                 # strip off real layers until only :unix is left
                 while ( 1 < ( my $layers =()= PerlIO::get_layers( $fh, output => 1 ) ) ) {
                     binmode( $fh, ":pop" ) or $self->_throw("binmode (:pop)");
                 }
             }
 
             # apply any remaining binmode layers
             if ( length $binmode ) {
                 binmode( $fh, $binmode ) or $self->_throw("binmode ($binmode)");
             }
 
             # ask for lock and truncation
             $lock  = Fcntl::LOCK_EX();
             $trunc = 1;
         }
         elsif ( $^O eq 'aix' && $opentype eq "<" ) {
             # AIX can only lock write handles, so upgrade to RW and LOCK_EX if
             # the file is writable; otherwise give up on locking.  N.B.
             # checking -w before open to determine the open mode is an
             # unavoidable race condition
             if ( -w $self->[PATH] ) {
                 $opentype = "+<";
                 $lock     = Fcntl::LOCK_EX();
             }
         }
         else {
             $lock = $opentype eq "<" ? Fcntl::LOCK_SH() : Fcntl::LOCK_EX();
         }
     }
 
     unless ($fh) {
         my $mode = $opentype . $binmode;
         open $fh, $mode, $self->[PATH] or $self->_throw("open ($mode)");
     }
 
     do { flock( $fh, $lock ) or $self->_throw("flock ($lock)") } if $lock;
     do { truncate( $fh, 0 ) or $self->_throw("truncate") } if $trunc;
 
     return $fh;
 }
 
 #pod =method is_absolute, is_relative
 #pod
 #pod     if ( path("/tmp")->is_absolute ) { ... }
 #pod     if ( path("/tmp")->is_relative ) { ... }
 #pod
 #pod Booleans for whether the path appears absolute or relative.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub is_absolute { substr( $_[0]->dirname, 0, 1 ) eq '/' }
 
 sub is_relative { substr( $_[0]->dirname, 0, 1 ) ne '/' }
 
 #pod =method is_rootdir
 #pod
 #pod     while ( ! $path->is_rootdir ) {
 #pod         $path = $path->parent;
 #pod         ...
 #pod     }
 #pod
 #pod Boolean for whether the path is the root directory of the volume.  I.e. the
 #pod C<dirname> is C<q[/]> and the C<basename> is C<q[]>.
 #pod
 #pod This works even on C<MSWin32> with drives and UNC volumes:
 #pod
 #pod     path("C:/")->is_rootdir;             # true
 #pod     path("//server/share/")->is_rootdir; #true
 #pod
 #pod Current API available since 0.038.
 #pod
 #pod =cut
 
 sub is_rootdir {
     my ($self) = @_;
     $self->_splitpath unless defined $self->[DIR];
     return $self->[DIR] eq '/' && $self->[FILE] eq '';
 }
 
 #pod =method iterator
 #pod
 #pod     $iter = path("/tmp")->iterator( \%options );
 #pod
 #pod Returns a code reference that walks a directory lazily.  Each invocation
 #pod returns a C<Path::Tiny> object or undef when the iterator is exhausted.
 #pod
 #pod     $iter = path("/tmp")->iterator;
 #pod     while ( $path = $iter->() ) {
 #pod         ...
 #pod     }
 #pod
 #pod The current and parent directory entries ("." and "..") will not
 #pod be included.
 #pod
 #pod If the C<recurse> option is true, the iterator will walk the directory
 #pod recursively, breadth-first.  If the C<follow_symlinks> option is also true,
 #pod directory links will be followed recursively.  There is no protection against
 #pod loops when following links. If a directory is not readable, it will not be
 #pod followed.
 #pod
 #pod The default is the same as:
 #pod
 #pod     $iter = path("/tmp")->iterator( {
 #pod         recurse         => 0,
 #pod         follow_symlinks => 0,
 #pod     } );
 #pod
 #pod For a more powerful, recursive iterator with built-in loop avoidance, see
 #pod L<Path::Iterator::Rule>.
 #pod
 #pod See also L</visit>.
 #pod
 #pod Current API available since 0.016.
 #pod
 #pod =cut
 
 sub iterator {
     my $self = shift;
     my $args = _get_args( shift, qw/recurse follow_symlinks/ );
     my @dirs = $self;
     my $current;
     return sub {
         my $next;
         while (@dirs) {
             if ( ref $dirs[0] eq 'Path::Tiny' ) {
                 if ( !-r $dirs[0] ) {
                     # Directory is missing or not readable, so skip it.  There
                     # is still a race condition possible between the check and
                     # the opendir, but we can't easily differentiate between
                     # error cases that are OK to skip and those that we want
                     # to be exceptions, so we live with the race and let opendir
                     # be fatal.
                     shift @dirs and next;
                 }
                 $current = $dirs[0];
                 my $dh;
                 opendir( $dh, $current->[PATH] )
                   or $self->_throw( 'opendir', $current->[PATH] );
                 $dirs[0] = $dh;
                 if ( -l $current->[PATH] && !$args->{follow_symlinks} ) {
                     # Symlink attack! It was a real dir, but is now a symlink!
                     # N.B. we check *after* opendir so the attacker has to win
                     # two races: replace dir with symlink before opendir and
                     # replace symlink with dir before -l check above
                     shift @dirs and next;
                 }
             }
             while ( defined( $next = readdir $dirs[0] ) ) {
                 next if $next eq '.' || $next eq '..';
                 my $path = $current->child($next);
                 push @dirs, $path
                   if $args->{recurse} && -d $path && !( !$args->{follow_symlinks} && -l $path );
                 return $path;
             }
             shift @dirs;
         }
         return;
     };
 }
 
 #pod =method lines, lines_raw, lines_utf8
 #pod
 #pod     @contents = path("/tmp/foo.txt")->lines;
 #pod     @contents = path("/tmp/foo.txt")->lines(\%options);
 #pod     @contents = path("/tmp/foo.txt")->lines_raw;
 #pod     @contents = path("/tmp/foo.txt")->lines_utf8;
 #pod
 #pod     @contents = path("/tmp/foo.txt")->lines( { chomp => 1, count => 4 } );
 #pod
 #pod Returns a list of lines from a file.  Optionally takes a hash-reference of
 #pod options.  Valid options are C<binmode>, C<count> and C<chomp>.
 #pod
 #pod If C<binmode> is provided, it will be set on the handle prior to reading.
 #pod
 #pod If a positive C<count> is provided, that many lines will be returned from the
 #pod start of the file.  If a negative C<count> is provided, the entire file will be
 #pod read, but only C<abs(count)> will be kept and returned.  If C<abs(count)>
 #pod exceeds the number of lines in the file, all lines will be returned.
 #pod
 #pod If C<chomp> is set, any end-of-line character sequences (C<CR>, C<CRLF>, or
 #pod C<LF>) will be removed from the lines returned.
 #pod
 #pod Because the return is a list, C<lines> in scalar context will return the number
 #pod of lines (and throw away the data).
 #pod
 #pod     $number_of_lines = path("/tmp/foo.txt")->lines;
 #pod
 #pod C<lines_raw> is like C<lines> with a C<binmode> of C<:raw>.  We use C<:raw>
 #pod instead of C<:unix> so PerlIO buffering can manage reading by line.
 #pod
 #pod C<lines_utf8> is like C<lines> with a C<binmode> of C<:raw:encoding(UTF-8)>
 #pod (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8> 0.58+ is installed, a raw
 #pod UTF-8 slurp will be done and then the lines will be split.  This is
 #pod actually faster than relying on C<:encoding(UTF-8)>, though a bit memory
 #pod intensive.  If memory use is a concern, consider C<openr_utf8> and
 #pod iterating directly on the handle.
 #pod
 #pod Current API available since 0.065.
 #pod
 #pod =cut
 
 sub lines {
     my $self    = shift;
     my $args    = _get_args( shift, qw/binmode chomp count/ );
     my $binmode = $args->{binmode};
     $binmode = ( ( caller(0) )[10] || {} )->{'open<'} unless defined $binmode;
     my $fh = $self->filehandle( { locked => 1 }, "<", $binmode );
     my $chomp = $args->{chomp};
     # XXX more efficient to read @lines then chomp(@lines) vs map?
     if ( $args->{count} ) {
         my ( $counter, $mod, @result ) = ( 0, abs( $args->{count} ) );
         while ( my $line = <$fh> ) {
             $line =~ s/(?:\x{0d}?\x{0a}|\x{0d})$// if $chomp;
             $result[ $counter++ ] = $line;
             # for positive count, terminate after right number of lines
             last if $counter == $args->{count};
             # for negative count, eventually wrap around in the result array
             $counter %= $mod;
         }
         # reorder results if full and wrapped somewhere in the middle
         splice( @result, 0, 0, splice( @result, $counter ) )
           if @result == $mod && $counter % $mod;
         return @result;
     }
     elsif ($chomp) {
         return map { s/(?:\x{0d}?\x{0a}|\x{0d})$//; $_ } <$fh>; ## no critic
     }
     else {
         return wantarray ? <$fh> : ( my $count =()= <$fh> );
     }
 }
 
 sub lines_raw {
     my $self = shift;
     my $args = _get_args( shift, qw/binmode chomp count/ );
     if ( $args->{chomp} && !$args->{count} ) {
         return split /\n/, slurp_raw($self);                    ## no critic
     }
     else {
         $args->{binmode} = ":raw";
         return lines( $self, $args );
     }
 }
 
 my $CRLF = qr/(?:\x{0d}?\x{0a}|\x{0d})/;
 
 sub lines_utf8 {
     my $self = shift;
     my $args = _get_args( shift, qw/binmode chomp count/ );
     if (   ( defined($HAS_UU) ? $HAS_UU : ( $HAS_UU = _check_UU() ) )
         && $args->{chomp}
         && !$args->{count} )
     {
         my $slurp = slurp_utf8($self);
         $slurp =~ s/$CRLF$//; # like chomp, but full CR?LF|CR
         return split $CRLF, $slurp, -1; ## no critic
     }
     elsif ( defined($HAS_PU) ? $HAS_PU : ( $HAS_PU = _check_PU() ) ) {
         $args->{binmode} = ":unix:utf8_strict";
         return lines( $self, $args );
     }
     else {
         $args->{binmode} = ":raw:encoding(UTF-8)";
         return lines( $self, $args );
     }
 }
 
 #pod =method mkpath
 #pod
 #pod     path("foo/bar/baz")->mkpath;
 #pod     path("foo/bar/baz")->mkpath( \%options );
 #pod
 #pod Like calling C<make_path> from L<File::Path>.  An optional hash reference
 #pod is passed through to C<make_path>.  Errors will be trapped and an exception
 #pod thrown.  Returns the list of directories created or an empty list if
 #pod the directories already exist, just like C<make_path>.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub mkpath {
     my ( $self, $args ) = @_;
     $args = {} unless ref $args eq 'HASH';
     my $err;
     $args->{error} = \$err unless defined $args->{error};
     require File::Path;
     my @dirs = File::Path::make_path( $self->[PATH], $args );
     if ( $err && @$err ) {
         my ( $file, $message ) = %{ $err->[0] };
         Carp::croak("mkpath failed for $file: $message");
     }
     return @dirs;
 }
 
 #pod =method move
 #pod
 #pod     path("foo.txt")->move("bar.txt");
 #pod
 #pod Move the current path to the given destination path using Perl's
 #pod built-in L<rename|perlfunc/rename> function. Returns the result
 #pod of the C<rename> function.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub move {
     my ( $self, $dst ) = @_;
 
     return rename( $self->[PATH], $dst )
       || $self->_throw( 'rename', $self->[PATH] . "' -> '$dst" );
 }
 
 #pod =method openr, openw, openrw, opena
 #pod
 #pod     $fh = path("foo.txt")->openr($binmode);  # read
 #pod     $fh = path("foo.txt")->openr_raw;
 #pod     $fh = path("foo.txt")->openr_utf8;
 #pod
 #pod     $fh = path("foo.txt")->openw($binmode);  # write
 #pod     $fh = path("foo.txt")->openw_raw;
 #pod     $fh = path("foo.txt")->openw_utf8;
 #pod
 #pod     $fh = path("foo.txt")->opena($binmode);  # append
 #pod     $fh = path("foo.txt")->opena_raw;
 #pod     $fh = path("foo.txt")->opena_utf8;
 #pod
 #pod     $fh = path("foo.txt")->openrw($binmode); # read/write
 #pod     $fh = path("foo.txt")->openrw_raw;
 #pod     $fh = path("foo.txt")->openrw_utf8;
 #pod
 #pod Returns a file handle opened in the specified mode.  The C<openr> style methods
 #pod take a single C<binmode> argument.  All of the C<open*> methods have
 #pod C<open*_raw> and C<open*_utf8> equivalents that use C<:raw> and
 #pod C<:raw:encoding(UTF-8)>, respectively.
 #pod
 #pod An optional hash reference may be used to pass options.  The only option is
 #pod C<locked>.  If true, handles opened for writing, appending or read-write are
 #pod locked with C<LOCK_EX>; otherwise, they are locked for C<LOCK_SH>.
 #pod
 #pod     $fh = path("foo.txt")->openrw_utf8( { locked => 1 } );
 #pod
 #pod See L</filehandle> for more on locking.
 #pod
 #pod Current API available since 0.011.
 #pod
 #pod =cut
 
 # map method names to corresponding open mode
 my %opens = (
     opena  => ">>",
     openr  => "<",
     openw  => ">",
     openrw => "+<"
 );
 
 while ( my ( $k, $v ) = each %opens ) {
     no strict 'refs';
     # must check for lexical IO mode hint
     *{$k} = sub {
         my ( $self, @args ) = @_;
         my $args = ( @args && ref $args[0] eq 'HASH' ) ? shift @args : {};
         $args = _get_args( $args, qw/locked/ );
         my ($binmode) = @args;
         $binmode = ( ( caller(0) )[10] || {} )->{ 'open' . substr( $v, -1, 1 ) }
           unless defined $binmode;
         $self->filehandle( $args, $v, $binmode );
     };
     *{ $k . "_raw" } = sub {
         my ( $self, @args ) = @_;
         my $args = ( @args && ref $args[0] eq 'HASH' ) ? shift @args : {};
         $args = _get_args( $args, qw/locked/ );
         $self->filehandle( $args, $v, ":raw" );
     };
     *{ $k . "_utf8" } = sub {
         my ( $self, @args ) = @_;
         my $args = ( @args && ref $args[0] eq 'HASH' ) ? shift @args : {};
         $args = _get_args( $args, qw/locked/ );
         $self->filehandle( $args, $v, ":raw:encoding(UTF-8)" );
     };
 }
 
 #pod =method parent
 #pod
 #pod     $parent = path("foo/bar/baz")->parent; # foo/bar
 #pod     $parent = path("foo/wibble.txt")->parent; # foo
 #pod
 #pod     $parent = path("foo/bar/baz")->parent(2); # foo
 #pod
 #pod Returns a C<Path::Tiny> object corresponding to the parent directory of the
 #pod original directory or file. An optional positive integer argument is the number
 #pod of parent directories upwards to return.  C<parent> by itself is equivalent to
 #pod C<parent(1)>.
 #pod
 #pod Current API available since 0.014.
 #pod
 #pod =cut
 
 # XXX this is ugly and coverage is incomplete.  I think it's there for windows
 # so need to check coverage there and compare
 sub parent {
     my ( $self, $level ) = @_;
     $level = 1 unless defined $level && $level > 0;
     $self->_splitpath unless defined $self->[FILE];
     my $parent;
     if ( length $self->[FILE] ) {
         if ( $self->[FILE] eq '.' || $self->[FILE] eq ".." ) {
             $parent = path( $self->[PATH] . "/.." );
         }
         else {
             $parent = path( _non_empty( $self->[VOL] . $self->[DIR] ) );
         }
     }
     elsif ( length $self->[DIR] ) {
         # because of symlinks, any internal updir requires us to
         # just add more updirs at the end
         if ( $self->[DIR] =~ m{(?:^\.\./|/\.\./|/\.\.$)} ) {
             $parent = path( $self->[VOL] . $self->[DIR] . "/.." );
         }
         else {
             ( my $dir = $self->[DIR] ) =~ s{/[^\/]+/$}{/};
             $parent = path( $self->[VOL] . $dir );
         }
     }
     else {
         $parent = path( _non_empty( $self->[VOL] ) );
     }
     return $level == 1 ? $parent : $parent->parent( $level - 1 );
 }
 
 sub _non_empty {
     my ($string) = shift;
     return ( ( defined($string) && length($string) ) ? $string : "." );
 }
 
 #pod =method realpath
 #pod
 #pod     $real = path("/baz/foo/../bar")->realpath;
 #pod     $real = path("foo/../bar")->realpath;
 #pod
 #pod Returns a new C<Path::Tiny> object with all symbolic links and upward directory
 #pod parts resolved using L<Cwd>'s C<realpath>.  Compared to C<absolute>, this is
 #pod more expensive as it must actually consult the filesystem.
 #pod
 #pod If the parent path can't be resolved (e.g. if it includes directories that
 #pod don't exist), an exception will be thrown:
 #pod
 #pod     $real = path("doesnt_exist/foo")->realpath; # dies
 #pod
 #pod However, if the parent path exists and only the last component (e.g. filename)
 #pod doesn't exist, the realpath will be the realpath of the parent plus the
 #pod non-existent last component:
 #pod
 #pod     $real = path("./aasdlfasdlf")->realpath; # works
 #pod
 #pod The underlying L<Cwd> module usually worked this way on Unix, but died on
 #pod Windows (and some Unixes) if the full path didn't exist.  As of version 0.064,
 #pod it's safe to use anywhere.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 # Win32 and some Unixes need parent path resolved separately so realpath
 # doesn't throw an error resolving non-existent basename
 sub realpath {
     my $self = shift;
     $self = $self->_resolve_symlinks;
     require Cwd;
     $self->_splitpath if !defined $self->[FILE];
     my $check_parent =
       length $self->[FILE] && $self->[FILE] ne '.' && $self->[FILE] ne '..';
     my $realpath = eval {
         # pure-perl Cwd can carp
         local $SIG{__WARN__} = sub { };
         Cwd::realpath( $check_parent ? $self->parent->[PATH] : $self->[PATH] );
     };
     # parent realpath must exist; not all Cwd::realpath will error if it doesn't
     $self->_throw("resolving realpath")
       unless defined $realpath && length $realpath && -e $realpath;
     return ( $check_parent ? path( $realpath, $self->[FILE] ) : path($realpath) );
 }
 
 #pod =method relative
 #pod
 #pod     $rel = path("/tmp/foo/bar")->relative("/tmp"); # foo/bar
 #pod
 #pod Returns a C<Path::Tiny> object with a path relative to a new base path
 #pod given as an argument.  If no argument is given, the current directory will
 #pod be used as the new base path.
 #pod
 #pod If either path is already relative, it will be made absolute based on the
 #pod current directly before determining the new relative path.
 #pod
 #pod The algorithm is roughly as follows:
 #pod
 #pod =for :list
 #pod * If the original and new base path are on different volumes, an exception
 #pod   will be thrown.
 #pod * If the original and new base are identical, the relative path is C<".">.
 #pod * If the new base subsumes the original, the relative path is the original
 #pod   path with the new base chopped off the front
 #pod * If the new base does not subsume the original, a common prefix path is
 #pod   determined (possibly the root directory) and the relative path will
 #pod   consist of updirs (C<"..">) to reach the common prefix, followed by the
 #pod   original path less the common prefix.
 #pod
 #pod Unlike C<File::Spec::rel2abs>, in the last case above, the calculation based
 #pod on a common prefix takes into account symlinks that could affect the updir
 #pod process.  Given an original path "/A/B" and a new base "/A/C",
 #pod (where "A", "B" and "C" could each have multiple path components):
 #pod
 #pod =for :list
 #pod * Symlinks in "A" don't change the result unless the last component of A is
 #pod   a symlink and the first component of "C" is an updir.
 #pod * Symlinks in "B" don't change the result and will exist in the result as
 #pod   given.
 #pod * Symlinks and updirs in "C" must be resolved to actual paths, taking into
 #pod   account the possibility that not all path components might exist on the
 #pod   filesystem.
 #pod
 #pod Current API available since 0.001.  New algorithm (that accounts for
 #pod symlinks) available since 0.079.
 #pod
 #pod =cut
 
 sub relative {
     my ( $self, $base ) = @_;
     $base = path( defined $base && length $base ? $base : '.' );
 
     # relative paths must be converted to absolute first
     $self = $self->absolute if $self->is_relative;
     $base = $base->absolute if $base->is_relative;
 
     # normalize volumes if they exist
     $self = $self->absolute if !length $self->volume && length $base->volume;
     $base = $base->absolute if length $self->volume  && !length $base->volume;
 
     # can't make paths relative across volumes
     if ( !_same( $self->volume, $base->volume ) ) {
         Carp::croak("relative() can't cross volumes: '$self' vs '$base'");
     }
 
     # if same absolute path, relative is current directory
     return path(".") if _same( $self->[PATH], $base->[PATH] );
 
     # if base is a prefix of self, chop prefix off self
     if ( $base->subsumes($self) ) {
         $base = "" if $base->is_rootdir;
         my $relative = "$self";
         $relative =~ s{\A\Q$base/}{};
         return path($relative);
     }
 
     # base is not a prefix, so must find a common prefix (even if root)
     my ( @common, @self_parts, @base_parts );
     @base_parts = split /\//, $base->_just_filepath;
 
     # if self is rootdir, then common directory is root (shown as empty
     # string for later joins); otherwise, must be computed from path parts.
     if ( $self->is_rootdir ) {
         @common = ("");
         shift @base_parts;
     }
     else {
         @self_parts = split /\//, $self->_just_filepath;
 
         while ( @self_parts && @base_parts && _same( $self_parts[0], $base_parts[0] ) ) {
             push @common, shift @base_parts;
             shift @self_parts;
         }
     }
 
     # if there are any symlinks from common to base, we have a problem, as
     # you can't guarantee that updir from base reaches the common prefix;
     # we must resolve symlinks and try again; likewise, any updirs are
     # a problem as it throws off calculation of updirs needed to get from
     # self's path to the common prefix.
     if ( my $new_base = $self->_resolve_between( \@common, \@base_parts ) ) {
         return $self->relative($new_base);
     }
 
     # otherwise, symlinks in common or from common to A don't matter as
     # those don't involve updirs
     my @new_path = ( ("..") x ( 0+ @base_parts ), @self_parts );
     return path(@new_path);
 }
 
 sub _just_filepath {
     my $self     = shift;
     my $self_vol = $self->volume;
     return "$self" if !length $self_vol;
 
     ( my $self_path = "$self" ) =~ s{\A\Q$self_vol}{};
 
     return $self_path;
 }
 
 sub _resolve_between {
     my ( $self, $common, $base ) = @_;
     my $path = $self->volume . join( "/", @$common );
     my $changed = 0;
     for my $p (@$base) {
         $path .= "/$p";
         if ( $p eq '..' ) {
             $changed = 1;
             if ( -e $path ) {
                 $path = path($path)->realpath->[PATH];
             }
             else {
                 $path =~ s{/[^/]+/..$}{/};
             }
         }
         if ( -l $path ) {
             $changed = 1;
             $path    = path($path)->realpath->[PATH];
         }
     }
     return $changed ? path($path) : undef;
 }
 
 #pod =method remove
 #pod
 #pod     path("foo.txt")->remove;
 #pod
 #pod This is just like C<unlink>, except for its error handling: if the path does
 #pod not exist, it returns false; if deleting the file fails, it throws an
 #pod exception.
 #pod
 #pod Current API available since 0.012.
 #pod
 #pod =cut
 
 sub remove {
     my $self = shift;
 
     return 0 if !-e $self->[PATH] && !-l $self->[PATH];
 
     return unlink( $self->[PATH] ) || $self->_throw('unlink');
 }
 
 #pod =method remove_tree
 #pod
 #pod     # directory
 #pod     path("foo/bar/baz")->remove_tree;
 #pod     path("foo/bar/baz")->remove_tree( \%options );
 #pod     path("foo/bar/baz")->remove_tree( { safe => 0 } ); # force remove
 #pod
 #pod Like calling C<remove_tree> from L<File::Path>, but defaults to C<safe> mode.
 #pod An optional hash reference is passed through to C<remove_tree>.  Errors will be
 #pod trapped and an exception thrown.  Returns the number of directories deleted,
 #pod just like C<remove_tree>.
 #pod
 #pod If you want to remove a directory only if it is empty, use the built-in
 #pod C<rmdir> function instead.
 #pod
 #pod     rmdir path("foo/bar/baz/");
 #pod
 #pod Current API available since 0.013.
 #pod
 #pod =cut
 
 sub remove_tree {
     my ( $self, $args ) = @_;
     return 0 if !-e $self->[PATH] && !-l $self->[PATH];
     $args = {} unless ref $args eq 'HASH';
     my $err;
     $args->{error} = \$err unless defined $args->{error};
     $args->{safe}  = 1     unless defined $args->{safe};
     require File::Path;
     my $count = File::Path::remove_tree( $self->[PATH], $args );
 
     if ( $err && @$err ) {
         my ( $file, $message ) = %{ $err->[0] };
         Carp::croak("remove_tree failed for $file: $message");
     }
     return $count;
 }
 
 #pod =method sibling
 #pod
 #pod     $foo = path("/tmp/foo.txt");
 #pod     $sib = $foo->sibling("bar.txt");        # /tmp/bar.txt
 #pod     $sib = $foo->sibling("baz", "bam.txt"); # /tmp/baz/bam.txt
 #pod
 #pod Returns a new C<Path::Tiny> object relative to the parent of the original.
 #pod This is slightly more efficient than C<< $path->parent->child(...) >>.
 #pod
 #pod Current API available since 0.058.
 #pod
 #pod =cut
 
 sub sibling {
     my $self = shift;
     return path( $self->parent->[PATH], @_ );
 }
 
 #pod =method slurp, slurp_raw, slurp_utf8
 #pod
 #pod     $data = path("foo.txt")->slurp;
 #pod     $data = path("foo.txt")->slurp( {binmode => ":raw"} );
 #pod     $data = path("foo.txt")->slurp_raw;
 #pod     $data = path("foo.txt")->slurp_utf8;
 #pod
 #pod Reads file contents into a scalar.  Takes an optional hash reference which may
 #pod be used to pass options.  The only available option is C<binmode>, which is
 #pod passed to C<binmode()> on the handle used for reading.
 #pod
 #pod C<slurp_raw> is like C<slurp> with a C<binmode> of C<:unix> for
 #pod a fast, unbuffered, raw read.
 #pod
 #pod C<slurp_utf8> is like C<slurp> with a C<binmode> of
 #pod C<:unix:encoding(UTF-8)> (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8>
 #pod 0.58+ is installed, a raw slurp will be done instead and the result decoded
 #pod with C<Unicode::UTF8>.  This is just as strict and is roughly an order of
 #pod magnitude faster than using C<:encoding(UTF-8)>.
 #pod
 #pod B<Note>: C<slurp> and friends lock the filehandle before slurping.  If
 #pod you plan to slurp from a file created with L<File::Temp>, be sure to
 #pod close other handles or open without locking to avoid a deadlock:
 #pod
 #pod     my $tempfile = File::Temp->new(EXLOCK => 0);
 #pod     my $guts = path($tempfile)->slurp;
 #pod
 #pod Current API available since 0.004.
 #pod
 #pod =cut
 
 sub slurp {
     my $self    = shift;
     my $args    = _get_args( shift, qw/binmode/ );
     my $binmode = $args->{binmode};
     $binmode = ( ( caller(0) )[10] || {} )->{'open<'} unless defined $binmode;
     my $fh = $self->filehandle( { locked => 1 }, "<", $binmode );
     if ( ( defined($binmode) ? $binmode : "" ) eq ":unix"
         and my $size = -s $fh )
     {
         my $buf;
         read $fh, $buf, $size; # File::Slurp in a nutshell
         return $buf;
     }
     else {
         local $/;
         return scalar <$fh>;
     }
 }
 
 sub slurp_raw { $_[1] = { binmode => ":unix" }; goto &slurp }
 
 sub slurp_utf8 {
     if ( defined($HAS_UU) ? $HAS_UU : ( $HAS_UU = _check_UU() ) ) {
         return Unicode::UTF8::decode_utf8( slurp( $_[0], { binmode => ":unix" } ) );
     }
     elsif ( defined($HAS_PU) ? $HAS_PU : ( $HAS_PU = _check_PU() ) ) {
         $_[1] = { binmode => ":unix:utf8_strict" };
         goto &slurp;
     }
     else {
         $_[1] = { binmode => ":raw:encoding(UTF-8)" };
         goto &slurp;
     }
 }
 
 #pod =method spew, spew_raw, spew_utf8
 #pod
 #pod     path("foo.txt")->spew(@data);
 #pod     path("foo.txt")->spew(\@data);
 #pod     path("foo.txt")->spew({binmode => ":raw"}, @data);
 #pod     path("foo.txt")->spew_raw(@data);
 #pod     path("foo.txt")->spew_utf8(@data);
 #pod
 #pod Writes data to a file atomically.  The file is written to a temporary file in
 #pod the same directory, then renamed over the original.  An optional hash reference
 #pod may be used to pass options.  The only option is C<binmode>, which is passed to
 #pod C<binmode()> on the handle used for writing.
 #pod
 #pod C<spew_raw> is like C<spew> with a C<binmode> of C<:unix> for a fast,
 #pod unbuffered, raw write.
 #pod
 #pod C<spew_utf8> is like C<spew> with a C<binmode> of C<:unix:encoding(UTF-8)>
 #pod (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8> 0.58+ is installed, a raw
 #pod spew will be done instead on the data encoded with C<Unicode::UTF8>.
 #pod
 #pod B<NOTE>: because the file is written to a temporary file and then renamed, the
 #pod new file will wind up with permissions based on your current umask.  This is a
 #pod feature to protect you from a race condition that would otherwise give
 #pod different permissions than you might expect.  If you really want to keep the
 #pod original mode flags, use L</append> with the C<truncate> option.
 #pod
 #pod Current API available since 0.011.
 #pod
 #pod =cut
 
 # XXX add "unsafe" option to disable flocking and atomic?  Check benchmarks on append() first.
 sub spew {
     my ( $self, @data ) = @_;
     my $args = ( @data && ref $data[0] eq 'HASH' ) ? shift @data : {};
     $args = _get_args( $args, qw/binmode/ );
     my $binmode = $args->{binmode};
     # get default binmode from caller's lexical scope (see "perldoc open")
     $binmode = ( ( caller(0) )[10] || {} )->{'open>'} unless defined $binmode;
 
     # spewing need to follow the link
     # and create the tempfile in the same dir
     my $resolved_path = $self->_resolve_symlinks;
 
     my $temp = path( $resolved_path . $$ . int( rand( 2**31 ) ) );
     my $fh = $temp->filehandle( { exclusive => 1, locked => 1 }, ">", $binmode );
     print {$fh} map { ref eq 'ARRAY' ? @$_ : $_ } @data;
     close $fh or $self->_throw( 'close', $temp->[PATH] );
 
     return $temp->move($resolved_path);
 }
 
 sub spew_raw { splice @_, 1, 0, { binmode => ":unix" }; goto &spew }
 
 sub spew_utf8 {
     if ( defined($HAS_UU) ? $HAS_UU : ( $HAS_UU = _check_UU() ) ) {
         my $self = shift;
         spew(
             $self,
             { binmode => ":unix" },
             map { Unicode::UTF8::encode_utf8($_) } map { ref eq 'ARRAY' ? @$_ : $_ } @_
         );
     }
     elsif ( defined($HAS_PU) ? $HAS_PU : ( $HAS_PU = _check_PU() ) ) {
         splice @_, 1, 0, { binmode => ":unix:utf8_strict" };
         goto &spew;
     }
     else {
         splice @_, 1, 0, { binmode => ":unix:encoding(UTF-8)" };
         goto &spew;
     }
 }
 
 #pod =method stat, lstat
 #pod
 #pod     $stat = path("foo.txt")->stat;
 #pod     $stat = path("/some/symlink")->lstat;
 #pod
 #pod Like calling C<stat> or C<lstat> from L<File::stat>.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 # XXX break out individual stat() components as subs?
 sub stat {
     my $self = shift;
     require File::stat;
     return File::stat::stat( $self->[PATH] ) || $self->_throw('stat');
 }
 
 sub lstat {
     my $self = shift;
     require File::stat;
     return File::stat::lstat( $self->[PATH] ) || $self->_throw('lstat');
 }
 
 #pod =method stringify
 #pod
 #pod     $path = path("foo.txt");
 #pod     say $path->stringify; # same as "$path"
 #pod
 #pod Returns a string representation of the path.  Unlike C<canonpath>, this method
 #pod returns the path standardized with Unix-style C</> directory separators.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub stringify { $_[0]->[PATH] }
 
 #pod =method subsumes
 #pod
 #pod     path("foo/bar")->subsumes("foo/bar/baz"); # true
 #pod     path("/foo/bar")->subsumes("/foo/baz");   # false
 #pod
 #pod Returns true if the first path is a prefix of the second path at a directory
 #pod boundary.
 #pod
 #pod This B<does not> resolve parent directory entries (C<..>) or symlinks:
 #pod
 #pod     path("foo/bar")->subsumes("foo/bar/../baz"); # true
 #pod
 #pod If such things are important to you, ensure that both paths are resolved to
 #pod the filesystem with C<realpath>:
 #pod
 #pod     my $p1 = path("foo/bar")->realpath;
 #pod     my $p2 = path("foo/bar/../baz")->realpath;
 #pod     if ( $p1->subsumes($p2) ) { ... }
 #pod
 #pod Current API available since 0.048.
 #pod
 #pod =cut
 
 sub subsumes {
     my $self = shift;
     Carp::croak("subsumes() requires a defined, positive-length argument")
       unless defined $_[0];
     my $other = path(shift);
 
     # normalize absolute vs relative
     if ( $self->is_absolute && !$other->is_absolute ) {
         $other = $other->absolute;
     }
     elsif ( $other->is_absolute && !$self->is_absolute ) {
         $self = $self->absolute;
     }
 
     # normalize volume vs non-volume; do this after absolute path
     # adjustments above since that might add volumes already
     if ( length $self->volume && !length $other->volume ) {
         $other = $other->absolute;
     }
     elsif ( length $other->volume && !length $self->volume ) {
         $self = $self->absolute;
     }
 
     if ( $self->[PATH] eq '.' ) {
         return !!1; # cwd subsumes everything relative
     }
     elsif ( $self->is_rootdir ) {
         # a root directory ("/", "c:/") already ends with a separator
         return $other->[PATH] =~ m{^\Q$self->[PATH]\E};
     }
     else {
         # exact match or prefix breaking at a separator
         return $other->[PATH] =~ m{^\Q$self->[PATH]\E(?:/|$)};
     }
 }
 
 #pod =method touch
 #pod
 #pod     path("foo.txt")->touch;
 #pod     path("foo.txt")->touch($epoch_secs);
 #pod
 #pod Like the Unix C<touch> utility.  Creates the file if it doesn't exist, or else
 #pod changes the modification and access times to the current time.  If the first
 #pod argument is the epoch seconds then it will be used.
 #pod
 #pod Returns the path object so it can be easily chained with other methods:
 #pod
 #pod     # won't die if foo.txt doesn't exist
 #pod     $content = path("foo.txt")->touch->slurp;
 #pod
 #pod Current API available since 0.015.
 #pod
 #pod =cut
 
 sub touch {
     my ( $self, $epoch ) = @_;
     if ( !-e $self->[PATH] ) {
         my $fh = $self->openw;
         close $fh or $self->_throw('close');
     }
     if ( defined $epoch ) {
         utime $epoch, $epoch, $self->[PATH]
           or $self->_throw("utime ($epoch)");
     }
     else {
         # literal undef prevents warnings :-(
         utime undef, undef, $self->[PATH]
           or $self->_throw("utime ()");
     }
     return $self;
 }
 
 #pod =method touchpath
 #pod
 #pod     path("bar/baz/foo.txt")->touchpath;
 #pod
 #pod Combines C<mkpath> and C<touch>.  Creates the parent directory if it doesn't exist,
 #pod before touching the file.  Returns the path object like C<touch> does.
 #pod
 #pod Current API available since 0.022.
 #pod
 #pod =cut
 
 sub touchpath {
     my ($self) = @_;
     my $parent = $self->parent;
     $parent->mkpath unless $parent->exists;
     $self->touch;
 }
 
 #pod =method visit
 #pod
 #pod     path("/tmp")->visit( \&callback, \%options );
 #pod
 #pod Executes a callback for each child of a directory.  It returns a hash
 #pod reference with any state accumulated during iteration.
 #pod
 #pod The options are the same as for L</iterator> (which it uses internally):
 #pod C<recurse> and C<follow_symlinks>.  Both default to false.
 #pod
 #pod The callback function will receive a C<Path::Tiny> object as the first argument
 #pod and a hash reference to accumulate state as the second argument.  For example:
 #pod
 #pod     # collect files sizes
 #pod     my $sizes = path("/tmp")->visit(
 #pod         sub {
 #pod             my ($path, $state) = @_;
 #pod             return if $path->is_dir;
 #pod             $state->{$path} = -s $path;
 #pod         },
 #pod         { recurse => 1 }
 #pod     );
 #pod
 #pod For convenience, the C<Path::Tiny> object will also be locally aliased as the
 #pod C<$_> global variable:
 #pod
 #pod     # print paths matching /foo/
 #pod     path("/tmp")->visit( sub { say if /foo/ }, { recurse => 1} );
 #pod
 #pod If the callback returns a B<reference> to a false scalar value, iteration will
 #pod terminate.  This is not the same as "pruning" a directory search; this just
 #pod stops all iteration and returns the state hash reference.
 #pod
 #pod     # find up to 10 files larger than 100K
 #pod     my $files = path("/tmp")->visit(
 #pod         sub {
 #pod             my ($path, $state) = @_;
 #pod             $state->{$path}++ if -s $path > 102400
 #pod             return \0 if keys %$state == 10;
 #pod         },
 #pod         { recurse => 1 }
 #pod     );
 #pod
 #pod If you want more flexible iteration, use a module like L<Path::Iterator::Rule>.
 #pod
 #pod Current API available since 0.062.
 #pod
 #pod =cut
 
 sub visit {
     my $self = shift;
     my $cb   = shift;
     my $args = _get_args( shift, qw/recurse follow_symlinks/ );
     Carp::croak("Callback for visit() must be a code reference")
       unless defined($cb) && ref($cb) eq 'CODE';
     my $next  = $self->iterator($args);
     my $state = {};
     while ( my $file = $next->() ) {
         local $_ = $file;
         my $r = $cb->( $file, $state );
         last if ref($r) eq 'SCALAR' && !$$r;
     }
     return $state;
 }
 
 #pod =method volume
 #pod
 #pod     $vol = path("/tmp/foo.txt")->volume;   # ""
 #pod     $vol = path("C:/tmp/foo.txt")->volume; # "C:"
 #pod
 #pod Returns the volume portion of the path.  This is equivalent
 #pod to what L<File::Spec> would give from C<splitpath> and thus
 #pod usually is the empty string on Unix-like operating systems or the
 #pod drive letter for an absolute path on C<MSWin32>.
 #pod
 #pod Current API available since 0.001.
 #pod
 #pod =cut
 
 sub volume {
     my ($self) = @_;
     $self->_splitpath unless defined $self->[VOL];
     return $self->[VOL];
 }
 
 package Path::Tiny::Error;
 
 our @CARP_NOT = qw/Path::Tiny/;
 
 use overload ( q{""} => sub { (shift)->{msg} }, fallback => 1 );
 
 sub throw {
     my ( $class, $op, $file, $err ) = @_;
     chomp( my $trace = Carp::shortmess );
     my $msg = "Error $op on '$file': $err$trace\n";
     die bless { op => $op, file => $file, err => $err, msg => $msg }, $class;
 }
 
 1;
 
 
 # vim: ts=4 sts=4 sw=4 et:
 
 __END__
 
 =pod
 
 =encoding UTF-8
 
 =head1 NAME
 
 Path::Tiny - File path utility
 
 =head1 VERSION
 
 version 0.098
 
 =head1 SYNOPSIS
 
   use Path::Tiny;
 
   # creating Path::Tiny objects
 
   $dir = path("/tmp");
   $foo = path("foo.txt");
 
   $subdir = $dir->child("foo");
   $bar = $subdir->child("bar.txt");
 
   # stringifies as cleaned up path
 
   $file = path("./foo.txt");
   print $file; # "foo.txt"
 
   # reading files
 
   $guts = $file->slurp;
   $guts = $file->slurp_utf8;
 
   @lines = $file->lines;
   @lines = $file->lines_utf8;
 
   ($head) = $file->lines( {count => 1} );
   ($tail) = $file->lines( {count => -1} );
 
   # writing files
 
   $bar->spew( @data );
   $bar->spew_utf8( @data );
 
   # reading directories
 
   for ( $dir->children ) { ... }
 
   $iter = $dir->iterator;
   while ( my $next = $iter->() ) { ... }
 
 =head1 DESCRIPTION
 
 This module provides a small, fast utility for working with file paths.  It is
 friendlier to use than L<File::Spec> and provides easy access to functions from
 several other core file handling modules.  It aims to be smaller and faster
 than many alternatives on CPAN, while helping people do many common things in
 consistent and less error-prone ways.
 
 Path::Tiny does not try to work for anything except Unix-like and Win32
 platforms.  Even then, it might break if you try something particularly obscure
 or tortuous.  (Quick!  What does this mean:
 C<< ///../../..//./././a//b/.././c/././ >>?  And how does it differ on Win32?)
 
 All paths are forced to have Unix-style forward slashes.  Stringifying
 the object gives you back the path (after some clean up).
 
 File input/output methods C<flock> handles before reading or writing,
 as appropriate (if supported by the platform).
 
 The C<*_utf8> methods (C<slurp_utf8>, C<lines_utf8>, etc.) operate in raw
 mode.  On Windows, that means they will not have CRLF translation from the
 C<:crlf> IO layer.  Installing L<Unicode::UTF8> 0.58 or later will speed up
 C<*_utf8> situations in many cases and is highly recommended.
 Alternatively, installing L<PerlIO::utf8_strict> 0.003 or later will be
 used in place of the default C<:encoding(UTF-8)>.
 
 This module depends heavily on PerlIO layers for correct operation and thus
 requires Perl 5.008001 or later.
 
 =head1 CONSTRUCTORS
 
 =head2 path
 
     $path = path("foo/bar");
     $path = path("/tmp", "file.txt"); # list
     $path = path(".");                # cwd
     $path = path("~user/file.txt");   # tilde processing
 
 Constructs a C<Path::Tiny> object.  It doesn't matter if you give a file or
 directory path.  It's still up to you to call directory-like methods only on
 directories and file-like methods only on files.  This function is exported
 automatically by default.
 
 The first argument must be defined and have non-zero length or an exception
 will be thrown.  This prevents subtle, dangerous errors with code like
 C<< path( maybe_undef() )->remove_tree >>.
 
 If the first component of the path is a tilde ('~') then the component will be
 replaced with the output of C<glob('~')>.  If the first component of the path
 is a tilde followed by a user name then the component will be replaced with
 output of C<glob('~username')>.  Behaviour for non-existent users depends on
 the output of C<glob> on the system.
 
 On Windows, if the path consists of a drive identifier without a path component
 (C<C:> or C<D:>), it will be expanded to the absolute path of the current
 directory on that volume using C<Cwd::getdcwd()>.
 
 If called with a single C<Path::Tiny> argument, the original is returned unless
 the original is holding a temporary file or directory reference in which case a
 stringified copy is made.
 
     $path = path("foo/bar");
     $temp = Path::Tiny->tempfile;
 
     $p2 = path($path); # like $p2 = $path
     $t2 = path($temp); # like $t2 = path( "$temp" )
 
 This optimizes copies without proliferating references unexpectedly if a copy is
 made by code outside your control.
 
 Current API available since 0.017.
 
 =head2 new
 
     $path = Path::Tiny->new("foo/bar");
 
 This is just like C<path>, but with method call overhead.  (Why would you
 do that?)
 
 Current API available since 0.001.
 
 =head2 cwd
 
     $path = Path::Tiny->cwd; # path( Cwd::getcwd )
     $path = cwd; # optional export
 
 Gives you the absolute path to the current directory as a C<Path::Tiny> object.
 This is slightly faster than C<< path(".")->absolute >>.
 
 C<cwd> may be exported on request and used as a function instead of as a
 method.
 
 Current API available since 0.018.
 
 =head2 rootdir
 
     $path = Path::Tiny->rootdir; # /
     $path = rootdir;             # optional export 
 
 Gives you C<< File::Spec->rootdir >> as a C<Path::Tiny> object if you're too
 picky for C<path("/")>.
 
 C<rootdir> may be exported on request and used as a function instead of as a
 method.
 
 Current API available since 0.018.
 
 =head2 tempfile, tempdir
 
     $temp = Path::Tiny->tempfile( @options );
     $temp = Path::Tiny->tempdir( @options );
     $temp = tempfile( @options ); # optional export
     $temp = tempdir( @options );  # optional export
 
 C<tempfile> passes the options to C<< File::Temp->new >> and returns a C<Path::Tiny>
 object with the file name.  The C<TMPDIR> option is enabled by default.
 
 The resulting C<File::Temp> object is cached. When the C<Path::Tiny> object is
 destroyed, the C<File::Temp> object will be as well.
 
 C<File::Temp> annoyingly requires you to specify a custom template in slightly
 different ways depending on which function or method you call, but
 C<Path::Tiny> lets you ignore that and can take either a leading template or a
 C<TEMPLATE> option and does the right thing.
 
     $temp = Path::Tiny->tempfile( "customXXXXXXXX" );             # ok
     $temp = Path::Tiny->tempfile( TEMPLATE => "customXXXXXXXX" ); # ok
 
 The tempfile path object will be normalized to have an absolute path, even if
 created in a relative directory using C<DIR>.  If you want it to have
 the C<realpath> instead, pass a leading options hash like this:
 
     $real_temp = tempfile({realpath => 1}, @options);
 
 C<tempdir> is just like C<tempfile>, except it calls
 C<< File::Temp->newdir >> instead.
 
 Both C<tempfile> and C<tempdir> may be exported on request and used as
 functions instead of as methods.
 
 B<Note>: for tempfiles, the filehandles from File::Temp are closed and not
 reused.  This is not as secure as using File::Temp handles directly, but is
 less prone to deadlocks or access problems on some platforms.  Think of what
 C<Path::Tiny> gives you to be just a temporary file B<name> that gets cleaned
 up.
 
 B<Note 2>: if you don't want these cleaned up automatically when the object
 is destroyed, File::Temp requires different options for directories and
 files.  Use C<< CLEANUP => 0 >> for directories and C<< UNLINK => 0 >> for
 files.
 
 B<Note 3>: Don't lose the temporary object by chaining a method call instead
 of storing it:
 
     my $lost = tempdir()->child("foo"); # tempdir cleaned up right away
 
 Current API available since 0.097.
 
 =head1 METHODS
 
 =head2 absolute
 
     $abs = path("foo/bar")->absolute;
     $abs = path("foo/bar")->absolute("/tmp");
 
 Returns a new C<Path::Tiny> object with an absolute path (or itself if already
 absolute).  Unless an argument is given, the current directory is used as the
 absolute base path.  The argument must be absolute or you won't get an absolute
 result.
 
 This will not resolve upward directories ("foo/../bar") unless C<canonpath>
 in L<File::Spec> would normally do so on your platform.  If you need them
 resolved, you must call the more expensive C<realpath> method instead.
 
 On Windows, an absolute path without a volume component will have it added
 based on the current drive.
 
 Current API available since 0.001.
 
 =head2 append, append_raw, append_utf8
 
     path("foo.txt")->append(@data);
     path("foo.txt")->append(\@data);
     path("foo.txt")->append({binmode => ":raw"}, @data);
     path("foo.txt")->append_raw(@data);
     path("foo.txt")->append_utf8(@data);
 
 Appends data to a file.  The file is locked with C<flock> prior to writing.  An
 optional hash reference may be used to pass options.  Valid options are:
 
 =over 4
 
 =item *
 
 C<binmode>: passed to C<binmode()> on the handle used for writing.
 
 =item *
 
 C<truncate>: truncates the file after locking and before appending
 
 =back
 
 The C<truncate> option is a way to replace the contents of a file
 B<in place>, unlike L</spew> which writes to a temporary file and then
 replaces the original (if it exists).
 
 C<append_raw> is like C<append> with a C<binmode> of C<:unix> for fast,
 unbuffered, raw write.
 
 C<append_utf8> is like C<append> with a C<binmode> of
 C<:unix:encoding(UTF-8)> (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8>
 0.58+ is installed, a raw append will be done instead on the data encoded
 with C<Unicode::UTF8>.
 
 Current API available since 0.060.
 
 =head2 assert
 
     $path = path("foo.txt")->assert( sub { $_->exists } );
 
 Returns the invocant after asserting that a code reference argument returns
 true.  When the assertion code reference runs, it will have the invocant
 object in the C<$_> variable.  If it returns false, an exception will be
 thrown.  The assertion code reference may also throw its own exception.
 
 If no assertion is provided, the invocant is returned without error.
 
 Current API available since 0.062.
 
 =head2 basename
 
     $name = path("foo/bar.txt")->basename;        # bar.txt
     $name = path("foo.txt")->basename('.txt');    # foo
     $name = path("foo.txt")->basename(qr/.txt/);  # foo
     $name = path("foo.txt")->basename(@suffixes);
 
 Returns the file portion or last directory portion of a path.
 
 Given a list of suffixes as strings or regular expressions, any that match at
 the end of the file portion or last directory portion will be removed before
 the result is returned.
 
 Current API available since 0.054.
 
 =head2 canonpath
 
     $canonical = path("foo/bar")->canonpath; # foo\bar on Windows
 
 Returns a string with the canonical format of the path name for
 the platform.  In particular, this means directory separators
 will be C<\> on Windows.
 
 Current API available since 0.001.
 
 =head2 child
 
     $file = path("/tmp")->child("foo.txt"); # "/tmp/foo.txt"
     $file = path("/tmp")->child(@parts);
 
 Returns a new C<Path::Tiny> object relative to the original.  Works
 like C<catfile> or C<catdir> from File::Spec, but without caring about
 file or directories.
 
 Current API available since 0.001.
 
 =head2 children
 
     @paths = path("/tmp")->children;
     @paths = path("/tmp")->children( qr/\.txt$/ );
 
 Returns a list of C<Path::Tiny> objects for all files and directories
 within a directory.  Excludes "." and ".." automatically.
 
 If an optional C<qr//> argument is provided, it only returns objects for child
 names that match the given regular expression.  Only the base name is used
 for matching:
 
     @paths = path("/tmp")->children( qr/^foo/ );
     # matches children like the glob foo*
 
 Current API available since 0.028.
 
 =head2 chmod
 
     path("foo.txt")->chmod(0777);
     path("foo.txt")->chmod("0755");
     path("foo.txt")->chmod("go-w");
     path("foo.txt")->chmod("a=r,u+wx");
 
 Sets file or directory permissions.  The argument can be a numeric mode, a
 octal string beginning with a "0" or a limited subset of the symbolic mode use
 by F</bin/chmod>.
 
 The symbolic mode must be a comma-delimited list of mode clauses.  Clauses must
 match C<< qr/\A([augo]+)([=+-])([rwx]+)\z/ >>, which defines "who", "op" and
 "perms" parameters for each clause.  Unlike F</bin/chmod>, all three parameters
 are required for each clause, multiple ops are not allowed and permissions
 C<stugoX> are not supported.  (See L<File::chmod> for more complex needs.)
 
 Current API available since 0.053.
 
 =head2 copy
 
     path("/tmp/foo.txt")->copy("/tmp/bar.txt");
 
 Copies the current path to the given destination using L<File::Copy>'s
 C<copy> function. Upon success, returns the C<Path::Tiny> object for the
 newly copied file.
 
 Current API available since 0.070.
 
 =head2 digest
 
     $obj = path("/tmp/foo.txt")->digest;        # SHA-256
     $obj = path("/tmp/foo.txt")->digest("MD5"); # user-selected
     $obj = path("/tmp/foo.txt")->digest( { chunk_size => 1e6 }, "MD5" );
 
 Returns a hexadecimal digest for a file.  An optional hash reference of options may
 be given.  The only option is C<chunk_size>.  If C<chunk_size> is given, that many
 bytes will be read at a time.  If not provided, the entire file will be slurped
 into memory to compute the digest.
 
 Any subsequent arguments are passed to the constructor for L<Digest> to select
 an algorithm.  If no arguments are given, the default is SHA-256.
 
 Current API available since 0.056.
 
 =head2 dirname (deprecated)
 
     $name = path("/tmp/foo.txt")->dirname; # "/tmp/"
 
 Returns the directory portion you would get from calling
 C<< File::Spec->splitpath( $path->stringify ) >> or C<"."> for a path without a
 parent directory portion.  Because L<File::Spec> is inconsistent, the result
 might or might not have a trailing slash.  Because of this, this method is
 B<deprecated>.
 
 A better, more consistently approach is likely C<< $path->parent->stringify >>,
 which will not have a trailing slash except for a root directory.
 
 Deprecated in 0.056.
 
 =head2 edit, edit_raw, edit_utf8
 
     path("foo.txt")->edit( \&callback, $options );
     path("foo.txt")->edit_utf8( \&callback );
     path("foo.txt")->edit_raw( \&callback );
 
 These are convenience methods that allow "editing" a file using a single
 callback argument. They slurp the file using C<slurp>, place the contents
 inside a localized C<$_> variable, call the callback function (without
 arguments), and then write C<$_> (presumably mutated) back to the
 file with C<spew>.
 
 An optional hash reference may be used to pass options.  The only option is
 C<binmode>, which is passed to C<slurp> and C<spew>.
 
 C<edit_utf8> and C<edit_raw> act like their respective C<slurp_*> and
 C<spew_*> methods.
 
 Current API available since 0.077.
 
 =head2 edit_lines, edit_lines_utf8, edit_lines_raw
 
     path("foo.txt")->edit_lines( \&callback, $options );
     path("foo.txt")->edit_lines_utf8( \&callback );
     path("foo.txt")->edit_lines_raw( \&callback );
 
 These are convenience methods that allow "editing" a file's lines using a
 single callback argument.  They iterate over the file: for each line, the
 line is put into a localized C<$_> variable, the callback function is
 executed (without arguments) and then C<$_> is written to a temporary file.
 When iteration is finished, the temporary file is atomically renamed over
 the original.
 
 An optional hash reference may be used to pass options.  The only option is
 C<binmode>, which is passed to the method that open handles for reading and
 writing.
 
 C<edit_lines_utf8> and C<edit_lines_raw> act like their respective
 C<slurp_*> and C<spew_*> methods.
 
 Current API available since 0.077.
 
 =head2 exists, is_file, is_dir
 
     if ( path("/tmp")->exists ) { ... }     # -e
     if ( path("/tmp")->is_dir ) { ... }     # -d
     if ( path("/tmp")->is_file ) { ... }    # -e && ! -d
 
 Implements file test operations, this means the file or directory actually has
 to exist on the filesystem.  Until then, it's just a path.
 
 B<Note>: C<is_file> is not C<-f> because C<-f> is not the opposite of C<-d>.
 C<-f> means "plain file", excluding symlinks, devices, etc. that often can be
 read just like files.
 
 Use C<-f> instead if you really mean to check for a plain file.
 
 Current API available since 0.053.
 
 =head2 filehandle
 
     $fh = path("/tmp/foo.txt")->filehandle($mode, $binmode);
     $fh = path("/tmp/foo.txt")->filehandle({ locked => 1 }, $mode, $binmode);
     $fh = path("/tmp/foo.txt")->filehandle({ exclusive => 1  }, $mode, $binmode);
 
 Returns an open file handle.  The C<$mode> argument must be a Perl-style
 read/write mode string ("<" ,">", "<<", etc.).  If a C<$binmode>
 is given, it is set during the C<open> call.
 
 An optional hash reference may be used to pass options.
 
 The C<locked> option governs file locking; if true, handles opened for writing,
 appending or read-write are locked with C<LOCK_EX>; otherwise, they are
 locked with C<LOCK_SH>.  When using C<locked>, ">" or "+>" modes will delay
 truncation until after the lock is acquired.
 
 The C<exclusive> option causes the open() call to fail if the file already
 exists.  This corresponds to the O_EXCL flag to sysopen / open(2).
 C<exclusive> implies C<locked> and will set it for you if you forget it.
 
 See C<openr>, C<openw>, C<openrw>, and C<opena> for sugar.
 
 Current API available since 0.066.
 
 =head2 is_absolute, is_relative
 
     if ( path("/tmp")->is_absolute ) { ... }
     if ( path("/tmp")->is_relative ) { ... }
 
 Booleans for whether the path appears absolute or relative.
 
 Current API available since 0.001.
 
 =head2 is_rootdir
 
     while ( ! $path->is_rootdir ) {
         $path = $path->parent;
         ...
     }
 
 Boolean for whether the path is the root directory of the volume.  I.e. the
 C<dirname> is C<q[/]> and the C<basename> is C<q[]>.
 
 This works even on C<MSWin32> with drives and UNC volumes:
 
     path("C:/")->is_rootdir;             # true
     path("//server/share/")->is_rootdir; #true
 
 Current API available since 0.038.
 
 =head2 iterator
 
     $iter = path("/tmp")->iterator( \%options );
 
 Returns a code reference that walks a directory lazily.  Each invocation
 returns a C<Path::Tiny> object or undef when the iterator is exhausted.
 
     $iter = path("/tmp")->iterator;
     while ( $path = $iter->() ) {
         ...
     }
 
 The current and parent directory entries ("." and "..") will not
 be included.
 
 If the C<recurse> option is true, the iterator will walk the directory
 recursively, breadth-first.  If the C<follow_symlinks> option is also true,
 directory links will be followed recursively.  There is no protection against
 loops when following links. If a directory is not readable, it will not be
 followed.
 
 The default is the same as:
 
     $iter = path("/tmp")->iterator( {
         recurse         => 0,
         follow_symlinks => 0,
     } );
 
 For a more powerful, recursive iterator with built-in loop avoidance, see
 L<Path::Iterator::Rule>.
 
 See also L</visit>.
 
 Current API available since 0.016.
 
 =head2 lines, lines_raw, lines_utf8
 
     @contents = path("/tmp/foo.txt")->lines;
     @contents = path("/tmp/foo.txt")->lines(\%options);
     @contents = path("/tmp/foo.txt")->lines_raw;
     @contents = path("/tmp/foo.txt")->lines_utf8;
 
     @contents = path("/tmp/foo.txt")->lines( { chomp => 1, count => 4 } );
 
 Returns a list of lines from a file.  Optionally takes a hash-reference of
 options.  Valid options are C<binmode>, C<count> and C<chomp>.
 
 If C<binmode> is provided, it will be set on the handle prior to reading.
 
 If a positive C<count> is provided, that many lines will be returned from the
 start of the file.  If a negative C<count> is provided, the entire file will be
 read, but only C<abs(count)> will be kept and returned.  If C<abs(count)>
 exceeds the number of lines in the file, all lines will be returned.
 
 If C<chomp> is set, any end-of-line character sequences (C<CR>, C<CRLF>, or
 C<LF>) will be removed from the lines returned.
 
 Because the return is a list, C<lines> in scalar context will return the number
 of lines (and throw away the data).
 
     $number_of_lines = path("/tmp/foo.txt")->lines;
 
 C<lines_raw> is like C<lines> with a C<binmode> of C<:raw>.  We use C<:raw>
 instead of C<:unix> so PerlIO buffering can manage reading by line.
 
 C<lines_utf8> is like C<lines> with a C<binmode> of C<:raw:encoding(UTF-8)>
 (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8> 0.58+ is installed, a raw
 UTF-8 slurp will be done and then the lines will be split.  This is
 actually faster than relying on C<:encoding(UTF-8)>, though a bit memory
 intensive.  If memory use is a concern, consider C<openr_utf8> and
 iterating directly on the handle.
 
 Current API available since 0.065.
 
 =head2 mkpath
 
     path("foo/bar/baz")->mkpath;
     path("foo/bar/baz")->mkpath( \%options );
 
 Like calling C<make_path> from L<File::Path>.  An optional hash reference
 is passed through to C<make_path>.  Errors will be trapped and an exception
 thrown.  Returns the list of directories created or an empty list if
 the directories already exist, just like C<make_path>.
 
 Current API available since 0.001.
 
 =head2 move
 
     path("foo.txt")->move("bar.txt");
 
 Move the current path to the given destination path using Perl's
 built-in L<rename|perlfunc/rename> function. Returns the result
 of the C<rename> function.
 
 Current API available since 0.001.
 
 =head2 openr, openw, openrw, opena
 
     $fh = path("foo.txt")->openr($binmode);  # read
     $fh = path("foo.txt")->openr_raw;
     $fh = path("foo.txt")->openr_utf8;
 
     $fh = path("foo.txt")->openw($binmode);  # write
     $fh = path("foo.txt")->openw_raw;
     $fh = path("foo.txt")->openw_utf8;
 
     $fh = path("foo.txt")->opena($binmode);  # append
     $fh = path("foo.txt")->opena_raw;
     $fh = path("foo.txt")->opena_utf8;
 
     $fh = path("foo.txt")->openrw($binmode); # read/write
     $fh = path("foo.txt")->openrw_raw;
     $fh = path("foo.txt")->openrw_utf8;
 
 Returns a file handle opened in the specified mode.  The C<openr> style methods
 take a single C<binmode> argument.  All of the C<open*> methods have
 C<open*_raw> and C<open*_utf8> equivalents that use C<:raw> and
 C<:raw:encoding(UTF-8)>, respectively.
 
 An optional hash reference may be used to pass options.  The only option is
 C<locked>.  If true, handles opened for writing, appending or read-write are
 locked with C<LOCK_EX>; otherwise, they are locked for C<LOCK_SH>.
 
     $fh = path("foo.txt")->openrw_utf8( { locked => 1 } );
 
 See L</filehandle> for more on locking.
 
 Current API available since 0.011.
 
 =head2 parent
 
     $parent = path("foo/bar/baz")->parent; # foo/bar
     $parent = path("foo/wibble.txt")->parent; # foo
 
     $parent = path("foo/bar/baz")->parent(2); # foo
 
 Returns a C<Path::Tiny> object corresponding to the parent directory of the
 original directory or file. An optional positive integer argument is the number
 of parent directories upwards to return.  C<parent> by itself is equivalent to
 C<parent(1)>.
 
 Current API available since 0.014.
 
 =head2 realpath
 
     $real = path("/baz/foo/../bar")->realpath;
     $real = path("foo/../bar")->realpath;
 
 Returns a new C<Path::Tiny> object with all symbolic links and upward directory
 parts resolved using L<Cwd>'s C<realpath>.  Compared to C<absolute>, this is
 more expensive as it must actually consult the filesystem.
 
 If the parent path can't be resolved (e.g. if it includes directories that
 don't exist), an exception will be thrown:
 
     $real = path("doesnt_exist/foo")->realpath; # dies
 
 However, if the parent path exists and only the last component (e.g. filename)
 doesn't exist, the realpath will be the realpath of the parent plus the
 non-existent last component:
 
     $real = path("./aasdlfasdlf")->realpath; # works
 
 The underlying L<Cwd> module usually worked this way on Unix, but died on
 Windows (and some Unixes) if the full path didn't exist.  As of version 0.064,
 it's safe to use anywhere.
 
 Current API available since 0.001.
 
 =head2 relative
 
     $rel = path("/tmp/foo/bar")->relative("/tmp"); # foo/bar
 
 Returns a C<Path::Tiny> object with a path relative to a new base path
 given as an argument.  If no argument is given, the current directory will
 be used as the new base path.
 
 If either path is already relative, it will be made absolute based on the
 current directly before determining the new relative path.
 
 The algorithm is roughly as follows:
 
 =over 4
 
 =item *
 
 If the original and new base path are on different volumes, an exception will be thrown.
 
 =item *
 
 If the original and new base are identical, the relative path is C<".">.
 
 =item *
 
 If the new base subsumes the original, the relative path is the original path with the new base chopped off the front
 
 =item *
 
 If the new base does not subsume the original, a common prefix path is determined (possibly the root directory) and the relative path will consist of updirs (C<"..">) to reach the common prefix, followed by the original path less the common prefix.
 
 =back
 
 Unlike C<File::Spec::rel2abs>, in the last case above, the calculation based
 on a common prefix takes into account symlinks that could affect the updir
 process.  Given an original path "/A/B" and a new base "/A/C",
 (where "A", "B" and "C" could each have multiple path components):
 
 =over 4
 
 =item *
 
 Symlinks in "A" don't change the result unless the last component of A is a symlink and the first component of "C" is an updir.
 
 =item *
 
 Symlinks in "B" don't change the result and will exist in the result as given.
 
 =item *
 
 Symlinks and updirs in "C" must be resolved to actual paths, taking into account the possibility that not all path components might exist on the filesystem.
 
 =back
 
 Current API available since 0.001.  New algorithm (that accounts for
 symlinks) available since 0.079.
 
 =head2 remove
 
     path("foo.txt")->remove;
 
 This is just like C<unlink>, except for its error handling: if the path does
 not exist, it returns false; if deleting the file fails, it throws an
 exception.
 
 Current API available since 0.012.
 
 =head2 remove_tree
 
     # directory
     path("foo/bar/baz")->remove_tree;
     path("foo/bar/baz")->remove_tree( \%options );
     path("foo/bar/baz")->remove_tree( { safe => 0 } ); # force remove
 
 Like calling C<remove_tree> from L<File::Path>, but defaults to C<safe> mode.
 An optional hash reference is passed through to C<remove_tree>.  Errors will be
 trapped and an exception thrown.  Returns the number of directories deleted,
 just like C<remove_tree>.
 
 If you want to remove a directory only if it is empty, use the built-in
 C<rmdir> function instead.
 
     rmdir path("foo/bar/baz/");
 
 Current API available since 0.013.
 
 =head2 sibling
 
     $foo = path("/tmp/foo.txt");
     $sib = $foo->sibling("bar.txt");        # /tmp/bar.txt
     $sib = $foo->sibling("baz", "bam.txt"); # /tmp/baz/bam.txt
 
 Returns a new C<Path::Tiny> object relative to the parent of the original.
 This is slightly more efficient than C<< $path->parent->child(...) >>.
 
 Current API available since 0.058.
 
 =head2 slurp, slurp_raw, slurp_utf8
 
     $data = path("foo.txt")->slurp;
     $data = path("foo.txt")->slurp( {binmode => ":raw"} );
     $data = path("foo.txt")->slurp_raw;
     $data = path("foo.txt")->slurp_utf8;
 
 Reads file contents into a scalar.  Takes an optional hash reference which may
 be used to pass options.  The only available option is C<binmode>, which is
 passed to C<binmode()> on the handle used for reading.
 
 C<slurp_raw> is like C<slurp> with a C<binmode> of C<:unix> for
 a fast, unbuffered, raw read.
 
 C<slurp_utf8> is like C<slurp> with a C<binmode> of
 C<:unix:encoding(UTF-8)> (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8>
 0.58+ is installed, a raw slurp will be done instead and the result decoded
 with C<Unicode::UTF8>.  This is just as strict and is roughly an order of
 magnitude faster than using C<:encoding(UTF-8)>.
 
 B<Note>: C<slurp> and friends lock the filehandle before slurping.  If
 you plan to slurp from a file created with L<File::Temp>, be sure to
 close other handles or open without locking to avoid a deadlock:
 
     my $tempfile = File::Temp->new(EXLOCK => 0);
     my $guts = path($tempfile)->slurp;
 
 Current API available since 0.004.
 
 =head2 spew, spew_raw, spew_utf8
 
     path("foo.txt")->spew(@data);
     path("foo.txt")->spew(\@data);
     path("foo.txt")->spew({binmode => ":raw"}, @data);
     path("foo.txt")->spew_raw(@data);
     path("foo.txt")->spew_utf8(@data);
 
 Writes data to a file atomically.  The file is written to a temporary file in
 the same directory, then renamed over the original.  An optional hash reference
 may be used to pass options.  The only option is C<binmode>, which is passed to
 C<binmode()> on the handle used for writing.
 
 C<spew_raw> is like C<spew> with a C<binmode> of C<:unix> for a fast,
 unbuffered, raw write.
 
 C<spew_utf8> is like C<spew> with a C<binmode> of C<:unix:encoding(UTF-8)>
 (or L<PerlIO::utf8_strict>).  If L<Unicode::UTF8> 0.58+ is installed, a raw
 spew will be done instead on the data encoded with C<Unicode::UTF8>.
 
 B<NOTE>: because the file is written to a temporary file and then renamed, the
 new file will wind up with permissions based on your current umask.  This is a
 feature to protect you from a race condition that would otherwise give
 different permissions than you might expect.  If you really want to keep the
 original mode flags, use L</append> with the C<truncate> option.
 
 Current API available since 0.011.
 
 =head2 stat, lstat
 
     $stat = path("foo.txt")->stat;
     $stat = path("/some/symlink")->lstat;
 
 Like calling C<stat> or C<lstat> from L<File::stat>.
 
 Current API available since 0.001.
 
 =head2 stringify
 
     $path = path("foo.txt");
     say $path->stringify; # same as "$path"
 
 Returns a string representation of the path.  Unlike C<canonpath>, this method
 returns the path standardized with Unix-style C</> directory separators.
 
 Current API available since 0.001.
 
 =head2 subsumes
 
     path("foo/bar")->subsumes("foo/bar/baz"); # true
     path("/foo/bar")->subsumes("/foo/baz");   # false
 
 Returns true if the first path is a prefix of the second path at a directory
 boundary.
 
 This B<does not> resolve parent directory entries (C<..>) or symlinks:
 
     path("foo/bar")->subsumes("foo/bar/../baz"); # true
 
 If such things are important to you, ensure that both paths are resolved to
 the filesystem with C<realpath>:
 
     my $p1 = path("foo/bar")->realpath;
     my $p2 = path("foo/bar/../baz")->realpath;
     if ( $p1->subsumes($p2) ) { ... }
 
 Current API available since 0.048.
 
 =head2 touch
 
     path("foo.txt")->touch;
     path("foo.txt")->touch($epoch_secs);
 
 Like the Unix C<touch> utility.  Creates the file if it doesn't exist, or else
 changes the modification and access times to the current time.  If the first
 argument is the epoch seconds then it will be used.
 
 Returns the path object so it can be easily chained with other methods:
 
     # won't die if foo.txt doesn't exist
     $content = path("foo.txt")->touch->slurp;
 
 Current API available since 0.015.
 
 =head2 touchpath
 
     path("bar/baz/foo.txt")->touchpath;
 
 Combines C<mkpath> and C<touch>.  Creates the parent directory if it doesn't exist,
 before touching the file.  Returns the path object like C<touch> does.
 
 Current API available since 0.022.
 
 =head2 visit
 
     path("/tmp")->visit( \&callback, \%options );
 
 Executes a callback for each child of a directory.  It returns a hash
 reference with any state accumulated during iteration.
 
 The options are the same as for L</iterator> (which it uses internally):
 C<recurse> and C<follow_symlinks>.  Both default to false.
 
 The callback function will receive a C<Path::Tiny> object as the first argument
 and a hash reference to accumulate state as the second argument.  For example:
 
     # collect files sizes
     my $sizes = path("/tmp")->visit(
         sub {
             my ($path, $state) = @_;
             return if $path->is_dir;
             $state->{$path} = -s $path;
         },
         { recurse => 1 }
     );
 
 For convenience, the C<Path::Tiny> object will also be locally aliased as the
 C<$_> global variable:
 
     # print paths matching /foo/
     path("/tmp")->visit( sub { say if /foo/ }, { recurse => 1} );
 
 If the callback returns a B<reference> to a false scalar value, iteration will
 terminate.  This is not the same as "pruning" a directory search; this just
 stops all iteration and returns the state hash reference.
 
     # find up to 10 files larger than 100K
     my $files = path("/tmp")->visit(
         sub {
             my ($path, $state) = @_;
             $state->{$path}++ if -s $path > 102400
             return \0 if keys %$state == 10;
         },
         { recurse => 1 }
     );
 
 If you want more flexible iteration, use a module like L<Path::Iterator::Rule>.
 
 Current API available since 0.062.
 
 =head2 volume
 
     $vol = path("/tmp/foo.txt")->volume;   # ""
     $vol = path("C:/tmp/foo.txt")->volume; # "C:"
 
 Returns the volume portion of the path.  This is equivalent
 to what L<File::Spec> would give from C<splitpath> and thus
 usually is the empty string on Unix-like operating systems or the
 drive letter for an absolute path on C<MSWin32>.
 
 Current API available since 0.001.
 
 =for Pod::Coverage openr_utf8 opena_utf8 openw_utf8 openrw_utf8
 openr_raw opena_raw openw_raw openrw_raw
 IS_BSD IS_WIN32 FREEZE THAW TO_JSON abs2rel
 
 =head1 EXCEPTION HANDLING
 
 Simple usage errors will generally croak.  Failures of underlying Perl
 functions will be thrown as exceptions in the class
 C<Path::Tiny::Error>.
 
 A C<Path::Tiny::Error> object will be a hash reference with the following fields:
 
 =over 4
 
 =item *
 
 C<op> — a description of the operation, usually function call and any extra info
 
 =item *
 
 C<file> — the file or directory relating to the error
 
 =item *
 
 C<err> — hold C<$!> at the time the error was thrown
 
 =item *
 
 C<msg> — a string combining the above data and a Carp-like short stack trace
 
 =back
 
 Exception objects will stringify as the C<msg> field.
 
 =head1 CAVEATS
 
 =head2 Subclassing not supported
 
 For speed, this class is implemented as an array based object and uses many
 direction function calls internally.  You must not subclass it and expect
 things to work properly.
 
 =head2 File locking
 
 If flock is not supported on a platform, it will not be used, even if
 locking is requested.
 
 See additional caveats below.
 
 =head3 NFS and BSD
 
 On BSD, Perl's flock implementation may not work to lock files on an
 NFS filesystem.  Path::Tiny has some heuristics to detect this
 and will warn once and let you continue in an unsafe mode.  If you
 want this failure to be fatal, you can fatalize the 'flock' warnings
 category:
 
     use warnings FATAL => 'flock';
 
 =head3 AIX and locking
 
 AIX requires a write handle for locking.  Therefore, calls that normally
 open a read handle and take a shared lock instead will open a read-write
 handle and take an exclusive lock.  If the user does not have write
 permission, no lock will be used.
 
 =head2 utf8 vs UTF-8
 
 All the C<*_utf8> methods by default use C<:encoding(UTF-8)> -- either as
 C<:unix:encoding(UTF-8)> (unbuffered) or C<:raw:encoding(UTF-8)> (buffered) --
 which is strict against the Unicode spec and disallows illegal Unicode
 codepoints or UTF-8 sequences.
 
 Unfortunately, C<:encoding(UTF-8)> is very, very slow.  If you install
 L<Unicode::UTF8> 0.58 or later, that module will be used by some C<*_utf8>
 methods to encode or decode data after a raw, binary input/output operation,
 which is much faster.  Alternatively, if you install L<PerlIO::utf8_strict>,
 that will be used instead of C<:encoding(UTF-8)> and is also very fast.
 
 If you need the performance and can accept the security risk,
 C<< slurp({binmode => ":unix:utf8"}) >> will be faster than C<:unix:encoding(UTF-8)>
 (but not as fast as C<Unicode::UTF8>).
 
 Note that the C<*_utf8> methods read in B<raw> mode.  There is no CRLF
 translation on Windows.  If you must have CRLF translation, use the regular
 input/output methods with an appropriate binmode:
 
   $path->spew_utf8($data);                            # raw
   $path->spew({binmode => ":encoding(UTF-8)"}, $data; # LF -> CRLF
 
 =head2 Default IO layers and the open pragma
 
 If you have Perl 5.10 or later, file input/output methods (C<slurp>, C<spew>,
 etc.) and high-level handle opening methods ( C<filehandle>, C<openr>,
 C<openw>, etc. ) respect default encodings set by the C<-C> switch or lexical
 L<open> settings of the caller.  For UTF-8, this is almost certainly slower
 than using the dedicated C<_utf8> methods if you have L<Unicode::UTF8>.
 
 =head1 TYPE CONSTRAINTS AND COERCION
 
 A standard L<MooseX::Types> library is available at
 L<MooseX::Types::Path::Tiny>.  A L<Type::Tiny> equivalent is available as
 L<Types::Path::Tiny>.
 
 =head1 SEE ALSO
 
 These are other file/path utilities, which may offer a different feature
 set than C<Path::Tiny>.
 
 =over 4
 
 =item *
 
 L<File::chmod>
 
 =item *
 
 L<File::Fu>
 
 =item *
 
 L<IO::All>
 
 =item *
 
 L<Path::Class>
 
 =back
 
 These iterators may be slightly faster than the recursive iterator in
 C<Path::Tiny>:
 
 =over 4
 
 =item *
 
 L<Path::Iterator::Rule>
 
 =item *
 
 L<File::Next>
 
 =back
 
 There are probably comparable, non-Tiny tools.  Let me know if you want me to
 add a module to the list.
 
 This module was featured in the L<2013 Perl Advent Calendar|http://www.perladvent.org/2013/2013-12-18.html>.
 
 =for :stopwords cpan testmatrix url annocpan anno bugtracker rt cpants kwalitee diff irc mailto metadata placeholders metacpan
 
 =head1 SUPPORT
 
 =head2 Bugs / Feature Requests
 
 Please report any bugs or feature requests through the issue tracker
 at L<https://github.com/dagolden/Path-Tiny/issues>.
 You will be notified automatically of any progress on your issue.
 
 =head2 Source Code
 
 This is open source software.  The code repository is available for
 public review and contribution under the terms of the license.
 
 L<https://github.com/dagolden/Path-Tiny>
 
   git clone https://github.com/dagolden/Path-Tiny.git
 
 =head1 AUTHOR
 
 David Golden <dagolden@cpan.org>
 
 =head1 CONTRIBUTORS
 
 =for stopwords Alex Efros Chris Williams David Steinbrunner Doug Bell Gabor Szabo Gabriel Andrade George Hartzell Geraud Continsouzas Goro Fuji Graham Knop Ollis James Hunt John Karr Karen Etheridge Mark Ellis Martin Kjeldsen Michael G. Schwern Nigel Gregoire Philippe Bruhat (BooK) Regina Verbae Roy Ivy III Shlomi Fish Smylers Tatsuhiko Miyagawa Toby Inkster Yanick Champoux 김도형 - Keedi Kim
 
 =over 4
 
 =item *
 
 Alex Efros <powerman@powerman.name>
 
 =item *
 
 Chris Williams <bingos@cpan.org>
 
 =item *
 
 David Steinbrunner <dsteinbrunner@pobox.com>
 
 =item *
 
 Doug Bell <madcityzen@gmail.com>
 
 =item *
 
 Gabor Szabo <szabgab@cpan.org>
 
 =item *
 
 Gabriel Andrade <gabiruh@gmail.com>
 
 =item *
 
 George Hartzell <hartzell@cpan.org>
 
 =item *
 
 Geraud Continsouzas <geraud@scsi.nc>
 
 =item *
 
 Goro Fuji <gfuji@cpan.org>
 
 =item *
 
 Graham Knop <haarg@haarg.org>
 
 =item *
 
 Graham Ollis <plicease@cpan.org>
 
 =item *
 
 James Hunt <james@niftylogic.com>
 
 =item *
 
 John Karr <brainbuz@brainbuz.org>
 
 =item *
 
 Karen Etheridge <ether@cpan.org>
 
 =item *
 
 Mark Ellis <mark.ellis@cartridgesave.co.uk>
 
 =item *
 
 Martin Kjeldsen <mk@bluepipe.dk>
 
 =item *
 
 Michael G. Schwern <mschwern@cpan.org>
 
 =item *
 
 Nigel Gregoire <nigelgregoire@gmail.com>
 
 =item *
 
 Philippe Bruhat (BooK) <book@cpan.org>
 
 =item *
 
 Regina Verbae <regina-verbae@users.noreply.github.com>
 
 =item *
 
 Roy Ivy III <rivy@cpan.org>
 
 =item *
 
 Shlomi Fish <shlomif@shlomifish.org>
 
 =item *
 
 Smylers <Smylers@stripey.com>
 
 =item *
 
 Tatsuhiko Miyagawa <miyagawa@bulknews.net>
 
 =item *
 
 Toby Inkster <tobyink@cpan.org>
 
 =item *
 
 Yanick Champoux <yanick@babyl.dyndns.org>
 
 =item *
 
 김도형 - Keedi Kim <keedi@cpan.org>
 
 =back
 
 =head1 COPYRIGHT AND LICENSE
 
 This software is Copyright (c) 2014 by David Golden.
 
 This is free software, licensed under:
 
   The Apache License, Version 2.0, January 2004
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__

      'YAML/Tiny.pm' => <<'END_OF_FILE',
 use 5.008001; # sane UTF-8 support
 use strict;
 use warnings;
 package YAML::Tiny;
 # XXX-INGY is 5.8.1 too old/broken for utf8?
 # XXX-XDG Lancaster consensus was that it was sufficient until
 # proven otherwise
 
 our $VERSION = '1.70';
 
 #####################################################################
 # The YAML::Tiny API.
 #
 # These are the currently documented API functions/methods and
 # exports:
 
 use Exporter;
 our @ISA       = qw{ Exporter  };
 our @EXPORT    = qw{ Load Dump };
 our @EXPORT_OK = qw{ LoadFile DumpFile freeze thaw };
 
 ###
 # Functional/Export API:
 
 sub Dump {
     return YAML::Tiny->new(@_)->_dump_string;
 }
 
 # XXX-INGY Returning last document seems a bad behavior.
 # XXX-XDG I think first would seem more natural, but I don't know
 # that it's worth changing now
 sub Load {
     my $self = YAML::Tiny->_load_string(@_);
     if ( wantarray ) {
         return @$self;
     } else {
         # To match YAML.pm, return the last document
         return $self->[-1];
     }
 }
 
 # XXX-INGY Do we really need freeze and thaw?
 # XXX-XDG I don't think so.  I'd support deprecating them.
 BEGIN {
     *freeze = \&Dump;
     *thaw   = \&Load;
 }
 
 sub DumpFile {
     my $file = shift;
     return YAML::Tiny->new(@_)->_dump_file($file);
 }
 
 sub LoadFile {
     my $file = shift;
     my $self = YAML::Tiny->_load_file($file);
     if ( wantarray ) {
         return @$self;
     } else {
         # Return only the last document to match YAML.pm,
         return $self->[-1];
     }
 }
 
 
 ###
 # Object Oriented API:
 
 # Create an empty YAML::Tiny object
 # XXX-INGY Why do we use ARRAY object?
 # NOTE: I get it now, but I think it's confusing and not needed.
 # Will change it on a branch later, for review.
 #
 # XXX-XDG I don't support changing it yet.  It's a very well-documented
 # "API" of YAML::Tiny.  I'd support deprecating it, but Adam suggested
 # we not change it until YAML.pm's own OO API is established so that
 # users only have one API change to digest, not two
 sub new {
     my $class = shift;
     bless [ @_ ], $class;
 }
 
 # XXX-INGY It probably doesn't matter, and it's probably too late to
 # change, but 'read/write' are the wrong names. Read and Write
 # are actions that take data from storage to memory
 # characters/strings. These take the data to/from storage to native
 # Perl objects, which the terms dump and load are meant. As long as
 # this is a legacy quirk to YAML::Tiny it's ok, but I'd prefer not
 # to add new {read,write}_* methods to this API.
 
 sub read_string {
     my $self = shift;
     $self->_load_string(@_);
 }
 
 sub write_string {
     my $self = shift;
     $self->_dump_string(@_);
 }
 
 sub read {
     my $self = shift;
     $self->_load_file(@_);
 }
 
 sub write {
     my $self = shift;
     $self->_dump_file(@_);
 }
 
 
 
 
 #####################################################################
 # Constants
 
 # Printed form of the unprintable characters in the lowest range
 # of ASCII characters, listed by ASCII ordinal position.
 my @UNPRINTABLE = qw(
     0    x01  x02  x03  x04  x05  x06  a
     b    t    n    v    f    r    x0E  x0F
     x10  x11  x12  x13  x14  x15  x16  x17
     x18  x19  x1A  e    x1C  x1D  x1E  x1F
 );
 
 # Printable characters for escapes
 my %UNESCAPES = (
     0 => "\x00", z => "\x00", N    => "\x85",
     a => "\x07", b => "\x08", t    => "\x09",
     n => "\x0a", v => "\x0b", f    => "\x0c",
     r => "\x0d", e => "\x1b", '\\' => '\\',
 );
 
 # XXX-INGY
 # I(ngy) need to decide if these values should be quoted in
 # YAML::Tiny or not. Probably yes.
 
 # These 3 values have special meaning when unquoted and using the
 # default YAML schema. They need quotes if they are strings.
 my %QUOTE = map { $_ => 1 } qw{
     null true false
 };
 
 # The commented out form is simpler, but overloaded the Perl regex
 # engine due to recursion and backtracking problems on strings
 # larger than 32,000ish characters. Keep it for reference purposes.
 # qr/\"((?:\\.|[^\"])*)\"/
 my $re_capture_double_quoted = qr/\"([^\\"]*(?:\\.[^\\"]*)*)\"/;
 my $re_capture_single_quoted = qr/\'([^\']*(?:\'\'[^\']*)*)\'/;
 # unquoted re gets trailing space that needs to be stripped
 my $re_capture_unquoted_key  = qr/([^:]+(?::+\S(?:[^:]*|.*?(?=:)))*)(?=\s*\:(?:\s+|$))/;
 my $re_trailing_comment      = qr/(?:\s+\#.*)?/;
 my $re_key_value_separator   = qr/\s*:(?:\s+(?:\#.*)?|$)/;
 
 
 
 
 
 #####################################################################
 # YAML::Tiny Implementation.
 #
 # These are the private methods that do all the work. They may change
 # at any time.
 
 
 ###
 # Loader functions:
 
 # Create an object from a file
 sub _load_file {
     my $class = ref $_[0] ? ref shift : shift;
 
     # Check the file
     my $file = shift or $class->_error( 'You did not specify a file name' );
     $class->_error( "File '$file' does not exist" )
         unless -e $file;
     $class->_error( "'$file' is a directory, not a file" )
         unless -f _;
     $class->_error( "Insufficient permissions to read '$file'" )
         unless -r _;
 
     # Open unbuffered with strict UTF-8 decoding and no translation layers
     open( my $fh, "<:unix:encoding(UTF-8)", $file );
     unless ( $fh ) {
         $class->_error("Failed to open file '$file': $!");
     }
 
     # flock if available (or warn if not possible for OS-specific reasons)
     if ( _can_flock() ) {
         flock( $fh, Fcntl::LOCK_SH() )
             or warn "Couldn't lock '$file' for reading: $!";
     }
 
     # slurp the contents
     my $contents = eval {
         use warnings FATAL => 'utf8';
         local $/;
         <$fh>
     };
     if ( my $err = $@ ) {
         $class->_error("Error reading from file '$file': $err");
     }
 
     # close the file (release the lock)
     unless ( close $fh ) {
         $class->_error("Failed to close file '$file': $!");
     }
 
     $class->_load_string( $contents );
 }
 
 # Create an object from a string
 sub _load_string {
     my $class  = ref $_[0] ? ref shift : shift;
     my $self   = bless [], $class;
     my $string = $_[0];
     eval {
         unless ( defined $string ) {
             die \"Did not provide a string to load";
         }
 
         # Check if Perl has it marked as characters, but it's internally
         # inconsistent.  E.g. maybe latin1 got read on a :utf8 layer
         if ( utf8::is_utf8($string) && ! utf8::valid($string) ) {
             die \<<'...';
 Read an invalid UTF-8 string (maybe mixed UTF-8 and 8-bit character set).
 Did you decode with lax ":utf8" instead of strict ":encoding(UTF-8)"?
 ...
         }
 
         # Ensure Unicode character semantics, even for 0x80-0xff
         utf8::upgrade($string);
 
         # Check for and strip any leading UTF-8 BOM
         $string =~ s/^\x{FEFF}//;
 
         # Check for some special cases
         return $self unless length $string;
 
         # Split the file into lines
         my @lines = grep { ! /^\s*(?:\#.*)?\z/ }
                 split /(?:\015{1,2}\012|\015|\012)/, $string;
 
         # Strip the initial YAML header
         @lines and $lines[0] =~ /^\%YAML[: ][\d\.]+.*\z/ and shift @lines;
 
         # A nibbling parser
         my $in_document = 0;
         while ( @lines ) {
             # Do we have a document header?
             if ( $lines[0] =~ /^---\s*(?:(.+)\s*)?\z/ ) {
                 # Handle scalar documents
                 shift @lines;
                 if ( defined $1 and $1 !~ /^(?:\#.+|\%YAML[: ][\d\.]+)\z/ ) {
                     push @$self,
                         $self->_load_scalar( "$1", [ undef ], \@lines );
                     next;
                 }
                 $in_document = 1;
             }
 
             if ( ! @lines or $lines[0] =~ /^(?:---|\.\.\.)/ ) {
                 # A naked document
                 push @$self, undef;
                 while ( @lines and $lines[0] !~ /^---/ ) {
                     shift @lines;
                 }
                 $in_document = 0;
 
             # XXX The final '-+$' is to look for -- which ends up being an
             # error later.
             } elsif ( ! $in_document && @$self ) {
                 # only the first document can be explicit
                 die \"YAML::Tiny failed to classify the line '$lines[0]'";
             } elsif ( $lines[0] =~ /^\s*\-(?:\s|$|-+$)/ ) {
                 # An array at the root
                 my $document = [ ];
                 push @$self, $document;
                 $self->_load_array( $document, [ 0 ], \@lines );
 
             } elsif ( $lines[0] =~ /^(\s*)\S/ ) {
                 # A hash at the root
                 my $document = { };
                 push @$self, $document;
                 $self->_load_hash( $document, [ length($1) ], \@lines );
 
             } else {
                 # Shouldn't get here.  @lines have whitespace-only lines
                 # stripped, and previous match is a line with any
                 # non-whitespace.  So this clause should only be reachable via
                 # a perlbug where \s is not symmetric with \S
 
                 # uncoverable statement
                 die \"YAML::Tiny failed to classify the line '$lines[0]'";
             }
         }
     };
     my $err = $@;
     if ( ref $err eq 'SCALAR' ) {
         $self->_error(${$err});
     } elsif ( $err ) {
         $self->_error($err);
     }
 
     return $self;
 }
 
 sub _unquote_single {
     my ($self, $string) = @_;
     return '' unless length $string;
     $string =~ s/\'\'/\'/g;
     return $string;
 }
 
 sub _unquote_double {
     my ($self, $string) = @_;
     return '' unless length $string;
     $string =~ s/\\"/"/g;
     $string =~
         s{\\([Nnever\\fartz0b]|x([0-9a-fA-F]{2}))}
          {(length($1)>1)?pack("H2",$2):$UNESCAPES{$1}}gex;
     return $string;
 }
 
 # Load a YAML scalar string to the actual Perl scalar
 sub _load_scalar {
     my ($self, $string, $indent, $lines) = @_;
 
     # Trim trailing whitespace
     $string =~ s/\s*\z//;
 
     # Explitic null/undef
     return undef if $string eq '~';
 
     # Single quote
     if ( $string =~ /^$re_capture_single_quoted$re_trailing_comment\z/ ) {
         return $self->_unquote_single($1);
     }
 
     # Double quote.
     if ( $string =~ /^$re_capture_double_quoted$re_trailing_comment\z/ ) {
         return $self->_unquote_double($1);
     }
 
     # Special cases
     if ( $string =~ /^[\'\"!&]/ ) {
         die \"YAML::Tiny does not support a feature in line '$string'";
     }
     return {} if $string =~ /^{}(?:\s+\#.*)?\z/;
     return [] if $string =~ /^\[\](?:\s+\#.*)?\z/;
 
     # Regular unquoted string
     if ( $string !~ /^[>|]/ ) {
         die \"YAML::Tiny found illegal characters in plain scalar: '$string'"
             if $string =~ /^(?:-(?:\s|$)|[\@\%\`])/ or
                 $string =~ /:(?:\s|$)/;
         $string =~ s/\s+#.*\z//;
         return $string;
     }
 
     # Error
     die \"YAML::Tiny failed to find multi-line scalar content" unless @$lines;
 
     # Check the indent depth
     $lines->[0]   =~ /^(\s*)/;
     $indent->[-1] = length("$1");
     if ( defined $indent->[-2] and $indent->[-1] <= $indent->[-2] ) {
         die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
     }
 
     # Pull the lines
     my @multiline = ();
     while ( @$lines ) {
         $lines->[0] =~ /^(\s*)/;
         last unless length($1) >= $indent->[-1];
         push @multiline, substr(shift(@$lines), $indent->[-1]);
     }
 
     my $j = (substr($string, 0, 1) eq '>') ? ' ' : "\n";
     my $t = (substr($string, 1, 1) eq '-') ? ''  : "\n";
     return join( $j, @multiline ) . $t;
 }
 
 # Load an array
 sub _load_array {
     my ($self, $array, $indent, $lines) = @_;
 
     while ( @$lines ) {
         # Check for a new document
         if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
             while ( @$lines and $lines->[0] !~ /^---/ ) {
                 shift @$lines;
             }
             return 1;
         }
 
         # Check the indent level
         $lines->[0] =~ /^(\s*)/;
         if ( length($1) < $indent->[-1] ) {
             return 1;
         } elsif ( length($1) > $indent->[-1] ) {
             die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
         }
 
         if ( $lines->[0] =~ /^(\s*\-\s+)[^\'\"]\S*\s*:(?:\s+|$)/ ) {
             # Inline nested hash
             my $indent2 = length("$1");
             $lines->[0] =~ s/-/ /;
             push @$array, { };
             $self->_load_hash( $array->[-1], [ @$indent, $indent2 ], $lines );
 
         } elsif ( $lines->[0] =~ /^\s*\-\s*\z/ ) {
             shift @$lines;
             unless ( @$lines ) {
                 push @$array, undef;
                 return 1;
             }
             if ( $lines->[0] =~ /^(\s*)\-/ ) {
                 my $indent2 = length("$1");
                 if ( $indent->[-1] == $indent2 ) {
                     # Null array entry
                     push @$array, undef;
                 } else {
                     # Naked indenter
                     push @$array, [ ];
                     $self->_load_array(
                         $array->[-1], [ @$indent, $indent2 ], $lines
                     );
                 }
 
             } elsif ( $lines->[0] =~ /^(\s*)\S/ ) {
                 push @$array, { };
                 $self->_load_hash(
                     $array->[-1], [ @$indent, length("$1") ], $lines
                 );
 
             } else {
                 die \"YAML::Tiny failed to classify line '$lines->[0]'";
             }
 
         } elsif ( $lines->[0] =~ /^\s*\-(\s*)(.+?)\s*\z/ ) {
             # Array entry with a value
             shift @$lines;
             push @$array, $self->_load_scalar(
                 "$2", [ @$indent, undef ], $lines
             );
 
         } elsif ( defined $indent->[-2] and $indent->[-1] == $indent->[-2] ) {
             # This is probably a structure like the following...
             # ---
             # foo:
             # - list
             # bar: value
             #
             # ... so lets return and let the hash parser handle it
             return 1;
 
         } else {
             die \"YAML::Tiny failed to classify line '$lines->[0]'";
         }
     }
 
     return 1;
 }
 
 # Load a hash
 sub _load_hash {
     my ($self, $hash, $indent, $lines) = @_;
 
     while ( @$lines ) {
         # Check for a new document
         if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
             while ( @$lines and $lines->[0] !~ /^---/ ) {
                 shift @$lines;
             }
             return 1;
         }
 
         # Check the indent level
         $lines->[0] =~ /^(\s*)/;
         if ( length($1) < $indent->[-1] ) {
             return 1;
         } elsif ( length($1) > $indent->[-1] ) {
             die \"YAML::Tiny found bad indenting in line '$lines->[0]'";
         }
 
         # Find the key
         my $key;
 
         # Quoted keys
         if ( $lines->[0] =~
             s/^\s*$re_capture_single_quoted$re_key_value_separator//
         ) {
             $key = $self->_unquote_single($1);
         }
         elsif ( $lines->[0] =~
             s/^\s*$re_capture_double_quoted$re_key_value_separator//
         ) {
             $key = $self->_unquote_double($1);
         }
         elsif ( $lines->[0] =~
             s/^\s*$re_capture_unquoted_key$re_key_value_separator//
         ) {
             $key = $1;
             $key =~ s/\s+$//;
         }
         elsif ( $lines->[0] =~ /^\s*\?/ ) {
             die \"YAML::Tiny does not support a feature in line '$lines->[0]'";
         }
         else {
             die \"YAML::Tiny failed to classify line '$lines->[0]'";
         }
 
         if ( exists $hash->{$key} ) {
             warn "YAML::Tiny found a duplicate key '$key' in line '$lines->[0]'";
         }
 
         # Do we have a value?
         if ( length $lines->[0] ) {
             # Yes
             $hash->{$key} = $self->_load_scalar(
                 shift(@$lines), [ @$indent, undef ], $lines
             );
         } else {
             # An indent
             shift @$lines;
             unless ( @$lines ) {
                 $hash->{$key} = undef;
                 return 1;
             }
             if ( $lines->[0] =~ /^(\s*)-/ ) {
                 $hash->{$key} = [];
                 $self->_load_array(
                     $hash->{$key}, [ @$indent, length($1) ], $lines
                 );
             } elsif ( $lines->[0] =~ /^(\s*)./ ) {
                 my $indent2 = length("$1");
                 if ( $indent->[-1] >= $indent2 ) {
                     # Null hash entry
                     $hash->{$key} = undef;
                 } else {
                     $hash->{$key} = {};
                     $self->_load_hash(
                         $hash->{$key}, [ @$indent, length($1) ], $lines
                     );
                 }
             }
         }
     }
 
     return 1;
 }
 
 
 ###
 # Dumper functions:
 
 # Save an object to a file
 sub _dump_file {
     my $self = shift;
 
     require Fcntl;
 
     # Check the file
     my $file = shift or $self->_error( 'You did not specify a file name' );
 
     my $fh;
     # flock if available (or warn if not possible for OS-specific reasons)
     if ( _can_flock() ) {
         # Open without truncation (truncate comes after lock)
         my $flags = Fcntl::O_WRONLY()|Fcntl::O_CREAT();
         sysopen( $fh, $file, $flags );
         unless ( $fh ) {
             $self->_error("Failed to open file '$file' for writing: $!");
         }
 
         # Use no translation and strict UTF-8
         binmode( $fh, ":raw:encoding(UTF-8)");
 
         flock( $fh, Fcntl::LOCK_EX() )
             or warn "Couldn't lock '$file' for reading: $!";
 
         # truncate and spew contents
         truncate $fh, 0;
         seek $fh, 0, 0;
     }
     else {
         open $fh, ">:unix:encoding(UTF-8)", $file;
     }
 
     # serialize and spew to the handle
     print {$fh} $self->_dump_string;
 
     # close the file (release the lock)
     unless ( close $fh ) {
         $self->_error("Failed to close file '$file': $!");
     }
 
     return 1;
 }
 
 # Save an object to a string
 sub _dump_string {
     my $self = shift;
     return '' unless ref $self && @$self;
 
     # Iterate over the documents
     my $indent = 0;
     my @lines  = ();
 
     eval {
         foreach my $cursor ( @$self ) {
             push @lines, '---';
 
             # An empty document
             if ( ! defined $cursor ) {
                 # Do nothing
 
             # A scalar document
             } elsif ( ! ref $cursor ) {
                 $lines[-1] .= ' ' . $self->_dump_scalar( $cursor );
 
             # A list at the root
             } elsif ( ref $cursor eq 'ARRAY' ) {
                 unless ( @$cursor ) {
                     $lines[-1] .= ' []';
                     next;
                 }
                 push @lines, $self->_dump_array( $cursor, $indent, {} );
 
             # A hash at the root
             } elsif ( ref $cursor eq 'HASH' ) {
                 unless ( %$cursor ) {
                     $lines[-1] .= ' {}';
                     next;
                 }
                 push @lines, $self->_dump_hash( $cursor, $indent, {} );
 
             } else {
                 push @lines, $self->dumper_for_unknown( $cursor, '', $indent, {} );
             }
         }
     };
     if ( ref $@ eq 'SCALAR' ) {
         $self->_error(${$@});
     } elsif ( $@ ) {
         $self->_error($@);
     }
 
     join '', map { "$_\n" } @lines;
 }
 
 sub _has_internal_string_value {
     my $value = shift;
     my $b_obj = B::svref_2object(\$value);  # for round trip problem
     return $b_obj->FLAGS & B::SVf_POK();
 }
 
 sub _dump_scalar {
     my $string = $_[1];
     my $is_key = $_[2];
     # Check this before checking length or it winds up looking like a string!
     my $has_string_flag = _has_internal_string_value($string);
     return '~'  unless defined $string;
     return "''" unless length  $string;
     if (Scalar::Util::looks_like_number($string)) {
         # keys and values that have been used as strings get quoted
         if ( $is_key || $has_string_flag ) {
             return qq['$string'];
         }
         else {
             return $string;
         }
     }
     if ( $string =~ /[\x00-\x09\x0b-\x0d\x0e-\x1f\x7f-\x9f\'\n]/ ) {
         $string =~ s/\\/\\\\/g;
         $string =~ s/"/\\"/g;
         $string =~ s/\n/\\n/g;
         $string =~ s/[\x85]/\\N/g;
         $string =~ s/([\x00-\x1f])/\\$UNPRINTABLE[ord($1)]/g;
         $string =~ s/([\x7f-\x9f])/'\x' . sprintf("%X",ord($1))/ge;
         return qq|"$string"|;
     }
     if ( $string =~ /(?:^[~!@#%&*|>?:,'"`{}\[\]]|^-+$|\s|:\z)/ or
         $QUOTE{$string}
     ) {
         return "'$string'";
     }
     return $string;
 }
 
 sub _dump_array {
     my ($self, $array, $indent, $seen) = @_;
     if ( $seen->{refaddr($array)}++ ) {
         die \"YAML::Tiny does not support circular references";
     }
     my @lines  = ();
     foreach my $el ( @$array ) {
         my $line = ('  ' x $indent) . '-';
         my $type = ref $el;
         if ( ! $type ) {
             $line .= ' ' . $self->_dump_scalar( $el );
             push @lines, $line;
 
         } elsif ( $type eq 'ARRAY' ) {
             if ( @$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_array( $el, $indent + 1, $seen );
             } else {
                 $line .= ' []';
                 push @lines, $line;
             }
 
         } elsif ( $type eq 'HASH' ) {
             if ( keys %$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_hash( $el, $indent + 1, $seen );
             } else {
                 $line .= ' {}';
                 push @lines, $line;
             }
 
         } else {
             push @lines, $self->dumper_for_unknown($el, $line, $indent + 1, $seen);
         }
     }
 
     @lines;
 }
 
 sub _dump_hash {
     my ($self, $hash, $indent, $seen) = @_;
     if ( $seen->{refaddr($hash)}++ ) {
         die \"YAML::Tiny does not support circular references";
     }
     my @lines  = ();
     foreach my $name ( sort keys %$hash ) {
         my $el   = $hash->{$name};
         my $line = ('  ' x $indent) . $self->_dump_scalar($name, 1) . ":";
         my $type = ref $el;
         if ( ! $type ) {
             $line .= ' ' . $self->_dump_scalar( $el );
             push @lines, $line;
 
         } elsif ( $type eq 'ARRAY' ) {
             if ( @$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_array( $el, $indent + 1, $seen );
             } else {
                 $line .= ' []';
                 push @lines, $line;
             }
 
         } elsif ( $type eq 'HASH' ) {
             if ( keys %$el ) {
                 push @lines, $line;
                 push @lines, $self->_dump_hash( $el, $indent + 1, $seen );
             } else {
                 $line .= ' {}';
                 push @lines, $line;
             }
 
         } else {
             push @lines, $self->dumper_for_unknown($el, $line, $indent + 1, $seen);
         }
     }
 
     @lines;
 }
 
 sub dumper_for_unknown {
    my ($self, $element, $line, $indent, $seen) = @_;
    my $type = ref $element;
    die \"YAML::Tiny does not support $type references";
 }
 
 
 #####################################################################
 # DEPRECATED API methods:
 
 # Error storage (DEPRECATED as of 1.57)
 our $errstr    = '';
 
 # Set error
 sub _error {
     require Carp;
     $errstr = $_[1];
     $errstr =~ s/ at \S+ line \d+.*//;
     Carp::croak( $errstr );
 }
 
 # Retrieve error
 my $errstr_warned;
 sub errstr {
     require Carp;
     Carp::carp( "YAML::Tiny->errstr and \$YAML::Tiny::errstr is deprecated" )
         unless $errstr_warned++;
     $errstr;
 }
 
 
 
 
 #####################################################################
 # Helper functions. Possibly not needed.
 
 
 # Use to detect nv or iv
 use B;
 
 # XXX-INGY Is flock YAML::Tiny's responsibility?
 # Some platforms can't flock :-(
 # XXX-XDG I think it is.  When reading and writing files, we ought
 # to be locking whenever possible.  People (foolishly) use YAML
 # files for things like session storage, which has race issues.
 my $HAS_FLOCK;
 sub _can_flock {
     if ( defined $HAS_FLOCK ) {
         return $HAS_FLOCK;
     }
     else {
         require Config;
         my $c = \%Config::Config;
         $HAS_FLOCK = grep { $c->{$_} } qw/d_flock d_fcntl_can_lock d_lockf/;
         require Fcntl if $HAS_FLOCK;
         return $HAS_FLOCK;
     }
 }
 
 
 # XXX-INGY Is this core in 5.8.1? Can we remove this?
 # XXX-XDG Scalar::Util 1.18 didn't land until 5.8.8, so we need this
 #####################################################################
 # Use Scalar::Util if possible, otherwise emulate it
 
 use Scalar::Util ();
 BEGIN {
     local $@;
     if ( eval { Scalar::Util->VERSION(1.18); } ) {
         *refaddr = *Scalar::Util::refaddr;
     }
     else {
         eval <<'END_PERL';
 # Scalar::Util failed to load or too old
 sub refaddr {
     my $pkg = ref($_[0]) or return undef;
     if ( !! UNIVERSAL::can($_[0], 'can') ) {
         bless $_[0], 'Scalar::Util::Fake';
     } else {
         $pkg = undef;
     }
     "$_[0]" =~ /0x(\w+)/;
     my $i = do { no warnings 'portable'; hex $1 };
     bless $_[0], $pkg if defined $pkg;
     $i;
 }
 END_PERL
     }
 }
 
 delete $YAML::Tiny::{refaddr};
 
 1;
 
 # XXX-INGY Doc notes I'm putting up here. Changing the doc when it's wrong
 # but leaving grey area stuff up here.
 #
 # I would like to change Read/Write to Load/Dump below without
 # changing the actual API names.
 #
 # It might be better to put Load/Dump API in the SYNOPSIS instead of the
 # dubious OO API.
 #
 # null and bool explanations may be outdated.
 
 __END__
 
 =pod
 
 =head1 NAME
 
 YAML::Tiny - Read/Write YAML files with as little code as possible
 
 =head1 PREAMBLE
 
 The YAML specification is huge. Really, B<really> huge. It contains all the
 functionality of XML, except with flexibility and choice, which makes it
 easier to read, but with a formal specification that is more complex than
 XML.
 
 The original pure-Perl implementation L<YAML> costs just over 4 megabytes
 of memory to load. Just like with Windows F<.ini> files (3 meg to load) and
 CSS (3.5 meg to load) the situation is just asking for a B<YAML::Tiny>
 module, an incomplete but correct and usable subset of the functionality,
 in as little code as possible.
 
 Like the other C<::Tiny> modules, YAML::Tiny has no non-core dependencies,
 does not require a compiler to install, is back-compatible to Perl v5.8.1,
 and can be inlined into other modules if needed.
 
 In exchange for this adding this extreme flexibility, it provides support
 for only a limited subset of YAML. But the subset supported contains most
 of the features for the more common uses of YAML.
 
 =head1 SYNOPSIS
 
 Assuming F<file.yml> like this:
 
     ---
     rootproperty: blah
     section:
       one: two
       three: four
       Foo: Bar
       empty: ~
 
 
 Read and write F<file.yml> like this:
 
     use YAML::Tiny;
 
     # Open the config
     my $yaml = YAML::Tiny->read( 'file.yml' );
 
     # Get a reference to the first document
     my $config = $yaml->[0];
 
     # Or read properties directly
     my $root = $yaml->[0]->{rootproperty};
     my $one  = $yaml->[0]->{section}->{one};
     my $Foo  = $yaml->[0]->{section}->{Foo};
 
     # Change data directly
     $yaml->[0]->{newsection} = { this => 'that' }; # Add a section
     $yaml->[0]->{section}->{Foo} = 'Not Bar!';     # Change a value
     delete $yaml->[0]->{section};                  # Delete a value
 
     # Save the document back to the file
     $yaml->write( 'file.yml' );
 
 To create a new YAML file from scratch:
 
     # Create a new object with a single hashref document
     my $yaml = YAML::Tiny->new( { wibble => "wobble" } );
 
     # Add an arrayref document
     push @$yaml, [ 'foo', 'bar', 'baz' ];
 
     # Save both documents to a file
     $yaml->write( 'data.yml' );
 
 Then F<data.yml> will contain:
 
     ---
     wibble: wobble
     ---
     - foo
     - bar
     - baz
 
 =head1 DESCRIPTION
 
 B<YAML::Tiny> is a perl class for reading and writing YAML-style files,
 written with as little code as possible, reducing load time and memory
 overhead.
 
 Most of the time it is accepted that Perl applications use a lot
 of memory and modules. The B<::Tiny> family of modules is specifically
 intended to provide an ultralight and zero-dependency alternative to
 many more-thorough standard modules.
 
 This module is primarily for reading human-written files (like simple
 config files) and generating very simple human-readable files. Note that
 I said B<human-readable> and not B<geek-readable>. The sort of files that
 your average manager or secretary should be able to look at and make
 sense of.
 
 =for stopwords normalise
 
 L<YAML::Tiny> does not generate comments, it won't necessarily preserve the
 order of your hashes, and it will normalise if reading in and writing out
 again.
 
 It only supports a very basic subset of the full YAML specification.
 
 =for stopwords embeddable
 
 Usage is targeted at files like Perl's META.yml, for which a small and
 easily-embeddable module is extremely attractive.
 
 Features will only be added if they are human readable, and can be written
 in a few lines of code. Please don't be offended if your request is
 refused. Someone has to draw the line, and for YAML::Tiny that someone
 is me.
 
 If you need something with more power move up to L<YAML> (7 megabytes of
 memory overhead) or L<YAML::XS> (6 megabytes memory overhead and requires
 a C compiler).
 
 To restate, L<YAML::Tiny> does B<not> preserve your comments, whitespace,
 or the order of your YAML data. But it should round-trip from Perl
 structure to file and back again just fine.
 
 =head1 METHODS
 
 =for Pod::Coverage HAVE_UTF8 refaddr
 
 =head2 new
 
 The constructor C<new> creates a C<YAML::Tiny> object as a blessed array
 reference.  Any arguments provided are taken as separate documents
 to be serialized.
 
 =head2 read $filename
 
 The C<read> constructor reads a YAML file from a file name,
 and returns a new C<YAML::Tiny> object containing the parsed content.
 
 Returns the object on success or throws an error on failure.
 
 =head2 read_string $string;
 
 The C<read_string> constructor reads YAML data from a character string, and
 returns a new C<YAML::Tiny> object containing the parsed content.  If you have
 read the string from a file yourself, be sure that you have correctly decoded
 it into characters first.
 
 Returns the object on success or throws an error on failure.
 
 =head2 write $filename
 
 The C<write> method generates the file content for the properties, and
 writes it to disk using UTF-8 encoding to the filename specified.
 
 Returns true on success or throws an error on failure.
 
 =head2 write_string
 
 Generates the file content for the object and returns it as a character
 string.  This may contain non-ASCII characters and should be encoded
 before writing it to a file.
 
 Returns true on success or throws an error on failure.
 
 =for stopwords errstr
 
 =head2 errstr (DEPRECATED)
 
 Prior to version 1.57, some errors were fatal and others were available only
 via the C<$YAML::Tiny::errstr> variable, which could be accessed via the
 C<errstr()> method.
 
 Starting with version 1.57, all errors are fatal and throw exceptions.
 
 The C<$errstr> variable is still set when exceptions are thrown, but
 C<$errstr> and the C<errstr()> method are deprecated and may be removed in a
 future release.  The first use of C<errstr()> will issue a deprecation
 warning.
 
 =head2 dumper_for_unknown
 
 =for stopwords natively
 
 Generates the YAML textual representation for items that YAML::Tiny does
 not know how to handle natively, like e.g. blessed objects. It can be used
 to extend YAML::Tiny either by subclassing, or by direct substitution of
 this method by re-defining it.
 
 The calling convention is the following:
 
 
    my @lines = $ytobject->($element, $line, $indent, $seen);
 
 i.e. it is supposed to return a sequence of textual character lines.
 
 The input parameters are:
 
 =over
 
 =item C<$element>
 
 is the element that YAML::Tiny does not know how to handle (e.g. a blessed
 reference);
 
 =item C<$line>
 
 is a prefix for the element, e.g. when the element is part of an array
 or the value in a hash. The method is supposed to pass this in the output,
 either directly (if you want your new object to appear on its own lines
 after the provided one) or after modifying it (e.g. if your textual
 representation fits in the same line);
 
 =item C<$indent>
 
 is the current level of indentation, as an integer. Please note that the
 indentation style of YAML::Tiny is to use two spaces, so your indentation
 MUST be at least two spaces long;
 
 =item C<$seen>
 
 is a hash containing the C<refaddr>s of all references seen so far, so that
 you can avoid or handle circular references. You can avoid circular
 references like this:
 
     if ( $seen->{refaddr($element)}++ ) {
         die \"YAML::Tiny does not support circular references";
     }
 
 =back
 
 The default implementation will just throw a reference to a textual
 exception like this:
 
    die \"YAML::Tiny does not support $type references";
 
 where C<$type> is C<ref($element)>.
 
 An example scenario where this might come handy if when you want to use
 YAML::Tiny to dump data structures that were generated by the JSON module
 (or JSON::XS, or Cpanel::JSON::XS, ... or JSON::MaybeXS) because in this
 case booleans will be represented by blessed objects. So, you can e.g.
 redefine the function like this:
 
    {
       no warnings 'redefine';
       my @booleans = (
          'JSON::PP::Boolean',
          'JSON::XS::Boolean',
          'Types::Serialiser::Boolean',  # should not be needed
          'Mojo::JSON::_Bool',           # only up to Mojolicious 6.21
          # Dancer, Dancer2 use JSON
       );
       sub YAML::Tiny::dumper_for_unknown {
          my ($self, $element, $line, $indent, $seen) = @_;
          my $type = ref $element;
 
          for my $boolean (@booleans) {
             next unless $element->isa($boolean);
             $line .= $element ? ' true' : ' false';
             return $line;
          }
 
          # no known boolean... complain!
          die \"YAML::Tiny does not support $type references";
       }
 
    }
 
 =head1 FUNCTIONS
 
 YAML::Tiny implements a number of functions to add compatibility with
 the L<YAML> API. These should be a drop-in replacement.
 
 =head2 Dump
 
   my $string = Dump(list-of-Perl-data-structures);
 
 Turn Perl data into YAML. This function works very much like
 Data::Dumper::Dumper().
 
 It takes a list of Perl data structures and dumps them into a serialized
 form.
 
 It returns a character string containing the YAML stream.  Be sure to encode
 it as UTF-8 before serializing to a file or socket.
 
 The structures can be references or plain scalars.
 
 Dies on any error.
 
 =head2 Load
 
   my @data_structures = Load(string-containing-a-YAML-stream);
 
 Turn YAML into Perl data. This is the opposite of Dump.
 
 Just like L<Storable>'s thaw() function or the eval() function in relation
 to L<Data::Dumper>.
 
 It parses a character string containing a valid YAML stream into a list of
 Perl data structures representing the individual YAML documents.  Be sure to
 decode the character string  correctly if the string came from a file or
 socket.
 
   my $last_data_structure = Load(string-containing-a-YAML-stream);
 
 For consistency with YAML.pm, when Load is called in scalar context, it
 returns the data structure corresponding to the last of the YAML documents
 found in the input stream.
 
 Dies on any error.
 
 =head2 freeze() and thaw()
 
 Aliases to Dump() and Load() for L<Storable> fans. This will also allow
 YAML::Tiny to be plugged directly into modules like POE.pm, that use the
 freeze/thaw API for internal serialization.
 
 =head2 DumpFile(filepath, list)
 
 Writes the YAML stream to a file with UTF-8 encoding instead of just
 returning a string.
 
 Dies on any error.
 
 =head2 LoadFile(filepath)
 
 Reads the YAML stream from a UTF-8 encoded file instead of a string.
 
 Dies on any error.
 
 =head1 YAML TINY SPECIFICATION
 
 This section of the documentation provides a specification for "YAML Tiny",
 a subset of the YAML specification.
 
 It is based on and described comparatively to the YAML 1.1 Working Draft
 2004-12-28 specification, located at L<http://yaml.org/spec/current.html>.
 
 Terminology and chapter numbers are based on that specification.
 
 =head2 1. Introduction and Goals
 
 The purpose of the YAML Tiny specification is to describe a useful subset
 of the YAML specification that can be used for typical document-oriented
 use cases such as configuration files and simple data structure dumps.
 
 =for stopwords extensibility
 
 Many specification elements that add flexibility or extensibility are
 intentionally removed, as is support for complex data structures, class
 and object-orientation.
 
 In general, the YAML Tiny language targets only those data structures
 available in JSON, with the additional limitation that only simple keys
 are supported.
 
 As a result, all possible YAML Tiny documents should be able to be
 transformed into an equivalent JSON document, although the reverse is
 not necessarily true (but will be true in simple cases).
 
 =for stopwords PCRE
 
 As a result of these simplifications the YAML Tiny specification should
 be implementable in a (relatively) small amount of code in any language
 that supports Perl Compatible Regular Expressions (PCRE).
 
 =head2 2. Introduction
 
 YAML Tiny supports three data structures. These are scalars (in a variety
 of forms), block-form sequences and block-form mappings. Flow-style
 sequences and mappings are not supported, with some minor exceptions
 detailed later.
 
 The use of three dashes "---" to indicate the start of a new document is
 supported, and multiple documents per file/stream is allowed.
 
 Both line and inline comments are supported.
 
 Scalars are supported via the plain style, single quote and double quote,
 as well as literal-style and folded-style multi-line scalars.
 
 The use of explicit tags is not supported.
 
 The use of "null" type scalars is supported via the ~ character.
 
 The use of "bool" type scalars is not supported.
 
 =for stopwords serializer
 
 However, serializer implementations should take care to explicitly escape
 strings that match a "bool" keyword in the following set to prevent other
 implementations that do support "bool" accidentally reading a string as a
 boolean
 
   y|Y|yes|Yes|YES|n|N|no|No|NO
   |true|True|TRUE|false|False|FALSE
   |on|On|ON|off|Off|OFF
 
 The use of anchors and aliases is not supported.
 
 The use of directives is supported only for the %YAML directive.
 
 =head2 3. Processing YAML Tiny Information
 
 B<Processes>
 
 =for stopwords deserialization
 
 The YAML specification dictates three-phase serialization and three-phase
 deserialization.
 
 The YAML Tiny specification does not mandate any particular methodology
 or mechanism for parsing.
 
 Any compliant parser is only required to parse a single document at a
 time. The ability to support streaming documents is optional and most
 likely non-typical.
 
 =for stopwords acyclic
 
 Because anchors and aliases are not supported, the resulting representation
 graph is thus directed but (unlike the main YAML specification) B<acyclic>.
 
 Circular references/pointers are not possible, and any YAML Tiny serializer
 detecting a circular reference should error with an appropriate message.
 
 B<Presentation Stream>
 
 =for stopwords unicode
 
 YAML Tiny reads and write UTF-8 encoded files.  Operations on strings expect
 or produce Unicode characters not UTF-8 encoded bytes.
 
 B<Loading Failure Points>
 
 =for stopwords modality
 
 =for stopwords parsers
 
 YAML Tiny parsers and emitters are not expected to recover from, or
 adapt to, errors. The specific error modality of any implementation is
 not dictated (return codes, exceptions, etc.) but is expected to be
 consistent.
 
 =head2 4. Syntax
 
 B<Character Set>
 
 YAML Tiny streams are processed in memory as Unicode characters and
 read/written with UTF-8 encoding.
 
 The escaping and unescaping of the 8-bit YAML escapes is required.
 
 The escaping and unescaping of 16-bit and 32-bit YAML escapes is not
 required.
 
 B<Indicator Characters>
 
 Support for the "~" null/undefined indicator is required.
 
 Implementations may represent this as appropriate for the underlying
 language.
 
 Support for the "-" block sequence indicator is required.
 
 Support for the "?" mapping key indicator is B<not> required.
 
 Support for the ":" mapping value indicator is required.
 
 Support for the "," flow collection indicator is B<not> required.
 
 Support for the "[" flow sequence indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "]" flow sequence indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "{" flow mapping indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "}" flow mapping indicator is B<not> required, with
 one exception (detailed below).
 
 Support for the "#" comment indicator is required.
 
 Support for the "&" anchor indicator is B<not> required.
 
 Support for the "*" alias indicator is B<not> required.
 
 Support for the "!" tag indicator is B<not> required.
 
 Support for the "|" literal block indicator is required.
 
 Support for the ">" folded block indicator is required.
 
 Support for the "'" single quote indicator is required.
 
 Support for the """ double quote indicator is required.
 
 Support for the "%" directive indicator is required, but only
 for the special case of a %YAML version directive before the
 "---" document header, or on the same line as the document header.
 
 For example:
 
   %YAML 1.1
   ---
   - A sequence with a single element
 
 Special Exception:
 
 To provide the ability to support empty sequences
 and mappings, support for the constructs [] (empty sequence) and {}
 (empty mapping) are required.
 
 For example,
 
   %YAML 1.1
   # A document consisting of only an empty mapping
   --- {}
   # A document consisting of only an empty sequence
   --- []
   # A document consisting of an empty mapping within a sequence
   - foo
   - {}
   - bar
 
 B<Syntax Primitives>
 
 Other than the empty sequence and mapping cases described above, YAML Tiny
 supports only the indentation-based block-style group of contexts.
 
 All five scalar contexts are supported.
 
 Indentation spaces work as per the YAML specification in all cases.
 
 Comments work as per the YAML specification in all simple cases.
 Support for indented multi-line comments is B<not> required.
 
 Separation spaces work as per the YAML specification in all cases.
 
 B<YAML Tiny Character Stream>
 
 The only directive supported by the YAML Tiny specification is the
 %YAML language/version identifier. Although detected, this directive
 will have no control over the parsing itself.
 
 =for stopwords recognise
 
 The parser must recognise both the YAML 1.0 and YAML 1.1+ formatting
 of this directive (as well as the commented form, although no explicit
 code should be needed to deal with this case, being a comment anyway)
 
 That is, all of the following should be supported.
 
   --- #YAML:1.0
   - foo
 
   %YAML:1.0
   ---
   - foo
 
   % YAML 1.1
   ---
   - foo
 
 Support for the %TAG directive is B<not> required.
 
 Support for additional directives is B<not> required.
 
 Support for the document boundary marker "---" is required.
 
 Support for the document boundary market "..." is B<not> required.
 
 If necessary, a document boundary should simply by indicated with a
 "---" marker, with not preceding "..." marker.
 
 Support for empty streams (containing no documents) is required.
 
 Support for implicit document starts is required.
 
 That is, the following must be equivalent.
 
  # Full form
  %YAML 1.1
  ---
  foo: bar
 
  # Implicit form
  foo: bar
 
 B<Nodes>
 
 Support for nodes optional anchor and tag properties is B<not> required.
 
 Support for node anchors is B<not> required.
 
 Support for node tags is B<not> required.
 
 Support for alias nodes is B<not> required.
 
 Support for flow nodes is B<not> required.
 
 Support for block nodes is required.
 
 B<Scalar Styles>
 
 Support for all five scalar styles is required as per the YAML
 specification, although support for quoted scalars spanning more
 than one line is B<not> required.
 
 Support for multi-line scalar documents starting on the header
 is not required.
 
 Support for the chomping indicators on multi-line scalar styles
 is required.
 
 B<Collection Styles>
 
 Support for block-style sequences is required.
 
 Support for flow-style sequences is B<not> required.
 
 Support for block-style mappings is required.
 
 Support for flow-style mappings is B<not> required.
 
 Both sequences and mappings should be able to be arbitrarily
 nested.
 
 Support for plain-style mapping keys is required.
 
 Support for quoted keys in mappings is B<not> required.
 
 Support for "?"-indicated explicit keys is B<not> required.
 
 =for stopwords endeth
 
 Here endeth the specification.
 
 =head2 Additional Perl-Specific Notes
 
 For some Perl applications, it's important to know if you really have a
 number and not a string.
 
 That is, in some contexts is important that 3 the number is distinctive
 from "3" the string.
 
 Because even Perl itself is not trivially able to understand the difference
 (certainly without XS-based modules) Perl implementations of the YAML Tiny
 specification are not required to retain the distinctiveness of 3 vs "3".
 
 =head1 SUPPORT
 
 Bugs should be reported via the CPAN bug tracker at
 
 L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=YAML-Tiny>
 
 =begin html
 
 For other issues, or commercial enhancement or support, please contact
 <a href="http://ali.as/">Adam Kennedy</a> directly.
 
 =end html
 
 =head1 AUTHOR
 
 Adam Kennedy E<lt>adamk@cpan.orgE<gt>
 
 =head1 SEE ALSO
 
 =over 4
 
 =item * L<YAML>
 
 =item * L<YAML::Syck>
 
 =item * L<Config::Tiny>
 
 =item * L<CSS::Tiny>
 
 =item * L<http://use.perl.org/use.perl.org/_Alias/journal/29427.html>
 
 =item * L<http://ali.as/>
 
 =back
 
 =head1 COPYRIGHT
 
 Copyright 2006 - 2013 Adam Kennedy.
 
 This program is free software; you can redistribute
 it and/or modify it under the same terms as Perl itself.
 
 The full text of the license can be found in the
 LICENSE file included with this module.
 
 =cut

END_OF_FILE


# __MOBUNDLE_FILE__
   );

   unshift @INC, sub {
      my ($me, $packfile) = @_;
      return unless exists $file_for{$packfile};
      (my $text = $file_for{$packfile}) =~ s/^\ //gmxs;
      chop($text); # added \n at the end
      open my $fh, '<', \$text or die "open(): $!\n";
      return $fh;
   };
} ## end BEGIN
# __MOBUNDLE_INCLUSION__

use App::OnePif;
App::OnePif->run(@ARGV);
exit 0;

__END__

=pod

=encoding utf8

=head1 NAME

1pif - Read 1Password Interchange Format exports, interactively

=head1 VERSION

version 0.1.0

=begin html

<a href="https://travis-ci.org/polettix/App-OnePif">
<img alt="Build Status" src="https://travis-ci.org/polettix/App-OnePif.svg?branch=master">
</a>

<a href="https://www.perl.org/">
<img alt="Perl Version" src="https://img.shields.io/badge/perl-5.10+-brightgreen.svg">
</a>

<a href="https://badge.fury.io/pl/App-OnePif">
<img alt="Current CPAN version" src="https://badge.fury.io/pl/App-OnePif.svg">
</a>

<a href="http://cpants.cpanauthors.org/dist/App-OnePif">
<img alt="Kwalitee" src="http://cpants.cpanauthors.org/dist/App-OnePif.png">
</a>

<a href="http://www.cpantesters.org/distro/A/App-OnePif.html?distmat=1">
<img alt="CPAN Testers" src="https://img.shields.io/badge/cpan-testers-blue.svg">
</a>

<a href="http://matrix.cpantesters.org/?dist=App-OnePif">
<img alt="CPAN Testers Matrix" src="https://img.shields.io/badge/matrix-@testers-blue.svg">
</a>

=end html

=head1 EXAMPLE

Run within a 1Password Interchange Format export directory (I<caution>, it
is B<NOT> encrypted).

   shell$ 1pif
   1password> help
   Available commands:
   * quit (also: q, .q)
      exit the program immediately, exit code is 0
   * exit [code] (also: e)
      exit the program immediately, can accept optional exit code
   * file [filename] (also: f)
      set the filename to use for taking data (default: 'data1.pif')
   * types (also: ts)
      show available types and possible aliases
   * type [wanted] (also: t, use, u)
      get current default type or set it to wanted. It is possible to
      reset the default type by setting type "*" (no quotes)
   * list [type] (also: l)
      get a list for the current set type. By default no type is set
      and the list includes all elements, otherwise it is filtered
      by the wanted type.
      If type parameter is provided, work on specified type instead
      of default one.
   * print [ <id> ] (also: p)
      show record by provided id (look for ids with the list command).
      It is also possible to specify the type, in which case the id
      is interpreted in the context of the specific type.
   * search <query-string> (also: s)
      search for the query-string, literally. Looks for a substring in
      the YAML rendition of each record that is equal to the query-string,
      case-insensitively. If a type is set, the search is restricted to
      that type.

=head1 DESCRIPTION

This program allows you to look into a 1Password Interchange Format
directory exported (again, beware it is B<NOT> encrypted!). When you run
it inside a such directory, it will read the relevant C<data.1pif> file to
get the list of all records, and allow you to browse through it.

The only real command you have to know is C<help>, as it will provide you
all details on the available commands. See L</EXAMPLE> for an... example.

To get a list of records, use the C<list> command (abbreviate it to C<l>).

   1password> list
   passwords.Password
        1 Foo
        2 Bar
        ...
   securenotes.SecureNote
        5 Whatever
        6 Hello all...
        ...
   ...

You will notice that each record is associated to a numeric identifier,
that will be the same through the whole session.

1Password assignes a type to each record. You can see which types are
available in your export through command C<types> (abbreviated C<ts>).

   1password> types
   <*>                         * (accept any type)
                            card (also: cards wallet.financial.CreditCard)
                            form (also: forms webforms.WebForm)
                         license (also: licenses wallet.computer.License)
                            note (also: notes securenotes.SecureNote)
                               p (also: password passwords passwords.Password)
                system.Tombstone
           system.folder.Regular
       system.folder.SavedSearch

If you only want to work with a specific type with the C<list> or C<search>
commands, you can set the desired type with command C<type> (abbreviated C<t>).

   1password> type passwords
   1password> list
        1 Foo
        2 Bar
        ...

The C<search> (abbreviated C<s>) command does a literal search through a YAML
rendition of each record. It's like using Perl's function C<index>, so there
is no regular expressions magic, apart that the search is performed without
caring for the case.

   1password> search foo
        1 Foo

When you want to look at a specific record, use command C<print> (abbreviated
C<p>) with the numeric identifier of the record you're interested into:

   1password> print 1
   ---
   _id: 1
   contentsHash: f87f3cd8
   createdAt: 1234567890
   location: 'Service or Application Name'
   locationKey: 'service or application name'
   secureContents:
     password: you-wish
   securityLevel: SL5
   title: Foo
   typeName: passwords.Password
   updatedAt: 1234567890
   uuid: FD7E562E94D447DCB8F3C3825F8471D9

All the fields you see come from the 1Password export, except for C<_id> that
is added by C<1pif>.

To exit from the program, you can use either command C<quit> (abbreviated with
C<q> or, if you use SQLite, also C<.q>) or command C<exit> (abbreviated C<e>),
in which case you can also pass an exit return code.

=head1 SEE ALSO

On GitHub you can find a few projects for dealing directly with the
original, I<encrypted> version of the 1Password database. For example, you
might want to check out the following projects:

=over

=item *

L<https://github.com/georgebrock/1pass>

=item *

L<https://github.com/oggy/1pass>

=item *

L<https://github.com/robertknight/passcards>

=back

=head1 AUTHOR

Flavio Poletti <polettix@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2016 by Flavio Poletti polettix@cpan.org.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
